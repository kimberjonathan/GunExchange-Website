{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CA Gun Exchange Forum\n\n## Overview\nThe CA Gun Exchange Forum is a California-focused online marketplace and discussion platform for firearms. Its primary purpose is to facilitate the legal buying, selling, and trading of firearms and related accessories, strictly adhering to California's FFL (Federal Firearms License) dealer compliance laws. The platform aims to provide a safe, regulated environment for gun enthusiasts within California, alongside general discussion forums.\n\n## User Preferences\n- Forum-based design with multiple categories\n- Age verification required for account creation\n- Clear separation between buying/selling and general discussion\n- California-focused user base\n- Emphasis on legal compliance (FFL dealers)\n\n## System Architecture\nThe project utilizes a modern web stack designed for scalability and maintainability.\n- **Frontend**: Developed with React and TypeScript, using Wouter for routing and TanStack Query for data fetching. Styling is handled by Tailwind CSS and shadcn/ui components. Forms are managed with React Hook Form and Zod validation.\n- **Backend**: Built with Express.js and TypeScript, providing a RESTful API.\n- **Database**: PostgreSQL is used as the relational database, managed via Drizzle ORM for schema management.\n- **Authentication**: A custom user authentication system is implemented, including role-based access control for admin and moderator functionalities.\n- **UI/UX Decisions**: The interface features responsive design, dark/light theme support, and a clear, forum-centric layout. Key UI elements include threaded replies, user profiles, and an admin dashboard for moderation.\n\nCore features include:\n- **Marketplace**: Dedicated categories for \"Want To Sell (WTS)\", \"Want To Buy (WTB)\", and \"Want To Trade (WTT)\" across various firearm types, ammunition, parts, and accessories.\n- **Discussion Forum**: Separate areas for general discussions not related to transactions.\n- **User Management**: Account creation with age verification, user profiles, posting history, private messaging, and comprehensive moderator/admin tools for user and content management.\n- **Content Management**: Features for creating, viewing, and managing forum posts/listings, including image uploads, a 24-hour bump system, and view tracking.\n- **Moderation System**: A robust admin and moderator portal with capabilities for user suspension, post deletion, content flagging, post pinning, and password management. Moderator controls are integrated directly into forum pages for efficiency.\n\n## Recent Changes\n- **Complete Delivery Options** (Aug 22, 2025): Added comprehensive delivery options for Want To Sell/Buy/Trade posts including \"Willing to Travel\" (green badge), \"Willing to Ship\" (blue badge), and \"Willing to Trade\" (orange badge) checkboxes. These badges are displayed on both post cards and detail views, appearing only in marketplace categories.\n- **Username Display Fix** (Aug 22, 2025): Resolved issue where category pages showed \"Unknown User\" instead of actual usernames by fixing backend API endpoint to include author data.\n- **Pin/Unpin System** (Aug 21, 2025): Implemented comprehensive post pinning functionality with moderator controls and consistent toggle behavior across all forum sections.\n\n## External Dependencies\n- **Replit Object Storage**: Utilized for storing image uploads associated with posts and user profiles, with defined ACL policies for public and private content.","size_bytes":3451},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        'forum-primary': '#1F2937',\n        'forum-secondary': '#374151',\n        'forum-accent': '#059669',\n        'forum-warning': '#DC2626',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: ['Inter', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2940},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 3,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 5000,\n});\n\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":559},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/migrate-legacy-passwords.ts":{"content":"// Legacy password migration script\n// This script flags existing users with weak passwords for mandatory password reset\n\nimport { storage } from \"./storage\";\n\nexport async function migrateLegacyPasswords() {\n  console.log(\"Starting legacy password migration...\");\n  \n  try {\n    // Get all users\n    const users = await storage.getAllUsers();\n    \n    let flaggedCount = 0;\n    \n    for (const user of users) {\n      // Check if user has a plain text password (not bcrypt hashed)\n      if (user.password && !user.password.startsWith('$2b$') && !user.password.startsWith('$2a$')) {\n        console.log(`Flagging user ${user.username} for password reset (plain text password detected)`);\n        await storage.flagUserForPasswordReset(user.id);\n        flaggedCount++;\n      }\n    }\n    \n    console.log(`Migration complete. Flagged ${flaggedCount} users for password reset.`);\n    return { success: true, flaggedCount };\n  } catch (error) {\n    console.error(\"Error during legacy password migration:\", error);\n    return { success: false, error: (error as Error).message };\n  }\n}\n\n// Run migration if this script is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  migrateLegacyPasswords().then((result) => {\n    if (result.success) {\n      console.log(`Migration completed successfully. ${result.flaggedCount} users flagged.`);\n      process.exit(0);\n    } else {\n      console.error(\"Migration failed:\", result.error);\n      process.exit(1);\n    }\n  });\n}","size_bytes":1483},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the upload URL for a public object (like post images).\n  async getPublicObjectUploadURL(): Promise<string> {\n    const publicObjectSearchPaths = this.getPublicObjectSearchPaths();\n    if (!publicObjectSearchPaths || publicObjectSearchPaths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var.\"\n      );\n    }\n\n    // Use the first public search path for uploads\n    const publicObjectDir = publicObjectSearchPaths[0];\n    const objectId = randomUUID();\n    const fullPath = `${publicObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":9288},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, \n  insertPostSchema, \n  insertReplySchema, \n  loginSchema,\n  insertMessageSchema,\n  insertConversationSchema,\n  updateUserPreferencesSchema,\n  updateUserProfileSchema,\n  updatePostSchema,\n  changePasswordSchema,\n  type User \n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\nimport bcrypt from \"bcrypt\";\n\n// Extend Express Request type to include session\ninterface SessionRequest extends Request {\n  session: any;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'ca-gun-exchange-session-secret-key-2025',\n    resave: false,\n    saveUninitialized: true, // Allow session creation for username change flow\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 60 * 60 * 1000 // 1 hour\n    }\n  }));\n\n  // User authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      const existingEmail = await storage.getUserByEmail(userData.email);\n      \n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n      \n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n      });\n\n      // Add initial password to history\n      await storage.addPasswordToHistory(user.id, hashedPassword);\n      \n      const { password, ...userWithoutPassword } = user;\n      \n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req: SessionRequest, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      // First check database users (case-insensitive username lookup)\n      const user = await storage.getUserByUsername(username);\n      \n      if (user && user.password) {\n        let isPasswordValid = false;\n        \n        // Check if password is hashed (bcrypt) or plain text (legacy)\n        if (user.password.startsWith('$2b$') || user.password.startsWith('$2a$')) {\n          // Hashed password - use bcrypt\n          isPasswordValid = await bcrypt.compare(password, user.password);\n        } else {\n          // Plain text password (legacy) - direct comparison\n          isPasswordValid = user.password === password;\n          \n          // Flag user for password reset if using legacy plain text password\n          if (isPasswordValid) {\n            await storage.flagUserForPasswordReset(user.id);\n          }\n        }\n        \n        if (isPasswordValid) {\n          if (user.isSuspended) {\n            return res.status(403).json({ message: \"Account suspended\" });\n          }\n          \n          if (req.session) {\n            req.session.userId = user.id;\n          }\n          const { password: _, ...userWithoutPassword } = user;\n          \n          // Check if user needs to reset password\n          if (user.requirePasswordReset || (!user.password.startsWith('$2b$') && !user.password.startsWith('$2a$'))) {\n            return res.json({\n              ...userWithoutPassword,\n              requirePasswordReset: true,\n              message: \"Your password must be updated to meet new security requirements\"\n            });\n          }\n          \n          // Check if user needs to change username\n          if (user.requireUsernameChange) {\n            // Ensure session is set even for username change flow\n            req.session.userId = user.id;\n\n            return res.json({\n              ...userWithoutPassword,\n              requireUsernameChange: true,\n              message: \"Your username has been flagged for change. Please choose a new username.\"\n            });\n          }\n          \n          return res.json(userWithoutPassword);\n        }\n      }\n      \n      // Fallback: Check for admin credentials (case-insensitive)\n      if (username.toLowerCase() === \"jkimber\" && password === \"admin123\") {\n        const adminUser = {\n          id: \"jkimber-admin\",\n          username: \"jkimber\",\n          email: \"jkimber@cagunexchange.com\",\n          role: \"admin\",\n          isAdmin: true,\n          isActive: true,\n          createdAt: new Date()\n        };\n        return res.json(adminUser);\n      }\n      \n      return res.status(401).json({ message: \"Invalid credentials\" });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Admin authentication route\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = loginSchema.parse(req.body);\n      \n      // First check if it's a regular user with admin privileges\n      const user = await storage.getUserByUsername(username);\n      \n      if (user && user.password) {\n        let isPasswordValid = false;\n        \n        // Check if password is hashed (bcrypt) or plain text (legacy)\n        if (user.password.startsWith('$2b$') || user.password.startsWith('$2a$')) {\n          // Hashed password - use bcrypt\n          isPasswordValid = await bcrypt.compare(password, user.password);\n        } else {\n          // Plain text password (legacy) - direct comparison\n          isPasswordValid = user.password === password;\n        }\n        \n        if (isPasswordValid) {\n          if (user.isSuspended) {\n            return res.status(403).json({ message: \"Account suspended\" });\n          }\n          \n          // Check if user is admin\n          if (user.isAdmin) {\n            const { password: _, ...userWithoutPassword } = user;\n            return res.json({ user: userWithoutPassword, message: \"Admin login successful\" });\n          } else {\n            return res.status(403).json({ message: \"Access denied. Admin privileges required.\" });\n          }\n        }\n      }\n      \n      // Fallback: Check for hardcoded admin credentials (case-insensitive)\n      if (username.toLowerCase() === \"jkimber\" && password === \"admin123\") {\n        const adminUser = {\n          id: \"jkimber\",\n          username: \"jkimber\",\n          email: \"jkimber@cagunexchange.com\",\n          role: \"admin\",\n          isAdmin: true,\n          isActive: true,\n          createdAt: new Date()\n        };\n        return res.json({ user: adminUser, message: \"Admin login successful\" });\n      }\n      \n      return res.status(401).json({ message: \"Invalid admin credentials\" });\n    } catch (error) {\n      console.error(\"Admin login error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Admin login failed\" });\n    }\n  });\n\n  // Get current authenticated user\n  app.get(\"/api/auth/user\", async (req, res) => {\n    try {\n      const sessionReq = req as SessionRequest;\n      \n      if (!sessionReq.session?.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const user = await storage.getUser(sessionReq.session.userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Return user without password\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      const sessionReq = req as SessionRequest;\n      \n      if (sessionReq.session) {\n        sessionReq.session.destroy((err) => {\n          if (err) {\n            console.error(\"Session destruction error:\", err);\n            return res.status(500).json({ message: \"Logout failed\" });\n          }\n          res.clearCookie('connect.sid');\n          res.json({ message: \"Logged out successfully\" });\n        });\n      } else {\n        res.json({ message: \"Already logged out\" });\n      }\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: \"Logout failed\" });\n    }\n  });\n\n  // Categories routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/categories/:slug\", async (req, res) => {\n    try {\n      const category = await storage.getCategoryBySlug(req.params.slug);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch category\" });\n    }\n  });\n\n  // Posts routes\n  app.get(\"/api/posts\", async (req, res) => {\n    try {\n      const postsWithAuthors = await storage.getPostsWithAuthors();\n      res.json(postsWithAuthors);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch posts\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.get(\"/api/posts/category/:categoryId\", async (req, res) => {\n    try {\n      // Use the working method that includes author data\n      const allPostsWithAuthors = await storage.getPostsWithAuthors();\n      const categoryPosts = allPostsWithAuthors\n        .filter(post => post.categoryId === req.params.categoryId)\n        .sort((a, b) => {\n          // First sort by pinned status (pinned posts first)\n          if (a.isPinned && !b.isPinned) return -1;\n          if (!a.isPinned && b.isPinned) return 1;\n          \n          // Then sort by bump/creation date\n          return (b.bumpedAt?.getTime() || b.createdAt?.getTime() || 0) - (a.bumpedAt?.getTime() || a.createdAt?.getTime() || 0);\n        });\n      \n      res.json(categoryPosts);\n    } catch (error) {\n      console.error(\"Error fetching posts by category:\", error);\n      res.status(500).json({ message: \"Failed to fetch posts\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.get(\"/api/posts/user/:userId\", async (req, res) => {\n    try {\n      const posts = await storage.getPostsByUser(req.params.userId);\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user posts\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Return user without password\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.get(\"/api/posts/:id\", async (req, res) => {\n    try {\n      const post = await storage.getPost(req.params.id);\n      if (!post) {\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n      \n      // Increment view count\n      await storage.incrementPostViews(req.params.id);\n      \n      // Add author information\n      const author = await storage.getUser(post.authorId);\n      const postWithAuthor = {\n        ...post,\n        author: author ? { ...author, password: undefined } : undefined\n      };\n      \n      res.json(postWithAuthor);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch post\" });\n    }\n  });\n\n  app.post(\"/api/posts\", async (req, res) => {\n    try {\n      const postData = insertPostSchema.parse(req.body);\n      const { authorId, images } = req.body;\n      \n      if (!authorId) {\n        return res.status(400).json({ message: \"Author ID is required\" });\n      }\n      \n      const user = await storage.getUser(authorId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Include images in the post data\n      const postWithImages = {\n        ...postData,\n        images: images || []\n      };\n      \n      const post = await storage.createPost(postWithImages, authorId);\n      res.status(201).json(post);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      console.error(\"Error creating post:\", error);\n      res.status(500).json({ message: \"Failed to create post\" });\n    }\n  });\n\n  app.put(\"/api/posts/:id\", async (req, res) => {\n    try {\n      const postData = updatePostSchema.parse(req.body);\n      const { authorId } = req.body;\n      \n      if (!authorId) {\n        return res.status(400).json({ message: \"Author ID is required\" });\n      }\n      \n      const user = await storage.getUser(authorId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const post = await storage.updatePostContent(req.params.id, postData, authorId);\n      if (!post) {\n        return res.status(404).json({ message: \"Post not found or you don't have permission to edit this post\" });\n      }\n      \n      res.json(post);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      console.error(\"Error updating post:\", error);\n      res.status(500).json({ message: \"Failed to update post\" });\n    }\n  });\n\n  // Replies routes\n  app.get(\"/api/posts/:postId/replies\", async (req, res) => {\n    try {\n      const replies = await storage.getRepliesByPost(req.params.postId);\n      res.json(replies);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch replies\" });\n    }\n  });\n\n  app.post(\"/api/posts/:postId/replies\", async (req, res) => {\n    try {\n      const replyData = insertReplySchema.parse({\n        ...req.body,\n        postId: req.params.postId\n      });\n      const { authorId } = req.body;\n      \n      if (!authorId) {\n        return res.status(400).json({ message: \"Author ID is required\" });\n      }\n      \n      const user = await storage.getUser(authorId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const reply = await storage.createReply(replyData, authorId);\n      res.status(201).json(reply);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to create reply\" });\n    }\n  });\n\n  // Bump functionality\n  // Admin/Moderator post pinning routes\n  app.post(\"/api/posts/:id/pin\", async (req, res) => {\n    try {\n      const post = await storage.togglePinPost(req.params.id);\n      if (!post) {\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error toggling pin status:\", error);\n      res.status(500).json({ message: \"Failed to toggle pin status\" });\n    }\n  });\n\n  app.delete(\"/api/posts/:id/pin\", async (req, res) => {\n    try {\n      const post = await storage.unpinPost(req.params.id);\n      if (!post) {\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error unpinning post:\", error);\n      res.status(500).json({ message: \"Failed to unpin post\" });\n    }\n  });\n\n  app.post(\"/api/posts/:id/bump\", async (req, res) => {\n    try {\n      const { authorId } = req.body;\n      \n      if (!authorId) {\n        return res.status(400).json({ message: \"Author ID is required\" });\n      }\n      \n      const result = await storage.bumpPost(req.params.id, authorId);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: result.message });\n      }\n      \n      res.json({ message: result.message, post: result.post });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to bump post\" });\n    }\n  });\n\n  // Messaging routes\n  app.get(\"/api/conversations\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const conversations = await storage.getConversations(userId);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get(\"/api/messages/unread-count\", async (req, res) => {\n    try {\n      const sessionReq = req as SessionRequest;\n      \n      if (!sessionReq.session?.userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const userId = sessionReq.session.userId;\n      const count = await storage.getUnreadMessageCount(userId);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error fetching unread message count:\", error);\n      res.status(500).json({ message: \"Failed to fetch unread count\" });\n    }\n  });\n\n  app.post(\"/api/conversations\", async (req, res) => {\n    try {\n      const sessionReq = req as SessionRequest;\n      console.log(\"🔍 CONVERSATION CREATE - Session:\", sessionReq.session);\n      \n      if (!sessionReq.session?.userId) {\n        console.log(\"🔍 CONVERSATION CREATE - NO SESSION USER ID\");\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const userId = sessionReq.session.userId;\n\n      const conversationData = insertConversationSchema.parse(req.body);\n      \n      // Ensure the current user is one of the participants\n      if (conversationData.participant1Id !== userId && conversationData.participant2Id !== userId) {\n        return res.status(403).json({ message: \"User must be a participant in the conversation\" });\n      }\n\n      const conversation = await storage.createConversation(conversationData);\n      res.status(201).json(conversation);\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to create conversation\" });\n    }\n  });\n\n  app.get(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const conversationId = req.params.id;\n      const messages = await storage.getMessages(conversationId, userId);\n      \n      // Mark messages as read\n      await storage.markMessagesAsRead(conversationId, userId);\n      \n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const conversationId = req.params.id;\n      const messageData = insertMessageSchema.parse({\n        ...req.body,\n        conversationId,\n      });\n\n      // Verify user is part of the conversation\n      const conversation = await storage.getConversation(conversationId, userId);\n      if (!conversation) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const message = await storage.sendMessage(messageData, userId);\n      res.status(201).json(message);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Alternative messages endpoint for direct messaging\n  app.post(\"/api/messages\", async (req, res) => {\n    try {\n      const sessionReq = req as SessionRequest;\n      \n      if (!sessionReq.session?.userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const userId = sessionReq.session.userId;\n\n      const messageData = insertMessageSchema.parse(req.body);\n\n      // Verify user is part of the conversation\n      const conversation = await storage.getConversation(messageData.conversationId, userId);\n      if (!conversation) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const message = await storage.sendMessage(messageData, userId);\n      res.status(201).json(message);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  app.get(\"/api/messages/unread-count\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const count = await storage.getUnreadMessageCount(userId);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error fetching unread count:\", error);\n      res.status(500).json({ message: \"Failed to fetch unread count\" });\n    }\n  });\n\n  // Mark conversation as read\n  app.post(\"/api/conversations/:id/mark-read\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const conversationId = req.params.id;\n      await storage.markConversationAsRead(conversationId, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking conversation as read:\", error);\n      res.status(500).json({ message: \"Failed to mark as read\" });\n    }\n  });\n\n  // Delete conversations\n  app.post(\"/api/conversations/delete\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const { conversationIds } = req.body;\n      if (!Array.isArray(conversationIds) || conversationIds.length === 0) {\n        return res.status(400).json({ message: \"Invalid conversation IDs\" });\n      }\n\n      await storage.deleteConversations(conversationIds, userId);\n      res.json({ success: true, deletedCount: conversationIds.length });\n    } catch (error) {\n      console.error(\"Error deleting conversations:\", error);\n      res.status(500).json({ message: \"Failed to delete conversations\" });\n    }\n  });\n\n  // User profile and preferences routes\n  app.get(\"/api/user/preferences\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const preferences = await storage.getUserPreferences(userId);\n      res.json(preferences);\n    } catch (error) {\n      console.error(\"Error fetching user preferences:\", error);\n      res.status(500).json({ message: \"Failed to fetch preferences\" });\n    }\n  });\n\n  app.put(\"/api/user/preferences\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const preferencesData = updateUserPreferencesSchema.parse(req.body);\n      const preferences = await storage.updateUserPreferences(userId, preferencesData);\n      res.json(preferences);\n    } catch (error) {\n      console.error(\"Error updating user preferences:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to update preferences\" });\n    }\n  });\n\n  app.get(\"/api/user/profile\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.put(\"/api/user/profile\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const profileData = updateUserProfileSchema.parse(req.body);\n      \n      // Handle password change\n      let hashedPassword: string | undefined;\n      if (profileData.newPassword && profileData.currentPassword) {\n        const user = await storage.getUser(userId);\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        const isCurrentPasswordValid = await bcrypt.compare(profileData.currentPassword, user.password);\n        if (!isCurrentPasswordValid) {\n          return res.status(400).json({ message: \"Current password is incorrect\" });\n        }\n\n        hashedPassword = await bcrypt.hash(profileData.newPassword, 10);\n      }\n\n      const updatedUser = await storage.updateUserProfile(userId, profileData, hashedPassword);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Profile picture upload routes\n  app.post(\"/api/profile-picture/upload\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting profile picture upload URL:\", error);\n      res.status(500).json({ message: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.put(\"/api/profile-picture\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      if (!req.body.profilePictureURL) {\n        return res.status(400).json({ message: \"Profile picture URL is required\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.profilePictureURL,\n        {\n          owner: userId,\n          visibility: \"public\", // Profile pictures should be publicly visible\n        }\n      );\n\n      // Update user's profile picture in database\n      const updatedUser = await storage.updateUserProfile(userId, { profilePicture: objectPath });\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json({ user: userWithoutPassword, objectPath });\n    } catch (error) {\n      console.error(\"Error setting profile picture:\", error);\n      res.status(500).json({ message: \"Failed to set profile picture\" });\n    }\n  });\n\n  // Object storage routes\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getPublicObjectUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Public user profile routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Return public user data (excluding sensitive info)\n      const publicUser = {\n        id: user.id,\n        username: user.username,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        location: user.location,\n        bio: user.bio,\n        profilePicture: user.profilePicture,\n        isVerified: user.isVerified,\n        createdAt: user.createdAt,\n      };\n\n      res.json(publicUser);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.get(\"/api/users/:id/posts\", async (req, res) => {\n    try {\n      const userId = req.params.id;\n      \n      // Verify user exists\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const posts = await storage.getPostsByUser(userId);\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching user posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch user posts\" });\n    }\n  });\n\n  // Search API\n  app.get(\"/api/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query || !query.trim()) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n\n      const [postResults, userResults] = await Promise.all([\n        storage.searchPosts(query.trim()),\n        storage.searchUsers(query.trim())\n      ]);\n      \n      res.json({\n        posts: postResults,\n        users: userResults,\n        totalResults: postResults.length + userResults.length\n      });\n    } catch (error) {\n      console.error(\"Error performing search:\", error);\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // User logout route\n  app.post('/api/logout', (req, res) => {\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n  // Moderator routes for main site (require admin or moderator privileges)\n  app.delete(\"/api/posts/:id/moderate\", async (req: SessionRequest, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || (!user.isAdmin && !user.isModerator)) {\n        return res.status(403).json({ message: \"Insufficient privileges\" });\n      }\n\n      const deleted = await storage.deletePost(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n      \n      res.json({ message: \"Post deleted successfully\" });\n    } catch (error) {\n      console.error('Error deleting post:', error);\n      res.status(500).json({ message: \"Failed to delete post\" });\n    }\n  });\n\n  app.post(\"/api/posts/:id/pin\", async (req: SessionRequest, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || (!user.isAdmin && !user.isModerator)) {\n        return res.status(403).json({ message: \"Insufficient privileges\" });\n      }\n\n      const post = await storage.togglePinPost(req.params.id);\n      if (!post) {\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n      \n      res.json(post);\n    } catch (error) {\n      console.error('Error pinning/unpinning post:', error);\n      res.status(500).json({ message: \"Failed to pin/unpin post\" });\n    }\n  });\n\n  app.post(\"/api/users/:id/suspend\", async (req: SessionRequest, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || (!user.isAdmin && !user.isModerator)) {\n        return res.status(403).json({ message: \"Insufficient privileges\" });\n      }\n\n      const targetUser = await storage.toggleUserSuspension(req.params.id);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = targetUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error('Error suspending/unsuspending user:', error);\n      res.status(500).json({ message: \"Failed to suspend/unsuspend user\" });\n    }\n  });\n\n  // Moderator routes for user flagging (require admin or moderator privileges)\n  app.put(\"/api/users/:id/flag-username-change\", async (req: SessionRequest, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || (!user.isAdmin && !user.isModerator)) {\n        return res.status(403).json({ message: \"Insufficient privileges\" });\n      }\n\n      const targetUser = await storage.flagUserForUsernameChange(req.params.id);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = targetUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error('Error flagging user for username change:', error);\n      res.status(500).json({ message: \"Failed to flag user for username change\" });\n    }\n  });\n\n  app.put(\"/api/users/:id/flag-password-reset\", async (req: SessionRequest, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || (!user.isAdmin && !user.isModerator)) {\n        return res.status(403).json({ message: \"Insufficient privileges\" });\n      }\n\n      const targetUser = await storage.flagUserForPasswordReset(req.params.id);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = targetUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error('Error flagging user for password reset:', error);\n      res.status(500).json({ message: \"Failed to flag user for password reset\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/suspend\", async (req, res) => {\n    try {\n      const user = await storage.toggleUserSuspension(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to suspend/unsuspend user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteUser(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/posts/:id\", async (req, res) => {\n    try {\n      console.log('Admin deleting post:', req.params.id);\n      const deleted = await storage.deletePost(req.params.id);\n      if (!deleted) {\n        console.log('Post not found for deletion:', req.params.id);\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n      \n      console.log('Post deleted successfully:', req.params.id);\n      res.json({ message: \"Post deleted successfully\" });\n    } catch (error) {\n      console.error('Error deleting post:', error);\n      res.status(500).json({ message: \"Failed to delete post\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/make-admin\", async (req, res) => {\n    try {\n      const user = await storage.makeUserAdmin(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to make user admin\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/toggle-moderator\", async (req, res) => {\n    try {\n      const user = await storage.toggleUserModerator(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to toggle moderator status\" });\n    }\n  });\n\n  app.put(\"/api/admin/users/:id/flag-username-change\", async (req, res) => {\n    try {\n      const user = await storage.flagUserForUsernameChange(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error flagging user for username change:\", error);\n      res.status(500).json({ message: \"Failed to flag user for username change\" });\n    }\n  });\n\n  // Route to handle username change for flagged users\n  app.put(\"/api/profile/change-username\", async (req: any, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { newUsername } = req.body;\n      if (!newUsername || newUsername.trim().length === 0) {\n        return res.status(400).json({ message: \"New username is required\" });\n      }\n\n      const user = await storage.getUserByUsername(newUsername.trim());\n      if (user && user.id !== req.session.userId) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const updatedUser = await storage.updateUserUsername(req.session.userId, newUsername.trim());\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Clear the username change flag\n      await storage.clearUsernameChangeFlag(req.session.userId);\n\n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error changing username:\", error);\n      res.status(500).json({ message: \"Failed to change username\" });\n    }\n  });\n\n  // Object storage routes\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getPublicObjectUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.put(\"/api/post-images\", async (req, res) => {\n    if (!req.body.imageURL) {\n      return res.status(400).json({ error: \"imageURL is required\" });\n    }\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = objectStorageService.normalizeObjectEntityPath(\n        req.body.imageURL,\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error setting post image:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Stats route\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Advertisement routes\n  app.get(\"/api/advertisements/:position?\", async (req, res) => {\n    try {\n      const { position } = req.params;\n      const advertisements = await storage.getAdvertisements(position);\n      res.json(advertisements);\n    } catch (error) {\n      console.error(\"Error fetching advertisements:\", error);\n      res.status(500).json({ message: \"Failed to fetch advertisements\" });\n    }\n  });\n\n  app.post(\"/api/advertisements\", async (req, res) => {\n    try {\n      // Only allow admin users to create advertisements\n      if (!req.body.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const advertisement = await storage.createAdvertisement(req.body);\n      res.status(201).json(advertisement);\n    } catch (error) {\n      console.error(\"Error creating advertisement:\", error);\n      res.status(500).json({ message: \"Failed to create advertisement\" });\n    }\n  });\n\n  app.put(\"/api/advertisements/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const advertisement = await storage.updateAdvertisement(id, req.body);\n      \n      if (!advertisement) {\n        return res.status(404).json({ message: \"Advertisement not found\" });\n      }\n      \n      res.json(advertisement);\n    } catch (error) {\n      console.error(\"Error updating advertisement:\", error);\n      res.status(500).json({ message: \"Failed to update advertisement\" });\n    }\n  });\n\n  app.delete(\"/api/advertisements/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const advertisement = await storage.updateAdvertisement(id, { isActive: false });\n      \n      if (!advertisement) {\n        return res.status(404).json({ message: \"Advertisement not found\" });\n      }\n      \n      res.json({ message: \"Advertisement deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting advertisement:\", error);\n      res.status(500).json({ message: \"Failed to delete advertisement\" });\n    }\n  });\n\n  // Featured listing routes\n  app.get(\"/api/featured-listings\", async (req, res) => {\n    try {\n      const featuredListings = await storage.getActiveFeaturedListings();\n      res.json(featuredListings);\n    } catch (error) {\n      console.error(\"Error fetching featured listings:\", error);\n      res.status(500).json({ message: \"Failed to fetch featured listings\" });\n    }\n  });\n\n  app.post(\"/api/featured-listings\", async (req, res) => {\n    try {\n      const featuredListing = await storage.createFeaturedListing(req.body);\n      res.status(201).json(featuredListing);\n    } catch (error) {\n      console.error(\"Error creating featured listing:\", error);\n      res.status(500).json({ message: \"Failed to create featured listing\" });\n    }\n  });\n\n  // Change password route\n  app.post(\"/api/auth/change-password\", async (req, res) => {\n    try {\n      const userId = req.headers[\"x-user-id\"] as string;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const passwordData = changePasswordSchema.parse(req.body);\n      \n      const result = await storage.changeUserPassword(\n        userId, \n        passwordData.currentPassword, \n        passwordData.newPassword\n      );\n      \n      if (result.success) {\n        // Clear password reset flag after successful change\n        await storage.clearPasswordResetFlag(userId);\n        res.json({ message: result.message });\n      } else {\n        res.status(400).json({ message: result.message });\n      }\n    } catch (error) {\n      console.error(\"Password change error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  // Admin route to flag user for password reset\n  app.post(\"/api/admin/flag-password-reset/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const result = await storage.flagUserForPasswordReset(userId);\n      \n      if (result) {\n        res.json({ message: \"User flagged for password reset successfully\" });\n      } else {\n        res.status(404).json({ message: \"User not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error flagging user for password reset:\", error);\n      res.status(500).json({ message: \"Failed to flag user for password reset\" });\n    }\n  });\n\n  // Clear password reset flag\n  app.post(\"/api/admin/clear-password-reset/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      await storage.clearPasswordResetFlag(userId);\n      res.json({ message: \"Password reset flag cleared successfully\" });\n    } catch (error) {\n      console.error(\"Error clearing password reset flag:\", error);\n      res.status(500).json({ message: \"Failed to clear password reset flag\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":47939},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { categories, users } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\nasync function seedCategories() {\n  const defaultCategories = [\n    { id: randomUUID(), name: \"Handguns\", slug: \"wts-handguns\", type: \"wts\", description: \"Handguns for sale\", icon: \"fas fa-handgun\" },\n    { id: randomUUID(), name: \"Long Guns\", slug: \"wts-long-guns\", type: \"wts\", description: \"Rifles and shotguns for sale\", icon: \"fas fa-gun\" },\n    { id: randomUUID(), name: \"Antique Firearms\", slug: \"wts-antique\", type: \"wts\", description: \"Antique firearms for sale\", icon: \"fas fa-history\" },\n    { id: randomUUID(), name: \"Ammunition\", slug: \"wts-ammo\", type: \"wts\", description: \"Ammunition for sale\", icon: \"fas fa-circle\" },\n    { id: randomUUID(), name: \"Parts & Accessories\", slug: \"wts-parts\", type: \"wts\", description: \"Parts and accessories for sale\", icon: \"fas fa-cog\" },\n    \n    { id: randomUUID(), name: \"Handguns\", slug: \"wtb-handguns\", type: \"wtb\", description: \"Looking for handguns\", icon: \"fas fa-handgun\" },\n    { id: randomUUID(), name: \"Long Guns\", slug: \"wtb-long-guns\", type: \"wtb\", description: \"Looking for rifles and shotguns\", icon: \"fas fa-gun\" },\n    { id: randomUUID(), name: \"Antique Firearms\", slug: \"wtb-antique\", type: \"wtb\", description: \"Looking for antique firearms\", icon: \"fas fa-history\" },\n    { id: randomUUID(), name: \"Ammunition\", slug: \"wtb-ammo\", type: \"wtb\", description: \"Looking for ammunition\", icon: \"fas fa-circle\" },\n    { id: randomUUID(), name: \"Parts & Accessories\", slug: \"wtb-parts\", type: \"wtb\", description: \"Looking for parts and accessories\", icon: \"fas fa-cog\" },\n    \n    { id: randomUUID(), name: \"Handguns\", slug: \"wtt-handguns\", type: \"wtt\", description: \"Want to trade handguns\", icon: \"fas fa-handgun\" },\n    { id: randomUUID(), name: \"Long Guns\", slug: \"wtt-long-guns\", type: \"wtt\", description: \"Want to trade rifles and shotguns\", icon: \"fas fa-gun\" },\n    { id: randomUUID(), name: \"Antique Firearms\", slug: \"wtt-antique\", type: \"wtt\", description: \"Want to trade antique firearms\", icon: \"fas fa-history\" },\n    { id: randomUUID(), name: \"Ammunition\", slug: \"wtt-ammo\", type: \"wtt\", description: \"Want to trade ammunition\", icon: \"fas fa-circle\" },\n    { id: randomUUID(), name: \"Parts & Accessories\", slug: \"wtt-parts\", type: \"wtt\", description: \"Want to trade parts and accessories\", icon: \"fas fa-cog\" },\n    \n    { id: randomUUID(), name: \"General Discussion\", slug: \"general\", type: \"discussion\", description: \"General discussions\", icon: \"fas fa-comments\" },\n    { id: randomUUID(), name: \"CA Gun Laws\", slug: \"ca-laws\", type: \"discussion\", description: \"California gun law discussions\", icon: \"fas fa-gavel\" },\n    { id: randomUUID(), name: \"Reviews & Recommendations\", slug: \"reviews\", type: \"discussion\", description: \"Product reviews and recommendations\", icon: \"fas fa-star\" },\n    { id: randomUUID(), name: \"Training & Safety\", slug: \"training\", type: \"discussion\", description: \"Training and safety discussions\", icon: \"fas fa-shield-alt\" },\n    { id: randomUUID(), name: \"Off Topic\", slug: \"off-topic\", type: \"discussion\", description: \"Off topic discussions\", icon: \"fas fa-chat\" },\n  ];\n\n  try {\n    await db.insert(categories).values(defaultCategories).execute();\n    console.log(\"Successfully seeded categories\");\n  } catch (error) {\n    console.log(\"Categories may already exist, skipping seed\");\n  }\n}\n\nasync function createAdminUser() {\n  try {\n    const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n    \n    const adminUser = {\n      id: randomUUID(),\n      username: \"admin\",\n      email: \"admin@cagunexchange.com\",\n      password: hashedPassword,\n      dateOfBirth: new Date(\"1990-01-01\"),\n      firstName: \"Site\",\n      lastName: \"Administrator\",\n      location: \"California\",\n      bio: \"Site Administrator\",\n      isVerified: true,\n      isAdmin: true,\n      isSuspended: false,\n      profilePicture: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    await db.insert(users).values(adminUser).execute();\n    console.log(\"Successfully created admin user:\");\n    console.log(\"Username: admin\");\n    console.log(\"Password: admin123\");\n    console.log(\"Please change the password after first login!\");\n  } catch (error) {\n    console.log(\"Admin user may already exist, skipping creation\");\n  }\n}\n\nasync function seedDatabase() {\n  await seedCategories();\n  await createAdminUser();\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase().then(() => process.exit(0)).catch((err) => {\n    console.error(err);\n    process.exit(1);\n  });\n}\n\nexport { seedCategories, createAdminUser, seedDatabase };","size_bytes":4720},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Post, \n  type InsertPost, \n  type Category, \n  type Reply, \n  type InsertReply,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type UserPreferences,\n  type UpdateUserPreferences,\n  type UpdateUserProfile,\n  type UpdatePost,\n  type Advertisement,\n  type InsertAdvertisement,\n  type FeaturedListing,\n  type InsertFeaturedListing\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { validatePassword, hashPassword, verifyPassword } from \"@shared/password-utils\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Category methods\n  getCategories(): Promise<Category[]>;\n  getCategoryBySlug(slug: string): Promise<Category | undefined>;\n  \n  // Post methods\n  getPosts(): Promise<Post[]>;\n  getPostsWithAuthors(): Promise<(Post & { author?: Omit<User, 'password'> })[]>;\n  getPostsByCategory(categoryId: string): Promise<(Post & { author?: Omit<User, 'password'> })[]>;\n  getPostsByUser(userId: string): Promise<Post[]>;\n  getPost(id: string): Promise<Post | undefined>;\n  createPost(post: InsertPost, authorId: string): Promise<Post>;\n  updatePost(id: string, updates: Partial<Post>): Promise<Post | undefined>;\n  updatePostContent(id: string, updates: UpdatePost, authorId: string): Promise<Post | undefined>;\n  pinPost(id: string): Promise<Post | undefined>;\n  unpinPost(id: string): Promise<Post | undefined>;\n  togglePinPost(id: string): Promise<Post | undefined>;\n  incrementPostViews(id: string): Promise<void>;\n  bumpPost(id: string, authorId: string): Promise<{ success: boolean; message: string; post?: Post }>;\n  \n  // Reply methods\n  getRepliesByPost(postId: string): Promise<Reply[]>;\n  createReply(reply: InsertReply, authorId: string): Promise<Reply>;\n  \n  // Stats\n  getStats(): Promise<{\n    totalMembers: number;\n    activeListings: number;\n    postsToday: number;\n  }>;\n  \n  // Admin methods\n  getAllUsers(): Promise<User[]>;\n  toggleUserSuspension(userId: string): Promise<User | undefined>;\n  deleteUser(userId: string): Promise<boolean>;\n  deletePost(postId: string): Promise<boolean>;\n  makeUserAdmin(userId: string): Promise<User | undefined>;\n  toggleUserModerator(userId: string): Promise<User | undefined>;\n  updateUserUsername(userId: string, newUsername: string): Promise<User | undefined>;\n  flagUserForPasswordReset(userId: string): Promise<User | null>;\n  clearPasswordResetFlag(userId: string): Promise<void>;\n  flagUserForUsernameChange(userId: string): Promise<User | null>;\n  clearUsernameChangeFlag(userId: string): Promise<void>;\n  \n  // Messaging methods\n  getConversations(userId: string): Promise<(Conversation & { otherUser: User; lastMessage?: Message; unreadCount: number })[]>;\n  getConversation(conversationId: string, userId: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  getMessages(conversationId: string, userId: string): Promise<Message[]>;\n  sendMessage(message: InsertMessage, senderId: string): Promise<Message>;\n  markMessagesAsRead(conversationId: string, userId: string): Promise<void>;\n  getUnreadMessageCount(userId: string): Promise<number>;\n  \n  // User preferences methods\n  getUserPreferences(userId: string): Promise<UserPreferences | undefined>;\n  updateUserPreferences(userId: string, preferences: UpdateUserPreferences): Promise<UserPreferences>;\n  updateUserProfile(userId: string, profile: UpdateUserProfile, hashedPassword?: string): Promise<User | undefined>;\n  \n  // Password methods\n  addPasswordToHistory(userId: string, passwordHash: string): Promise<void>;\n  checkPasswordHistory(userId: string, newPassword: string): Promise<boolean>;\n  changeUserPassword(userId: string, currentPassword: string, newPassword: string): Promise<{ success: boolean; message: string }>;\n  \n  // Advertisement methods\n  getAdvertisements(position?: string): Promise<Advertisement[]>;\n  createAdvertisement(ad: InsertAdvertisement): Promise<Advertisement>;\n  updateAdvertisement(id: string, updates: Partial<Advertisement>): Promise<Advertisement | undefined>;\n  incrementAdImpressions(id: string): Promise<void>;\n  incrementAdClicks(id: string): Promise<void>;\n  \n  // Featured listing methods\n  getFeaturedListings(): Promise<(FeaturedListing & { post: Post })[]>;\n  createFeaturedListing(listing: InsertFeaturedListing): Promise<FeaturedListing>;\n  getActiveFeaturedListings(): Promise<(FeaturedListing & { post: Post })[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private categories: Map<string, Category>;\n  private posts: Map<string, Post>;\n  private replies: Map<string, Reply>;\n  private advertisements: Map<string, Advertisement>;\n  private featuredListings: Map<string, FeaturedListing>;\n\n  constructor() {\n    this.users = new Map();\n    this.categories = new Map();\n    this.posts = new Map();\n    this.replies = new Map();\n    this.advertisements = new Map();\n    this.featuredListings = new Map();\n    \n    this.initializeCategories();\n  }\n\n  private initializeCategories() {\n    const defaultCategories: Category[] = [\n      { id: randomUUID(), name: \"Handguns\", slug: \"wts-handguns\", type: \"wts\", description: \"Handguns for sale\", icon: \"fas fa-handgun\" },\n      { id: randomUUID(), name: \"Long Guns\", slug: \"wts-long-guns\", type: \"wts\", description: \"Rifles and shotguns for sale\", icon: \"fas fa-gun\" },\n      { id: randomUUID(), name: \"Antique Firearms\", slug: \"wts-antique\", type: \"wts\", description: \"Antique firearms for sale\", icon: \"fas fa-history\" },\n      { id: randomUUID(), name: \"Ammunition\", slug: \"wts-ammo\", type: \"wts\", description: \"Ammunition for sale\", icon: \"fas fa-circle\" },\n      { id: randomUUID(), name: \"Parts & Accessories\", slug: \"wts-parts\", type: \"wts\", description: \"Parts and accessories for sale\", icon: \"fas fa-cog\" },\n      \n      { id: randomUUID(), name: \"Handguns\", slug: \"wtb-handguns\", type: \"wtb\", description: \"Looking for handguns\", icon: \"fas fa-handgun\" },\n      { id: randomUUID(), name: \"Long Guns\", slug: \"wtb-long-guns\", type: \"wtb\", description: \"Looking for rifles and shotguns\", icon: \"fas fa-gun\" },\n      { id: randomUUID(), name: \"Antique Firearms\", slug: \"wtb-antique\", type: \"wtb\", description: \"Looking for antique firearms\", icon: \"fas fa-history\" },\n      { id: randomUUID(), name: \"Ammunition\", slug: \"wtb-ammo\", type: \"wtb\", description: \"Looking for ammunition\", icon: \"fas fa-circle\" },\n      { id: randomUUID(), name: \"Parts & Accessories\", slug: \"wtb-parts\", type: \"wtb\", description: \"Looking for parts and accessories\", icon: \"fas fa-cog\" },\n      \n      { id: randomUUID(), name: \"General Discussion\", slug: \"general\", type: \"discussion\", description: \"General discussions\", icon: \"fas fa-comments\" },\n      { id: randomUUID(), name: \"CA Gun Laws\", slug: \"ca-laws\", type: \"discussion\", description: \"California gun law discussions\", icon: \"fas fa-gavel\" },\n      { id: randomUUID(), name: \"Reviews & Recommendations\", slug: \"reviews\", type: \"discussion\", description: \"Product reviews and recommendations\", icon: \"fas fa-star\" },\n      { id: randomUUID(), name: \"Training & Safety\", slug: \"training\", type: \"discussion\", description: \"Training and safety discussions\", icon: \"fas fa-shield-alt\" },\n      { id: randomUUID(), name: \"Off Topic\", slug: \"off-topic\", type: \"discussion\", description: \"Off topic discussions\", icon: \"fas fa-chat\" },\n    ];\n\n    defaultCategories.forEach(category => {\n      this.categories.set(category.id, category);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username.toLowerCase() === username.toLowerCase(),\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      firstName: insertUser.firstName || null,\n      lastName: insertUser.lastName || null,\n      bio: insertUser.bio || null,\n      profilePicture: insertUser.profilePicture || null,\n      dateOfBirth: new Date(insertUser.dateOfBirth),\n      location: insertUser.location || null,\n      isVerified: false,\n      isAdmin: false,\n      isModerator: false,\n      isSuspended: false,\n      requirePasswordReset: false,\n      requireUsernameChange: false,\n      createdAt: new Date(),\n      updatedAt: null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    return Array.from(this.categories.values()).find(cat => cat.slug === slug);\n  }\n\n  async getPosts(): Promise<Post[]> {\n    return Array.from(this.posts.values())\n      .sort((a, b) => {\n        // First sort by pinned status (pinned posts first)\n        if (a.isPinned && !b.isPinned) return -1;\n        if (!a.isPinned && b.isPinned) return 1;\n        \n        // Then sort by bump/creation date\n        return (b.bumpedAt?.getTime() || b.createdAt?.getTime() || 0) - (a.bumpedAt?.getTime() || a.createdAt?.getTime() || 0);\n      });\n  }\n\n  async getPostsWithAuthors(): Promise<(Post & { author?: Omit<User, 'password'> })[]> {\n    const posts = Array.from(this.posts.values())\n      .sort((a, b) => {\n        // First sort by pinned status (pinned posts first)\n        if (a.isPinned && !b.isPinned) return -1;\n        if (!a.isPinned && b.isPinned) return 1;\n        \n        // Then sort by bump/creation date\n        return (b.bumpedAt?.getTime() || b.createdAt?.getTime() || 0) - (a.bumpedAt?.getTime() || a.createdAt?.getTime() || 0);\n      });\n      \n    return posts.map(post => {\n      const author = this.users.get(post.authorId);\n      if (author) {\n        const { password, ...authorWithoutPassword } = author;\n        return {\n          ...post,\n          author: authorWithoutPassword\n        };\n      }\n      return {\n        ...post,\n        author: undefined\n      };\n    });\n  }\n\n  async getPostsByCategory(categoryId: string): Promise<(Post & { author?: Omit<User, 'password'> })[]> {\n    // First get all posts with authors using the working method\n    const allPostsWithAuthors = await this.getPostsWithAuthors();\n    \n    // Then filter by category and sort\n    return allPostsWithAuthors\n      .filter(post => post.categoryId === categoryId)\n      .sort((a, b) => {\n        // First sort by pinned status (pinned posts first)\n        if (a.isPinned && !b.isPinned) return -1;\n        if (!a.isPinned && b.isPinned) return 1;\n        \n        // Then sort by bump/creation date\n        return (b.bumpedAt?.getTime() || b.createdAt?.getTime() || 0) - (a.bumpedAt?.getTime() || a.createdAt?.getTime() || 0);\n      });\n  }\n\n  async getPostsByUser(userId: string): Promise<Post[]> {\n    return Array.from(this.posts.values())\n      .filter(post => post.authorId === userId)\n      .sort((a, b) => {\n        // First sort by pinned status (pinned posts first)\n        if (a.isPinned && !b.isPinned) return -1;\n        if (!a.isPinned && b.isPinned) return 1;\n        \n        // Then sort by bump/creation date\n        return (b.bumpedAt?.getTime() || b.createdAt?.getTime() || 0) - (a.bumpedAt?.getTime() || a.createdAt?.getTime() || 0);\n      });\n  }\n\n  async getPost(id: string): Promise<Post | undefined> {\n    return this.posts.get(id);\n  }\n\n  async createPost(post: InsertPost, authorId: string): Promise<Post> {\n    const id = randomUUID();\n    const newPost: Post = {\n      ...post,\n      id,\n      authorId,\n      location: post.location || null,\n      price: post.price || null,\n      contactInfo: post.contactInfo || null,\n      images: post.images || null,\n      willingToTravel: post.willingToTravel || false,\n      willingToShip: post.willingToShip || false,\n      willingToTrade: post.willingToTrade || false,\n      views: 0,\n      isActive: true,\n      isPinned: false,\n      pinnedAt: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      bumpedAt: new Date(),\n    };\n    this.posts.set(id, newPost);\n    return newPost;\n  }\n\n  async updatePost(id: string, updates: Partial<Post>): Promise<Post | undefined> {\n    const post = this.posts.get(id);\n    if (!post) return undefined;\n    \n    const updatedPost = { ...post, ...updates, updatedAt: new Date() };\n    this.posts.set(id, updatedPost);\n    return updatedPost;\n  }\n\n  async updatePostContent(id: string, updates: UpdatePost, authorId: string): Promise<Post | undefined> {\n    const post = this.posts.get(id);\n    if (!post) return undefined;\n    if (post.authorId !== authorId) return undefined;\n    \n    const updatedPost = { ...post, ...updates, updatedAt: new Date() };\n    this.posts.set(id, updatedPost);\n    return updatedPost;\n  }\n\n  async pinPost(id: string): Promise<Post | undefined> {\n    const post = this.posts.get(id);\n    if (!post) return undefined;\n    \n    const updatedPost = { \n      ...post, \n      isPinned: true,\n      pinnedAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.posts.set(id, updatedPost);\n    return updatedPost;\n  }\n\n  async unpinPost(id: string): Promise<Post | undefined> {\n    const post = this.posts.get(id);\n    if (!post) return undefined;\n    \n    const updatedPost = { \n      ...post, \n      isPinned: false,\n      pinnedAt: null,\n      updatedAt: new Date()\n    };\n    this.posts.set(id, updatedPost);\n    return updatedPost;\n  }\n\n  async togglePinPost(id: string): Promise<Post | undefined> {\n    const post = this.posts.get(id);\n    if (!post) return undefined;\n    \n    const updatedPost = { \n      ...post, \n      isPinned: !post.isPinned,\n      pinnedAt: !post.isPinned ? new Date() : null,\n      updatedAt: new Date()\n    };\n    this.posts.set(id, updatedPost);\n    return updatedPost;\n  }\n\n  async incrementPostViews(id: string): Promise<void> {\n    const post = this.posts.get(id);\n    if (post) {\n      post.views = (post.views || 0) + 1;\n      this.posts.set(id, post);\n    }\n  }\n\n  async getRepliesByPost(postId: string): Promise<Reply[]> {\n    return Array.from(this.replies.values())\n      .filter(reply => reply.postId === postId)\n      .sort((a, b) => (a.createdAt?.getTime() || 0) - (b.createdAt?.getTime() || 0));\n  }\n\n  async createReply(reply: InsertReply, authorId: string): Promise<Reply> {\n    const id = randomUUID();\n    const newReply: Reply = {\n      ...reply,\n      id,\n      authorId,\n      createdAt: new Date(),\n    };\n    this.replies.set(id, newReply);\n    return newReply;\n  }\n\n  async getStats(): Promise<{ totalMembers: number; activeListings: number; postsToday: number; }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const totalMembers = this.users.size;\n    const activeListings = Array.from(this.posts.values()).filter(post => post.isActive).length;\n    const postsToday = Array.from(this.posts.values()).filter(post => \n      post.createdAt && post.createdAt >= today\n    ).length;\n\n    return { totalMembers, activeListings, postsToday };\n  }\n\n  async bumpPost(id: string, authorId: string): Promise<{ success: boolean; message: string; post?: Post }> {\n    const post = this.posts.get(id);\n    if (!post) {\n      return { success: false, message: \"Post not found\" };\n    }\n\n    if (post.authorId !== authorId) {\n      return { success: false, message: \"You can only bump your own posts\" };\n    }\n\n    const now = new Date();\n    const lastBump = post.bumpedAt;\n    \n    if (lastBump) {\n      const hoursSinceLastBump = (now.getTime() - lastBump.getTime()) / (1000 * 60 * 60);\n      if (hoursSinceLastBump < 24) {\n        const hoursRemaining = Math.ceil(24 - hoursSinceLastBump);\n        return { success: false, message: `You can bump this post again in ${hoursRemaining} hours` };\n      }\n    }\n\n    post.bumpedAt = now;\n    this.posts.set(id, post);\n    \n    return { success: true, message: \"Post bumped successfully\", post };\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values())\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async toggleUserSuspension(userId: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    user.isSuspended = !user.isSuspended;\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async deleteUser(userId: string): Promise<boolean> {\n    return this.users.delete(userId);\n  }\n\n  async deletePost(postId: string): Promise<boolean> {\n    return this.posts.delete(postId);\n  }\n\n  async makeUserAdmin(userId: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    user.isAdmin = true;\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async toggleUserModerator(userId: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    user.isModerator = !user.isModerator;\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async updateUserUsername(userId: string, newUsername: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    // Check if username already exists (case-insensitive)\n    const existingUser = Array.from(this.users.values()).find(u => \n      u.id !== userId && u.username.toLowerCase() === newUsername.toLowerCase()\n    );\n    \n    if (existingUser) {\n      throw new Error(\"Username already exists\");\n    }\n    \n    user.username = newUsername;\n    user.updatedAt = new Date();\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async flagUserForUsernameChange(userId: string): Promise<User | null> {\n    const user = this.users.get(userId);\n    if (!user) return null;\n    \n    user.requireUsernameChange = true;\n    user.updatedAt = new Date();\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async clearUsernameChangeFlag(userId: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      user.requireUsernameChange = false;\n      user.updatedAt = new Date();\n      this.users.set(userId, user);\n    }\n  }\n\n  async flagUserForPasswordReset(userId: string): Promise<User | null> {\n    const user = this.users.get(userId);\n    if (!user) return null;\n    \n    user.requirePasswordReset = true;\n    user.updatedAt = new Date();\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async clearPasswordResetFlag(userId: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (!user) return;\n    \n    user.requirePasswordReset = false;\n    user.updatedAt = new Date();\n    this.users.set(userId, user);\n  }\n\n  // Messaging stubs - not implemented in memory storage\n  async getConversations(userId: string): Promise<any[]> {\n    return [];\n  }\n\n  async getConversation(conversationId: string, userId: string): Promise<any> {\n    return undefined;\n  }\n\n  async createConversation(conversation: any): Promise<any> {\n    return { id: randomUUID(), ...conversation };\n  }\n\n  async getMessages(conversationId: string, userId: string): Promise<any[]> {\n    return [];\n  }\n\n  async sendMessage(message: any, senderId: string): Promise<any> {\n    return { id: randomUUID(), ...message, senderId };\n  }\n\n  async markMessagesAsRead(conversationId: string, userId: string): Promise<void> {\n    // stub\n  }\n\n  async getUnreadMessageCount(userId: string): Promise<number> {\n    return 0;\n  }\n\n  // User preferences stubs\n  async getUserPreferences(userId: string): Promise<any> {\n    return undefined;\n  }\n\n  async updateUserPreferences(userId: string, preferences: any): Promise<any> {\n    return { userId, ...preferences };\n  }\n\n  async updateUserProfile(userId: string, profile: any, hashedPassword?: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    Object.assign(user, profile);\n    if (hashedPassword) user.password = hashedPassword;\n    this.users.set(userId, user);\n    return user;\n  }\n\n  // Advertisement methods\n  async getAdvertisements(position?: string): Promise<Advertisement[]> {\n    const ads = Array.from(this.advertisements.values()).filter(ad => ad.isActive);\n    return position ? ads.filter(ad => ad.position === position) : ads;\n  }\n\n  async createAdvertisement(ad: InsertAdvertisement): Promise<Advertisement> {\n    const newAd: Advertisement = {\n      id: randomUUID(),\n      ...ad,\n      size: ad.size || null,\n      isActive: ad.isActive ?? true,\n      imageUrl: ad.imageUrl ?? null,\n      impressions: 0,\n      clicks: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      startDate: ad.startDate || null,\n      endDate: ad.endDate || null,\n      monthlyRate: ad.monthlyRate || null,\n    };\n    this.advertisements.set(newAd.id, newAd);\n    return newAd;\n  }\n\n  async updateAdvertisement(id: string, updates: Partial<Advertisement>): Promise<Advertisement | undefined> {\n    const ad = this.advertisements.get(id);\n    if (!ad) return undefined;\n    \n    const updatedAd = { ...ad, ...updates, updatedAt: new Date() };\n    this.advertisements.set(id, updatedAd);\n    return updatedAd;\n  }\n\n  async incrementAdImpressions(id: string): Promise<void> {\n    const ad = this.advertisements.get(id);\n    if (ad) {\n      ad.impressions = (ad.impressions || 0) + 1;\n      this.advertisements.set(id, ad);\n    }\n  }\n\n  async incrementAdClicks(id: string): Promise<void> {\n    const ad = this.advertisements.get(id);\n    if (ad) {\n      ad.clicks = (ad.clicks || 0) + 1;\n      this.advertisements.set(id, ad);\n    }\n  }\n\n  // Featured listing methods\n  async getFeaturedListings(): Promise<(FeaturedListing & { post: Post })[]> {\n    const listings = Array.from(this.featuredListings.values()).filter(listing => listing.isActive);\n    return listings.map(listing => ({\n      ...listing,\n      post: this.posts.get(listing.postId)!\n    })).filter(item => item.post);\n  }\n\n  async createFeaturedListing(listing: InsertFeaturedListing): Promise<FeaturedListing> {\n    const newListing: FeaturedListing = {\n      id: randomUUID(),\n      ...listing,\n      isActive: listing.isActive ?? true,\n      createdAt: new Date(),\n    };\n    this.featuredListings.set(newListing.id, newListing);\n    return newListing;\n  }\n\n  async getActiveFeaturedListings(): Promise<(FeaturedListing & { post: Post })[]> {\n    const now = new Date();\n    const listings = Array.from(this.featuredListings.values()).filter(listing => \n      listing.isActive && new Date(listing.featuredUntil) > now\n    );\n    return listings.map(listing => ({\n      ...listing,\n      post: this.posts.get(listing.postId)!\n    })).filter(item => item.post);\n  }\n\n  // Password methods - stub implementations for MemStorage\n  async addPasswordToHistory(userId: string, passwordHash: string): Promise<void> {\n    // MemStorage doesn't persist password history\n    return;\n  }\n\n  async checkPasswordHistory(userId: string, newPassword: string): Promise<boolean> {\n    // MemStorage always allows password changes\n    return true;\n  }\n\n  async changeUserPassword(userId: string, currentPassword: string, newPassword: string): Promise<{ success: boolean; message: string }> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      return { success: false, message: \"User not found\" };\n    }\n\n    // Verify current password\n    if (!(await verifyPassword(currentPassword, user.password))) {\n      return { success: false, message: \"Current password is incorrect\" };\n    }\n\n    // Validate new password format\n    const passwordValidation = validatePassword(newPassword);\n    if (!passwordValidation.isValid) {\n      return { success: false, message: passwordValidation.errors.join(\", \") };\n    }\n\n    // Update password in memory\n    const newPasswordHash = await hashPassword(newPassword);\n    user.password = newPasswordHash;\n    user.updatedAt = new Date();\n\n    return { success: true, message: \"Password changed successfully\" };\n  }\n}\n\n// Database storage implementation\nimport { db } from \"./db\";\nimport { eq, sql, and, or, desc, ilike, inArray } from \"drizzle-orm\";\nimport { categories, posts, replies, users, conversations, messages, userPreferences, advertisements, featuredListings, passwordHistory } from \"@shared/schema\";\n\nexport class DatabaseStorage implements IStorage {\n  private initialized = false;\n\n  private async ensureCategoriesExist() {\n    if (this.initialized) return;\n    \n    const existingCategories = await db.select().from(categories).limit(1);\n    if (existingCategories.length > 0) {\n      this.initialized = true;\n      return;\n    }\n\n    const defaultCategories = [\n      { id: randomUUID(), name: \"Handguns\", slug: \"wts-handguns\", type: \"wts\", description: \"Handguns for sale\", icon: \"fas fa-handgun\" },\n      { id: randomUUID(), name: \"Long Guns\", slug: \"wts-long-guns\", type: \"wts\", description: \"Rifles and shotguns for sale\", icon: \"fas fa-gun\" },\n      { id: randomUUID(), name: \"Antique Firearms\", slug: \"wts-antique\", type: \"wts\", description: \"Antique firearms for sale\", icon: \"fas fa-history\" },\n      { id: randomUUID(), name: \"Ammunition\", slug: \"wts-ammo\", type: \"wts\", description: \"Ammunition for sale\", icon: \"fas fa-circle\" },\n      { id: randomUUID(), name: \"Parts & Accessories\", slug: \"wts-parts\", type: \"wts\", description: \"Parts and accessories for sale\", icon: \"fas fa-cog\" },\n      \n      { id: randomUUID(), name: \"Handguns\", slug: \"wtb-handguns\", type: \"wtb\", description: \"Looking for handguns\", icon: \"fas fa-handgun\" },\n      { id: randomUUID(), name: \"Long Guns\", slug: \"wtb-long-guns\", type: \"wtb\", description: \"Looking for rifles and shotguns\", icon: \"fas fa-gun\" },\n      { id: randomUUID(), name: \"Antique Firearms\", slug: \"wtb-antique\", type: \"wtb\", description: \"Looking for antique firearms\", icon: \"fas fa-history\" },\n      { id: randomUUID(), name: \"Ammunition\", slug: \"wtb-ammo\", type: \"wtb\", description: \"Looking for ammunition\", icon: \"fas fa-circle\" },\n      { id: randomUUID(), name: \"Parts & Accessories\", slug: \"wtb-parts\", type: \"wtb\", description: \"Looking for parts and accessories\", icon: \"fas fa-cog\" },\n      \n      { id: randomUUID(), name: \"General Discussion\", slug: \"general\", type: \"discussion\", description: \"General discussions\", icon: \"fas fa-comments\" },\n      { id: randomUUID(), name: \"CA Gun Laws\", slug: \"ca-laws\", type: \"discussion\", description: \"California gun law discussions\", icon: \"fas fa-gavel\" },\n      { id: randomUUID(), name: \"Reviews & Recommendations\", slug: \"reviews\", type: \"discussion\", description: \"Product reviews and recommendations\", icon: \"fas fa-star\" },\n      { id: randomUUID(), name: \"Training & Safety\", slug: \"training\", type: \"discussion\", description: \"Training and safety discussions\", icon: \"fas fa-shield-alt\" },\n      { id: randomUUID(), name: \"Off Topic\", slug: \"off-topic\", type: \"discussion\", description: \"Off topic discussions\", icon: \"fas fa-chat\" },\n    ];\n\n    try {\n      await db.insert(categories).values(defaultCategories).execute();\n      this.initialized = true;\n    } catch (error) {\n      // Categories might already exist\n      this.initialized = true;\n    }\n  }\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(ilike(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        dateOfBirth: new Date(insertUser.dateOfBirth),\n        location: insertUser.location || null,\n        isVerified: false,\n        isAdmin: false,\n        isSuspended: false,\n        createdAt: new Date()\n      })\n      .returning();\n    return user;\n  }\n\n  async getCategories(): Promise<Category[]> {\n    try {\n      await this.ensureCategoriesExist();\n      return await db.select().from(categories);\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      return [];\n    }\n  }\n\n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.slug, slug));\n    return category || undefined;\n  }\n\n  async getPosts(): Promise<Post[]> {\n    try {\n      return await db.select().from(posts).orderBy(sql`${posts.bumpedAt} DESC NULLS LAST, ${posts.createdAt} DESC`);\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n      return [];\n    }\n  }\n\n  async getPostsWithAuthors(): Promise<(Post & { author?: Omit<User, 'password'> })[]> {\n    try {\n      const allPosts = await this.getPosts();\n      const postsWithAuthors = [];\n      \n      for (const post of allPosts) {\n        const [author] = await db.select().from(users).where(eq(users.id, post.authorId));\n        if (author) {\n          const { password, ...authorWithoutPassword } = author;\n          postsWithAuthors.push({\n            ...post,\n            author: authorWithoutPassword\n          });\n        } else {\n          postsWithAuthors.push({\n            ...post,\n            author: undefined\n          });\n        }\n      }\n      \n      return postsWithAuthors;\n    } catch (error) {\n      console.error('Error fetching posts with authors:', error);\n      return [];\n    }\n  }\n\n  async getPostsByCategory(categoryId: string): Promise<Post[]> {\n    return await db.select().from(posts)\n      .where(eq(posts.categoryId, categoryId))\n      .orderBy(sql`${posts.bumpedAt} DESC NULLS LAST, ${posts.createdAt} DESC`);\n  }\n\n  async getPostsByUser(userId: string): Promise<Post[]> {\n    return await db.select().from(posts)\n      .where(eq(posts.authorId, userId))\n      .orderBy(sql`${posts.bumpedAt} DESC NULLS LAST, ${posts.createdAt} DESC`);\n  }\n\n  async getPost(id: string): Promise<Post | undefined> {\n    const [post] = await db.select().from(posts).where(eq(posts.id, id));\n    return post || undefined;\n  }\n\n  async createPost(post: InsertPost, authorId: string): Promise<Post> {\n    const [newPost] = await db\n      .insert(posts)\n      .values({\n        ...post,\n        authorId,\n        location: post.location || null,\n        price: post.price || null,\n        contactInfo: post.contactInfo || null,\n        images: post.images || null,\n        views: 0,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        bumpedAt: new Date(),\n      })\n      .returning();\n    return newPost;\n  }\n\n  async updatePost(id: string, updates: Partial<Post>): Promise<Post | undefined> {\n    const [updatedPost] = await db\n      .update(posts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(posts.id, id))\n      .returning();\n    return updatedPost || undefined;\n  }\n\n  async updatePostContent(id: string, updates: UpdatePost, authorId: string): Promise<Post | undefined> {\n    // First verify the post exists and the user owns it\n    const [existingPost] = await db.select().from(posts).where(eq(posts.id, id));\n    if (!existingPost) return undefined;\n    if (existingPost.authorId !== authorId) return undefined;\n\n    const [updatedPost] = await db\n      .update(posts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(posts.id, id))\n      .returning();\n    return updatedPost || undefined;\n  }\n\n  async pinPost(id: string): Promise<Post | undefined> {\n    const [updatedPost] = await db\n      .update(posts)\n      .set({ \n        isPinned: true,\n        pinnedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(posts.id, id))\n      .returning();\n    return updatedPost || undefined;\n  }\n\n  async unpinPost(id: string): Promise<Post | undefined> {\n    const [updatedPost] = await db\n      .update(posts)\n      .set({ \n        isPinned: false,\n        pinnedAt: null,\n        updatedAt: new Date()\n      })\n      .where(eq(posts.id, id))\n      .returning();\n    return updatedPost || undefined;\n  }\n\n  async togglePinPost(id: string): Promise<Post | undefined> {\n    // First get the current post to check if it's pinned\n    const [currentPost] = await db.select().from(posts).where(eq(posts.id, id));\n    if (!currentPost) return undefined;\n\n    const [updatedPost] = await db\n      .update(posts)\n      .set({ \n        isPinned: !currentPost.isPinned,\n        pinnedAt: !currentPost.isPinned ? new Date() : null,\n        updatedAt: new Date()\n      })\n      .where(eq(posts.id, id))\n      .returning();\n    return updatedPost || undefined;\n  }\n\n  async incrementPostViews(id: string): Promise<void> {\n    await db\n      .update(posts)\n      .set({ views: sql`${posts.views} + 1` })\n      .where(eq(posts.id, id));\n  }\n\n  async bumpPost(id: string, authorId: string): Promise<{ success: boolean; message: string; post?: Post }> {\n    const [post] = await db.select().from(posts).where(eq(posts.id, id));\n    if (!post) {\n      return { success: false, message: \"Post not found\" };\n    }\n\n    if (post.authorId !== authorId) {\n      return { success: false, message: \"You can only bump your own posts\" };\n    }\n\n    const now = new Date();\n    const lastBump = post.bumpedAt;\n    \n    if (lastBump) {\n      const hoursSinceLastBump = (now.getTime() - lastBump.getTime()) / (1000 * 60 * 60);\n      if (hoursSinceLastBump < 24) {\n        const hoursRemaining = Math.ceil(24 - hoursSinceLastBump);\n        return { success: false, message: `You can bump this post again in ${hoursRemaining} hours` };\n      }\n    }\n\n    const [updatedPost] = await db\n      .update(posts)\n      .set({ bumpedAt: now })\n      .where(eq(posts.id, id))\n      .returning();\n    \n    return { success: true, message: \"Post bumped successfully\", post: updatedPost };\n  }\n\n  async getRepliesByPost(postId: string): Promise<Reply[]> {\n    const allReplies = await db.select().from(replies)\n      .where(eq(replies.postId, postId))\n      .orderBy(replies.createdAt);\n    \n    // Add author information to each reply\n    const repliesWithAuthors = [];\n    for (const reply of allReplies) {\n      const [author] = await db.select().from(users).where(eq(users.id, reply.authorId));\n      if (author) {\n        const { password, ...authorWithoutPassword } = author;\n        repliesWithAuthors.push({\n          ...reply,\n          author: authorWithoutPassword\n        });\n      } else {\n        repliesWithAuthors.push({\n          ...reply,\n          author: undefined\n        });\n      }\n    }\n    \n    return repliesWithAuthors as Reply[];\n  }\n\n  async searchPosts(query: string): Promise<any[]> {\n    const searchTerm = `%${query.toLowerCase()}%`;\n    \n    const searchResults = await db\n      .select({\n        id: posts.id,\n        title: posts.title,\n        content: posts.content,\n        authorId: posts.authorId,\n        categoryId: posts.categoryId,\n        price: posts.price,\n        images: posts.images,\n        location: posts.location,\n        createdAt: posts.createdAt,\n        updatedAt: posts.updatedAt,\n        isActive: posts.isActive,\n        isPinned: posts.isPinned,\n        bumpedAt: posts.bumpedAt,\n        username: users.username,\n        views: posts.views\n      })\n      .from(posts)\n      .innerJoin(users, eq(posts.authorId, users.id))\n      .where(\n        and(\n          eq(posts.isActive, true),\n          or(\n            sql`LOWER(${posts.title}) LIKE ${searchTerm}`,\n            sql`LOWER(${posts.content}) LIKE ${searchTerm}`,\n            sql`LOWER(${posts.location}) LIKE ${searchTerm}`\n          )\n        )\n      )\n      .orderBy(desc(posts.bumpedAt), desc(posts.createdAt));\n\n    return searchResults;\n  }\n\n  async searchUsers(query: string): Promise<any[]> {\n    const searchTerm = `%${query.toLowerCase()}%`;\n    \n    const searchResults = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        location: users.location,\n        bio: users.bio,\n        profilePicture: users.profilePicture,\n        createdAt: users.createdAt,\n        isVerified: users.isVerified\n      })\n      .from(users)\n      .where(\n        and(\n          eq(users.isSuspended, false),\n          or(\n            sql`LOWER(${users.username}) LIKE ${searchTerm}`,\n            sql`LOWER(${users.firstName}) LIKE ${searchTerm}`,\n            sql`LOWER(${users.lastName}) LIKE ${searchTerm}`,\n            sql`LOWER(${users.location}) LIKE ${searchTerm}`\n          )\n        )\n      )\n      .orderBy(users.username);\n\n    return searchResults;\n  }\n\n  async createReply(reply: InsertReply, authorId: string): Promise<Reply> {\n    const [newReply] = await db\n      .insert(replies)\n      .values({\n        ...reply,\n        authorId,\n        createdAt: new Date(),\n      })\n      .returning();\n    return newReply;\n  }\n\n  async getStats(): Promise<{ totalMembers: number; activeListings: number; postsToday: number; }> {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const [totalMembersResult] = await db.select({ count: sql<number>`count(*)` }).from(users);\n      const [activeListingsResult] = await db.select({ count: sql<number>`count(*)` }).from(posts).where(eq(posts.isActive, true));\n      const [postsTodayResult] = await db.select({ count: sql<number>`count(*)` }).from(posts).where(sql`${posts.createdAt} >= ${today}`);\n\n      return {\n        totalMembers: totalMembersResult?.count || 0,\n        activeListings: activeListingsResult?.count || 0,\n        postsToday: postsTodayResult?.count || 0\n      };\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      return {\n        totalMembers: 0,\n        activeListings: 0,\n        postsToday: 0\n      };\n    }\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(users.createdAt);\n  }\n\n  async toggleUserSuspension(userId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    if (!user) return undefined;\n    \n    const [updatedUser] = await db\n      .update(users)\n      .set({ isSuspended: !user.isSuspended })\n      .where(eq(users.id, userId))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async deleteUser(userId: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, userId));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async deletePost(postId: string): Promise<boolean> {\n    const result = await db.delete(posts).where(eq(posts.id, postId));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async makeUserAdmin(userId: string): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ isAdmin: true })\n      .where(eq(users.id, userId))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async toggleUserModerator(userId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    if (!user) return undefined;\n    \n    const [updatedUser] = await db\n      .update(users)\n      .set({ isModerator: !user.isModerator })\n      .where(eq(users.id, userId))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async updateUserUsername(userId: string, newUsername: string): Promise<User | undefined> {\n    try {\n      // Check if username already exists (case-insensitive)\n      const [existingUser] = await db\n        .select({ id: users.id })\n        .from(users)\n        .where(and(\n          eq(sql`lower(${users.username})`, newUsername.toLowerCase()),\n          sql`${users.id} != ${userId}`\n        ));\n      \n      if (existingUser) {\n        throw new Error(\"Username already exists\");\n      }\n      \n      const [updatedUser] = await db\n        .update(users)\n        .set({ username: newUsername, updatedAt: new Date() })\n        .where(eq(users.id, userId))\n        .returning();\n      \n      return updatedUser || undefined;\n    } catch (error) {\n      console.error(\"Error updating username:\", error);\n      throw error;\n    }\n  }\n\n  async flagUserForPasswordReset(userId: string): Promise<User | null> {\n    try {\n      const [user] = await db\n        .update(users)\n        .set({ requirePasswordReset: true, updatedAt: new Date() })\n        .where(eq(users.id, userId))\n        .returning();\n      return user || null;\n    } catch (error) {\n      console.error(\"Error flagging user for password reset:\", error);\n      return null;\n    }\n  }\n\n  async clearPasswordResetFlag(userId: string): Promise<void> {\n    try {\n      await db\n        .update(users)\n        .set({ requirePasswordReset: false, updatedAt: new Date() })\n        .where(eq(users.id, userId));\n    } catch (error) {\n      console.error(\"Error clearing password reset flag:\", error);\n    }\n  }\n\n  async flagUserForUsernameChange(userId: string): Promise<User | null> {\n    try {\n      const [user] = await db\n        .update(users)\n        .set({ requireUsernameChange: true, updatedAt: new Date() })\n        .where(eq(users.id, userId))\n        .returning();\n      return user || null;\n    } catch (error) {\n      console.error(\"Error flagging user for username change:\", error);\n      return null;\n    }\n  }\n\n  async clearUsernameChangeFlag(userId: string): Promise<void> {\n    try {\n      await db\n        .update(users)\n        .set({ requireUsernameChange: false, updatedAt: new Date() })\n        .where(eq(users.id, userId));\n    } catch (error) {\n      console.error(\"Error clearing username change flag:\", error);\n    }\n  }\n\n  // Messaging methods\n  async getConversations(userId: string): Promise<(Conversation & { otherUser: User; lastMessage?: Message; unreadCount: number })[]> {\n    const userConversations = await db\n      .select()\n      .from(conversations)\n      .where(or(eq(conversations.participant1Id, userId), eq(conversations.participant2Id, userId)))\n      .orderBy(desc(conversations.lastMessageAt));\n\n    const result = [];\n    for (const conversation of userConversations) {\n      const otherUserId = conversation.participant1Id === userId ? conversation.participant2Id : conversation.participant1Id;\n      const [otherUser] = await db.select().from(users).where(eq(users.id, otherUserId));\n      \n      const [lastMessage] = await db\n        .select()\n        .from(messages)\n        .where(eq(messages.conversationId, conversation.id))\n        .orderBy(desc(messages.createdAt))\n        .limit(1);\n\n      const [unreadResult] = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(messages)\n        .where(\n          and(\n            eq(messages.conversationId, conversation.id),\n            eq(messages.isRead, false),\n            eq(messages.senderId, otherUserId)\n          )\n        );\n\n      result.push({\n        ...conversation,\n        otherUser,\n        lastMessage: lastMessage || undefined,\n        unreadCount: unreadResult?.count || 0\n      });\n    }\n\n    return result;\n  }\n\n  async getConversation(conversationId: string, userId: string): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(conversations)\n      .where(\n        and(\n          eq(conversations.id, conversationId),\n          or(\n            eq(conversations.participant1Id, userId),\n            eq(conversations.participant2Id, userId)\n          )\n        )\n      );\n    return conversation || undefined;\n  }\n\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    // Check if conversation already exists between these participants\n    const [existing] = await db\n      .select()\n      .from(conversations)\n      .where(\n        or(\n          and(\n            eq(conversations.participant1Id, conversation.participant1Id),\n            eq(conversations.participant2Id, conversation.participant2Id)\n          ),\n          and(\n            eq(conversations.participant1Id, conversation.participant2Id),\n            eq(conversations.participant2Id, conversation.participant1Id)\n          )\n        )\n      );\n\n    if (existing) {\n      return existing;\n    }\n\n    const [newConversation] = await db\n      .insert(conversations)\n      .values({\n        ...conversation,\n        createdAt: new Date(),\n        lastMessageAt: new Date(),\n      })\n      .returning();\n    return newConversation;\n  }\n\n  async getMessages(conversationId: string, userId: string): Promise<Message[]> {\n    // Verify user is part of this conversation\n    const conversation = await this.getConversation(conversationId, userId);\n    if (!conversation) {\n      throw new Error(\"Conversation not found or access denied\");\n    }\n\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  async sendMessage(message: InsertMessage, senderId: string): Promise<Message> {\n    const [newMessage] = await db\n      .insert(messages)\n      .values({\n        ...message,\n        senderId,\n        createdAt: new Date(),\n        isRead: false,\n      })\n      .returning();\n\n    // Update conversation last message time\n    await db\n      .update(conversations)\n      .set({ lastMessageAt: new Date() })\n      .where(eq(conversations.id, message.conversationId));\n\n    return newMessage;\n  }\n\n  async markMessagesAsRead(conversationId: string, userId: string): Promise<void> {\n    await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(\n        and(\n          eq(messages.conversationId, conversationId),\n          eq(messages.isRead, false),\n          sql`${messages.senderId} != ${userId}`\n        )\n      );\n  }\n\n  async markConversationAsRead(conversationId: string, userId: string): Promise<void> {\n    await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(\n        and(\n          eq(messages.conversationId, conversationId),\n          eq(messages.isRead, false),\n          sql`${messages.senderId} != ${userId}`\n        )\n      );\n  }\n\n  async deleteConversations(conversationIds: string[], userId: string): Promise<void> {\n    // Verify user is part of all conversations\n    const userConversations = await db\n      .select({ id: conversations.id })\n      .from(conversations)\n      .where(\n        and(\n          inArray(conversations.id, conversationIds),\n          or(\n            eq(conversations.participant1Id, userId),\n            eq(conversations.participant2Id, userId)\n          )\n        )\n      );\n\n    const verifiedIds = userConversations.map(c => c.id);\n    \n    if (verifiedIds.length !== conversationIds.length) {\n      throw new Error(\"Cannot delete conversations that don't belong to user\");\n    }\n\n    // Delete messages first\n    await db\n      .delete(messages)\n      .where(inArray(messages.conversationId, verifiedIds));\n\n    // Then delete conversations\n    await db\n      .delete(conversations)\n      .where(inArray(conversations.id, verifiedIds));\n  }\n\n  async getUnreadMessageCount(userId: string): Promise<number> {\n    const userConversations = await db\n      .select({ id: conversations.id })\n      .from(conversations)\n      .where(or(eq(conversations.participant1Id, userId), eq(conversations.participant2Id, userId)));\n\n    if (userConversations.length === 0) return 0;\n\n    const conversationIds = userConversations.map(c => c.id);\n    const [result] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(messages)\n      .where(\n        and(\n          inArray(messages.conversationId, conversationIds),\n          eq(messages.isRead, false),\n          sql`${messages.senderId} != ${userId}`\n        )\n      );\n\n    return Number(result?.count) || 0;\n  }\n\n  // User preferences methods\n  async getUserPreferences(userId: string): Promise<UserPreferences | undefined> {\n    const [preferences] = await db\n      .select()\n      .from(userPreferences)\n      .where(eq(userPreferences.userId, userId));\n    \n    if (!preferences) {\n      // Create default preferences\n      const [newPreferences] = await db\n        .insert(userPreferences)\n        .values({\n          userId,\n          emailNotifications: true,\n          messageNotifications: true,\n          marketingEmails: false,\n          profileVisibility: \"public\",\n          showEmail: false,\n          showLocation: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .returning();\n      return newPreferences;\n    }\n    \n    return preferences;\n  }\n\n  async updateUserPreferences(userId: string, preferences: UpdateUserPreferences): Promise<UserPreferences> {\n    const [updatedPreferences] = await db\n      .update(userPreferences)\n      .set({\n        ...preferences,\n        updatedAt: new Date(),\n      })\n      .where(eq(userPreferences.userId, userId))\n      .returning();\n\n    if (!updatedPreferences) {\n      // Create if doesn't exist\n      const [newPreferences] = await db\n        .insert(userPreferences)\n        .values({\n          ...preferences,\n          userId,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .returning();\n      return newPreferences;\n    }\n\n    return updatedPreferences;\n  }\n\n  async updateUserProfile(userId: string, profile: UpdateUserProfile, hashedPassword?: string): Promise<User | undefined> {\n    const updateData: any = {\n      ...profile,\n      updatedAt: new Date(),\n    };\n\n    // Remove password fields from update data\n    delete updateData.currentPassword;\n    delete updateData.newPassword;\n    delete updateData.confirmPassword;\n\n    if (hashedPassword) {\n      updateData.password = hashedPassword;\n    }\n\n    const [updatedUser] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, userId))\n      .returning();\n\n    return updatedUser || undefined;\n  }\n\n  // Advertisement methods\n  async getAdvertisements(position?: string): Promise<Advertisement[]> {\n    try {\n      if (position) {\n        return await db.select().from(advertisements).where(\n          and(eq(advertisements.isActive, true), eq(advertisements.position, position))\n        );\n      }\n      \n      return await db.select().from(advertisements).where(eq(advertisements.isActive, true));\n    } catch (error) {\n      console.error(`Error fetching advertisements for position ${position}:`, error);\n      return [];\n    }\n  }\n\n  async createAdvertisement(ad: InsertAdvertisement): Promise<Advertisement> {\n    const [newAd] = await db\n      .insert(advertisements)\n      .values({\n        ...ad,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return newAd;\n  }\n\n  async updateAdvertisement(id: string, updates: Partial<Advertisement>): Promise<Advertisement | undefined> {\n    const [updatedAd] = await db\n      .update(advertisements)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(advertisements.id, id))\n      .returning();\n\n    return updatedAd || undefined;\n  }\n\n  async incrementAdImpressions(id: string): Promise<void> {\n    await db\n      .update(advertisements)\n      .set({\n        impressions: sql`${advertisements.impressions} + 1`,\n      })\n      .where(eq(advertisements.id, id));\n  }\n\n  async incrementAdClicks(id: string): Promise<void> {\n    await db\n      .update(advertisements)\n      .set({\n        clicks: sql`${advertisements.clicks} + 1`,\n      })\n      .where(eq(advertisements.id, id));\n  }\n\n  // Featured listing methods\n  async getFeaturedListings(): Promise<(FeaturedListing & { post: Post })[]> {\n    const results = await db\n      .select()\n      .from(featuredListings)\n      .leftJoin(posts, eq(featuredListings.postId, posts.id))\n      .where(eq(featuredListings.isActive, true));\n\n    return results.map(result => ({\n      ...result.featured_listings,\n      post: result.posts!\n    }));\n  }\n\n  async createFeaturedListing(listing: InsertFeaturedListing): Promise<FeaturedListing> {\n    const [newListing] = await db\n      .insert(featuredListings)\n      .values({\n        ...listing,\n        createdAt: new Date(),\n      })\n      .returning();\n    return newListing;\n  }\n\n  async getActiveFeaturedListings(): Promise<(FeaturedListing & { post: Post })[]> {\n    const results = await db\n      .select()\n      .from(featuredListings)\n      .leftJoin(posts, eq(featuredListings.postId, posts.id))\n      .where(\n        and(\n          eq(featuredListings.isActive, true),\n          sql`${featuredListings.featuredUntil} > NOW()`\n        )\n      );\n\n    return results.map(result => ({\n      ...result.featured_listings,\n      post: result.posts!\n    }));\n  }\n\n  // Password history methods\n  async addPasswordToHistory(userId: string, passwordHash: string): Promise<void> {\n    // Add new password to history\n    await db.insert(passwordHistory).values({\n      userId,\n      passwordHash,\n    });\n\n    // Keep only the last 4 passwords\n    const allPasswords = await db\n      .select()\n      .from(passwordHistory)\n      .where(eq(passwordHistory.userId, userId))\n      .orderBy(desc(passwordHistory.createdAt));\n\n    if (allPasswords.length > 4) {\n      const toDelete = allPasswords.slice(4);\n      await db\n        .delete(passwordHistory)\n        .where(inArray(passwordHistory.id, toDelete.map(p => p.id)));\n    }\n  }\n\n  async checkPasswordHistory(userId: string, newPassword: string): Promise<boolean> {\n    const recentPasswords = await db\n      .select({ passwordHash: passwordHistory.passwordHash })\n      .from(passwordHistory)\n      .where(eq(passwordHistory.userId, userId))\n      .orderBy(desc(passwordHistory.createdAt))\n      .limit(4);\n\n    // Check if new password matches any of the last 4 passwords\n    for (const record of recentPasswords) {\n      if (await verifyPassword(newPassword, record.passwordHash)) {\n        return false; // Password was used recently\n      }\n    }\n    \n    return true; // Password is new\n  }\n\n  async changeUserPassword(userId: string, currentPassword: string, newPassword: string): Promise<{ success: boolean; message: string }> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      return { success: false, message: \"User not found\" };\n    }\n\n    // Verify current password - handle both hashed and plain text passwords\n    let isCurrentPasswordValid = false;\n    if (user.password.startsWith('$2b$') || user.password.startsWith('$2a$')) {\n      // Hashed password - use bcrypt\n      isCurrentPasswordValid = await verifyPassword(currentPassword, user.password);\n    } else {\n      // Plain text password (legacy) - direct comparison\n      isCurrentPasswordValid = user.password === currentPassword;\n    }\n\n    if (!isCurrentPasswordValid) {\n      return { success: false, message: \"Current password is incorrect\" };\n    }\n\n    // Validate new password format\n    const passwordValidation = validatePassword(newPassword);\n    if (!passwordValidation.isValid) {\n      return { success: false, message: passwordValidation.errors.join(\", \") };\n    }\n\n    // Check password history\n    const isPasswordNew = await this.checkPasswordHistory(userId, newPassword);\n    if (!isPasswordNew) {\n      return { success: false, message: \"New password cannot be the same as any of your last 4 passwords\" };\n    }\n\n    // Update password\n    const newPasswordHash = await hashPassword(newPassword);\n    await db\n      .update(users)\n      .set({ \n        password: newPasswordHash,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n\n    // Add to password history\n    await this.addPasswordToHistory(userId, newPasswordHash);\n\n    return { success: true, message: \"Password changed successfully\" };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":56289},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/password-utils.ts":{"content":"export interface PasswordValidationResult {\n  isValid: boolean;\n  errors: string[];\n}\n\nexport function validatePassword(password: string): PasswordValidationResult {\n  const errors: string[] = [];\n\n  // Check minimum length\n  if (password.length < 10) {\n    errors.push(\"Password must be at least 10 characters long\");\n  }\n\n  // Check for lowercase letter\n  if (!/[a-z]/.test(password)) {\n    errors.push(\"Password must contain at least one lowercase letter\");\n  }\n\n  // Check for uppercase letter\n  if (!/[A-Z]/.test(password)) {\n    errors.push(\"Password must contain at least one uppercase letter\");\n  }\n\n  // Check for number\n  if (!/\\d/.test(password)) {\n    errors.push(\"Password must contain at least one number\");\n  }\n\n  // Check for special character\n  if (!/[@$!%*?&]/.test(password)) {\n    errors.push(\"Password must contain at least one special character (@$!%*?&)\");\n  }\n\n  // Check for only alphanumeric and allowed special characters\n  if (!/^[A-Za-z\\d@$!%*?&]+$/.test(password)) {\n    errors.push(\"Password can only contain letters, numbers, and these special characters: @$!%*?&\");\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n// Server-side only functions - import bcrypt dynamically\nexport async function hashPassword(password: string): Promise<string> {\n  const bcrypt = await import('bcrypt');\n  return bcrypt.default.hash(password, 12);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  const bcrypt = await import('bcrypt');\n  return bcrypt.default.compare(password, hash);\n}\n\nexport function getPasswordRequirements(): string[] {\n  return [\n    \"At least 10 characters long\",\n    \"Contains at least one lowercase letter (a-z)\",\n    \"Contains at least one uppercase letter (A-Z)\",\n    \"Contains at least one number (0-9)\",\n    \"Contains at least one special character (@$!%*?&)\",\n    \"Only contains letters, numbers, and allowed special characters\"\n  ];\n}","size_bytes":1946},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  dateOfBirth: timestamp(\"date_of_birth\").notNull(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  location: text(\"location\"),\n  bio: text(\"bio\"),\n  profilePicture: text(\"profile_picture\"), // URL to profile picture in object storage\n  isVerified: boolean(\"is_verified\").default(false),\n  isAdmin: boolean(\"is_admin\").default(false),\n  isModerator: boolean(\"is_moderator\").default(false),\n  isSuspended: boolean(\"is_suspended\").default(false),\n  requirePasswordReset: boolean(\"require_password_reset\").default(false),\n  requireUsernameChange: boolean(\"require_username_change\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  type: text(\"type\").notNull(), // 'wts', 'wtb', 'wtt', 'discussion'\n  description: text(\"description\"),\n  icon: text(\"icon\"),\n});\n\nexport const posts = pgTable(\"posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  authorId: varchar(\"author_id\").notNull(),\n  categoryId: varchar(\"category_id\").notNull(),\n  price: integer(\"price\"), // in cents, for WTS posts\n  location: text(\"location\"),\n  contactInfo: text(\"contact_info\"),\n  images: json(\"images\").$type<string[]>().default([]), // Array of image URLs (max 5)\n  isActive: boolean(\"is_active\").default(true),\n  views: integer(\"views\").default(0),\n  isPinned: boolean(\"is_pinned\").default(false),\n  pinnedAt: timestamp(\"pinned_at\"),\n  willingToTravel: boolean(\"willing_to_travel\").default(false),\n  willingToShip: boolean(\"willing_to_ship\").default(false),\n  willingToTrade: boolean(\"willing_to_trade\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n  bumpedAt: timestamp(\"bumped_at\").default(sql`now()`), // Track when post was last bumped for sorting\n});\n\nexport const replies = pgTable(\"replies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  content: text(\"content\").notNull(),\n  authorId: varchar(\"author_id\").notNull(),\n  postId: varchar(\"post_id\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  participant1Id: varchar(\"participant1_id\").notNull(),\n  participant2Id: varchar(\"participant2_id\").notNull(),\n  postId: varchar(\"post_id\"), // Optional: link to the post that started the conversation\n  lastMessageAt: timestamp(\"last_message_at\").default(sql`now()`),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull(),\n  senderId: varchar(\"sender_id\").notNull(),\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const advertisements = pgTable(\"advertisements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\"),\n  targetUrl: text(\"target_url\").notNull(),\n  sponsor: text(\"sponsor\").notNull(),\n  sponsorEmail: text(\"sponsor_email\").notNull(),\n  position: text(\"position\").notNull(), // 'header', 'sidebar', 'footer', 'in-feed'\n  size: text(\"size\").default(\"medium\"), // 'small', 'medium', 'large'\n  isActive: boolean(\"is_active\").default(true),\n  impressions: integer(\"impressions\").default(0),\n  clicks: integer(\"clicks\").default(0),\n  startDate: timestamp(\"start_date\").default(sql`now()`),\n  endDate: timestamp(\"end_date\"),\n  monthlyRate: integer(\"monthly_rate\"), // in cents\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const featuredListings = pgTable(\"featured_listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").notNull(),\n  sponsorId: varchar(\"sponsor_id\").notNull(),\n  featuredUntil: timestamp(\"featured_until\").notNull(),\n  dailyRate: integer(\"daily_rate\").notNull(), // in cents\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique(),\n  emailNotifications: boolean(\"email_notifications\").default(true),\n  messageNotifications: boolean(\"message_notifications\").default(true),\n  marketingEmails: boolean(\"marketing_emails\").default(false),\n  profileVisibility: varchar(\"profile_visibility\").default(\"public\"), // \"public\", \"registered\", \"private\"\n  showEmail: boolean(\"show_email\").default(false),\n  showLocation: boolean(\"show_location\").default(true),\n  theme: varchar(\"theme\").default(\"system\"), // \"light\", \"dark\", \"system\"\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\n// Password history table to track last 4 passwords\nexport const passwordHistory = pgTable(\"password_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  passwordHash: text(\"password_hash\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n// Password history types\nexport type PasswordHistory = typeof passwordHistory.$inferSelect;\nexport type InsertPasswordHistory = typeof passwordHistory.$inferInsert;\n\n// Password validation function\nconst passwordValidation = z.string()\n  .min(10, \"Password must be at least 10 characters long\")\n  .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, \n    \"Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character (@$!%*?&)\");\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  isVerified: true,\n  isAdmin: true,\n  isSuspended: true,\n}).extend({\n  username: z.string()\n    .min(3, \"Username must be at least 3 characters long\")\n    .max(20, \"Username cannot exceed 20 characters\")\n    .regex(/^[a-zA-Z0-9_-]+$/, \"Username can only contain letters, numbers, underscores, and hyphens (no spaces)\"),\n  firstName: z.string().min(1, \"First name is required\").max(50, \"First name cannot exceed 50 characters\"),\n  lastName: z.string().min(1, \"Last name is required\").max(50, \"Last name cannot exceed 50 characters\"),\n  password: passwordValidation,\n  dateOfBirth: z.string().refine((date) => {\n    const birthDate = new Date(date);\n    const today = new Date();\n    const age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n      return age - 1 >= 18;\n    }\n    return age >= 18;\n  }, \"You must be at least 18 years old to register\"),\n});\n\n// Password change schema with validation\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: passwordValidation,\n  confirmPassword: z.string(),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"New password and confirmation must match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const insertPostSchema = createInsertSchema(posts).omit({\n  id: true,\n  authorId: true,\n  createdAt: true,\n  updatedAt: true,\n  views: true,\n  bumpedAt: true,\n}).extend({\n  images: z.array(z.string()).max(5, \"Maximum 5 images allowed\").optional(),\n  willingToTravel: z.boolean().optional(),\n  willingToShip: z.boolean().optional(),\n  willingToTrade: z.boolean().optional(),\n});\n\nexport const insertReplySchema = createInsertSchema(replies).omit({\n  id: true,\n  authorId: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  senderId: true,\n  createdAt: true,\n  isRead: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  lastMessageAt: true,\n});\n\nexport const updateUserPreferencesSchema = createInsertSchema(userPreferences).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateUserProfileSchema = createInsertSchema(users).omit({\n  id: true,\n  password: true,\n  createdAt: true,\n  isVerified: true,\n  isAdmin: true,\n  isSuspended: true,\n}).partial().extend({\n  currentPassword: z.string().optional(),\n  newPassword: z.string().optional().refine((val) => {\n    if (val && val.trim().length > 0 && val.trim().length < 6) {\n      return false;\n    }\n    return true;\n  }, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().optional(),\n}).refine(\n  (data) => {\n    // Only validate if password fields have content\n    if (data.newPassword && data.newPassword.trim().length > 0) {\n      if (!data.currentPassword || data.currentPassword.trim().length === 0) {\n        return false;\n      }\n      if (data.newPassword !== data.confirmPassword) {\n        return false;\n      }\n    }\n    return true;\n  },\n  {\n    message: \"Password confirmation doesn't match or current password is required\",\n    path: [\"confirmPassword\"],\n  }\n);\n\nexport const updatePostSchema = createInsertSchema(posts).omit({\n  id: true,\n  authorId: true,\n  createdAt: true,\n  views: true,\n  bumpedAt: true,\n  isPinned: true,\n  pinnedAt: true,\n}).partial().extend({\n  images: z.array(z.string()).max(5, \"Maximum 5 images allowed\").optional(),\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  rememberUsername: z.boolean().optional(),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertPost = z.infer<typeof insertPostSchema>;\nexport type Post = typeof posts.$inferSelect;\nexport type Category = typeof categories.$inferSelect;\nexport type Reply = typeof replies.$inferSelect;\nexport type InsertReply = z.infer<typeof insertReplySchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type UserPreferences = typeof userPreferences.$inferSelect;\nexport type UpdateUserPreferences = z.infer<typeof updateUserPreferencesSchema>;\nexport type UpdateUserProfile = z.infer<typeof updateUserProfileSchema>;\nexport type UpdatePost = z.infer<typeof updatePostSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\n\nexport type Advertisement = typeof advertisements.$inferSelect;\nexport type InsertAdvertisement = typeof advertisements.$inferInsert;\nexport type FeaturedListing = typeof featuredListings.$inferSelect;\nexport type InsertFeaturedListing = typeof featuredListings.$inferInsert;\n","size_bytes":11800},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme/theme-provider\";\nimport Home from \"@/pages/home\";\nimport CategoryPage from \"@/pages/category\";\nimport PostDetail from \"@/pages/post-detail\";\nimport CreatePost from \"@/pages/create-post\";\nimport EditPost from \"@/pages/edit-post\";\nimport AuthPage from \"@/pages/auth\";\nimport TermsPage from \"@/pages/terms\";\nimport PrivacyPage from \"@/pages/privacy\";\nimport GuidelinesPage from \"@/pages/guidelines\";\nimport ContactPage from \"@/pages/contact\";\nimport SafetyPage from \"@/pages/safety\";\nimport ReportPage from \"@/pages/report\";\nimport AdminDashboard from \"@/pages/admin\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport MessagesPage from \"@/pages/messages\";\nimport ProfilePage from \"@/pages/profile\";\nimport PublicProfile from \"@/pages/public-profile\";\nimport AdvertisePage from \"@/pages/advertise\";\nimport SearchPage from \"@/pages/search\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/category/:slug\" component={CategoryPage} />\n      <Route path=\"/posts/:id\" component={PostDetail} />\n      <Route path=\"/posts/:id/edit\" component={EditPost} />\n      <Route path=\"/create-post\" component={CreatePost} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/terms\" component={TermsPage} />\n      <Route path=\"/privacy\" component={PrivacyPage} />\n      <Route path=\"/guidelines\" component={GuidelinesPage} />\n      <Route path=\"/contact\" component={ContactPage} />\n      <Route path=\"/safety\" component={SafetyPage} />\n      <Route path=\"/report\" component={ReportPage} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/admin-login\" component={AdminLogin} />\n      <Route path=\"/messages\" component={MessagesPage} />\n      <Route path=\"/profile\" component={ProfilePage} />\n      <Route path=\"/user/:id\" component={PublicProfile} />\n      <Route path=\"/advertise\" component={AdvertisePage} />\n      <Route path=\"/search\" component={SearchPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider defaultTheme=\"system\" storageKey=\"ca-gun-exchange-theme\">\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2693},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(209, 25%, 8%);\n  --card: hsl(210, 11%, 98%);\n  --card-foreground: hsl(209, 25%, 8%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(209, 25%, 8%);\n  --primary: hsl(209, 61%, 16%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210, 25%, 25%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210, 14%, 97%);\n  --muted-foreground: hsl(210, 25%, 8%);\n  --accent: hsl(160, 84%, 39%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0, 73%, 41%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(160, 84%, 39%);\n  --chart-1: hsl(160, 84%, 39%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(210, 11%, 98%);\n  --sidebar-foreground: hsl(209, 25%, 8%);\n  --sidebar-primary: hsl(160, 84%, 39%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210, 14%, 97%);\n  --sidebar-accent-foreground: hsl(160, 84%, 39%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(160, 84%, 39%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(160, 84%, 39%);\n  --primary-foreground: hsl(222, 84%, 4%);\n  --secondary: hsl(217, 33%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(160, 84%, 39%);\n  --accent-foreground: hsl(222, 84%, 4%);\n  --destructive: hsl(0, 62%, 50%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --ring: hsl(160, 84%, 39%);\n  --sidebar: hsl(222, 84%, 4%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(160, 84%, 39%);\n  --sidebar-primary-foreground: hsl(222, 84%, 4%);\n  --sidebar-accent: hsl(217, 33%, 17%);\n  --sidebar-accent-foreground: hsl(160, 84%, 39%);\n  --sidebar-border: hsl(217, 33%, 17%);\n  --sidebar-ring: hsl(160, 84%, 39%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gray-50 dark:bg-gray-950 text-foreground transition-colors;\n  }\n}\n\n.forum-primary {\n  @apply text-primary;\n}\n\n.forum-secondary {\n  @apply text-secondary;\n}\n\n.forum-accent {\n  @apply text-accent;\n}\n\n.forum-warning {\n  @apply text-destructive;\n}\n","size_bytes":2851},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ObjectUploader.tsx":{"content":"import { useState, useRef } from \"react\";\nimport type { ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (result: { successful: Array<{ uploadURL: string; name: string }>, failed: Array<any> }) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (files.length === 0) return;\n\n    console.log('Selected files:', files.map(f => f.name));\n    \n    // Validate file count\n    if (files.length > maxNumberOfFiles) {\n      toast({\n        title: \"Too Many Files\",\n        description: `Maximum ${maxNumberOfFiles} files allowed`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file sizes and types\n    const invalidFiles = files.filter(file => \n      file.size > maxFileSize || !file.type.startsWith('image/')\n    );\n    \n    if (invalidFiles.length > 0) {\n      toast({\n        title: \"Invalid Files\",\n        description: `Files must be images under ${Math.round(maxFileSize / 1024 / 1024)}MB`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    const successful: Array<{ uploadURL: string; name: string }> = [];\n    const failed: Array<any> = [];\n\n    for (const file of files) {\n      try {\n        console.log('Getting upload parameters for:', file.name);\n        const params = await onGetUploadParameters();\n        console.log('Got upload URL for', file.name, ':', params.url.substring(0, 100) + '...');\n\n        console.log('Starting upload for:', file.name);\n        const response = await fetch(params.url, {\n          method: params.method,\n          body: file,\n          headers: {\n            'Content-Type': file.type,\n          },\n        });\n\n        if (response.ok) {\n          const uploadURL = params.url.split('?')[0]; // Remove query parameters\n          // Convert to the local serving URL\n          const objectPath = uploadURL.replace(/^.*\\/public\\//, '/public-objects/');\n          console.log('Upload successful for:', file.name, 'Original URL:', uploadURL, 'Served as:', objectPath);\n          successful.push({ uploadURL: objectPath, name: file.name });\n        } else {\n          console.error('Upload failed for:', file.name, 'Status:', response.status);\n          failed.push({ name: file.name, error: `HTTP ${response.status}` });\n        }\n      } catch (error) {\n        console.error('Upload error for:', file.name, error);\n        failed.push({ name: file.name, error: (error as Error).message || 'Upload failed' });\n      }\n    }\n\n    setIsUploading(false);\n    console.log('Upload complete. Successful:', successful.length, 'Failed:', failed.length);\n    \n    if (onComplete) {\n      onComplete({ successful, failed });\n    }\n\n    // Clear the input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <div>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        multiple={maxNumberOfFiles > 1}\n        onChange={handleFileSelect}\n        style={{ display: 'none' }}\n      />\n      <Button \n        type=\"button\"\n        onClick={() => fileInputRef.current?.click()} \n        className={buttonClassName}\n        disabled={isUploading}\n      >\n        {isUploading ? 'Uploading...' : children}\n      </Button>\n    </div>\n  );\n}","size_bytes":5217},"client/src/components/ProfilePictureUploader.tsx":{"content":"import { useState } from \"react\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Camera, User } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { UploadResult } from \"@uppy/core\";\n\ninterface ProfilePictureUploaderProps {\n  currentProfilePicture?: string;\n  userInitials: string;\n  userId: string;\n  className?: string;\n}\n\nexport function ProfilePictureUploader({\n  currentProfilePicture,\n  userInitials,\n  userId,\n  className = \"\"\n}: ProfilePictureUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const { toast } = useToast();\n\n  const updateProfilePictureMutation = useMutation({\n    mutationFn: async (profilePictureURL: string) => {\n      const response = await fetch(\"/api/profile-picture\", {\n        method: \"PUT\",\n        body: JSON.stringify({ profilePictureURL }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-user-id\": userId,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update profile picture\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Profile picture updated successfully\",\n      });\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/profile\"] });\n      setIsUploading(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile picture\",\n        variant: \"destructive\",\n      });\n      setIsUploading(false);\n    },\n  });\n\n  const handleGetUploadParameters = async () => {\n    const response = await fetch(\"/api/profile-picture/upload\", {\n      method: \"POST\",\n      headers: {\n        \"x-user-id\": userId,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to get upload URL\");\n    }\n\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const uploadURL = uploadedFile.uploadURL;\n      \n      if (uploadURL) {\n        setIsUploading(true);\n        updateProfilePictureMutation.mutate(uploadURL);\n      }\n    }\n  };\n\n  return (\n    <div className={`flex flex-col items-center space-y-4 ${className}`}>\n      <div className=\"relative\">\n        <Avatar className=\"w-32 h-32\">\n          <AvatarImage \n            src={currentProfilePicture} \n            alt=\"Profile picture\"\n          />\n          <AvatarFallback className=\"text-2xl bg-gray-200 dark:bg-gray-700\">\n            {userInitials}\n          </AvatarFallback>\n        </Avatar>\n        \n        <div className=\"absolute bottom-0 right-0\">\n          <ObjectUploader\n            maxNumberOfFiles={1}\n            maxFileSize={5242880} // 5MB limit for profile pictures\n            onGetUploadParameters={handleGetUploadParameters}\n            onComplete={handleComplete}\n            buttonClassName=\"rounded-full p-2 bg-blue-600 hover:bg-blue-700 text-white shadow-lg\"\n          >\n            <Camera className=\"w-4 h-4\" />\n          </ObjectUploader>\n        </div>\n      </div>\n      \n      <div className=\"text-center\">\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          Click the camera icon to upload a new profile picture\n        </p>\n        <p className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">\n          Max size: 5MB. Supported formats: JPG, PNG\n        </p>\n      </div>\n      \n      {isUploading && (\n        <p className=\"text-sm text-blue-600 dark:text-blue-400\">\n          Uploading profile picture...\n        </p>\n      )}\n    </div>\n  );\n}","size_bytes":4150},"client/src/components/legal-banner.tsx":{"content":"import { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle } from \"lucide-react\";\n\nexport function LegalBanner() {\n  return (\n    <Alert className=\"border-orange-200 dark:border-orange-800 bg-orange-50 dark:bg-orange-950/30 rounded-none border-l-0 border-r-0 border-t-0\">\n      <AlertTriangle className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n      <AlertDescription className=\"font-medium text-orange-800 dark:text-orange-200\">\n        <strong>⚠️ Notice:</strong> CA Gun Exchange does not sell firearms. All firearm transfers must be completed in person through a licensed California FFL in accordance with federal, state, and local laws.\n      </AlertDescription>\n    </Alert>\n  );\n}","size_bytes":728},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/activity-tracker.ts":{"content":"// Activity tracker for session management\nimport { AdminSession } from './session';\n\nexport class ActivityTracker {\n  private static instance: ActivityTracker;\n  private isTrackingUser = false;\n  private isTrackingAdmin = false;\n\n  static getInstance(): ActivityTracker {\n    if (!ActivityTracker.instance) {\n      ActivityTracker.instance = new ActivityTracker();\n    }\n    return ActivityTracker.instance;\n  }\n\n  private updateUserActivity = () => {\n    // Simply update the activity timestamp - authentication is handled by React Query now\n    sessionStorage.setItem('last-activity', Date.now().toString());\n  };\n\n  private updateAdminActivity = () => {\n    const adminUser = AdminSession.getUser();\n    if (adminUser) {\n      sessionStorage.setItem(\"adminLastActivity\", Date.now().toString());\n    }\n  };\n\n  startTrackingUser() {\n    if (this.isTrackingUser) return;\n    \n    this.isTrackingUser = true;\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    events.forEach(event => {\n      document.addEventListener(event, this.updateUserActivity, { passive: true });\n    });\n  }\n\n  startTrackingAdmin() {\n    if (this.isTrackingAdmin) return;\n    \n    this.isTrackingAdmin = true;\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    events.forEach(event => {\n      document.addEventListener(event, this.updateAdminActivity, { passive: true });\n    });\n  }\n\n  stopTrackingUser() {\n    if (!this.isTrackingUser) return;\n    \n    this.isTrackingUser = false;\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    events.forEach(event => {\n      document.removeEventListener(event, this.updateUserActivity);\n    });\n  }\n\n  stopTrackingAdmin() {\n    if (!this.isTrackingAdmin) return;\n    \n    this.isTrackingAdmin = false;\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    events.forEach(event => {\n      document.removeEventListener(event, this.updateAdminActivity);\n    });\n  }\n\n  stopAllTracking() {\n    this.stopTrackingUser();\n    this.stopTrackingAdmin();\n  }\n}\n\n// Hook for user activity tracking\nexport const useActivityTracker = () => {\n  const tracker = ActivityTracker.getInstance();\n  \n  return {\n    startTrackingUser: () => tracker.startTrackingUser(),\n    startTrackingAdmin: () => tracker.startTrackingAdmin(),\n    stopTrackingUser: () => tracker.stopTrackingUser(),\n    stopTrackingAdmin: () => tracker.stopTrackingAdmin(),\n    stopAllTracking: () => tracker.stopAllTracking(),\n  };\n};","size_bytes":2598},"client/src/lib/auth.ts":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport type { User } from '@shared/schema';\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    staleTime: 30 * 60 * 1000, // 30 minutes - much longer cache\n    gcTime: 60 * 60 * 1000, // 1 hour \n    refetchOnWindowFocus: false, // Don't refetch when window gains focus\n    refetchOnMount: false, // Don't refetch on every component mount\n    queryFn: async () => {\n      const res = await fetch(\"/api/auth/user\", {\n        credentials: \"include\",\n      });\n      \n      if (res.status === 401) {\n        return null;\n      }\n      \n      if (!res.ok) {\n        throw new Error(`${res.status}: ${await res.text()}`);\n      }\n      \n      return res.json();\n    }\n  });\n\n  const logout = async () => {\n    try {\n      await apiRequest(\"/api/auth/logout\", { method: \"POST\" });\n      // Clear all queries to reset authentication state\n      queryClient.clear();\n      // Force page reload to clear any remaining state\n      window.location.reload();\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      // Even if logout fails on server, clear client state\n      queryClient.clear();\n      window.location.reload();\n    }\n  };\n\n  // Remove excessive logging\n\n  return {\n    user: user || null,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n    logout\n  };\n}\n","size_bytes":1488},"client/src/lib/moderator.ts":{"content":"import type { User } from \"@shared/schema\";\n\nexport function isModerator(user: User | null | undefined): boolean {\n  if (!user) return false;\n  return user.isAdmin === true || user.isModerator === true; // Both admins and moderators have moderator privileges\n}\n\nexport function canDeletePost(user: User | null | undefined, postAuthorId?: string): boolean {\n  if (!user) return false;\n  return user.isAdmin === true || user.isModerator === true || user.id === postAuthorId;\n}\n\nexport function canSuspendUser(user: User | null | undefined): boolean {\n  if (!user) return false;\n  return user.isAdmin === true || user.isModerator === true;\n}\n\nexport function canPinPost(user: User | null | undefined): boolean {\n  if (!user) return false;\n  return user.isAdmin === true || user.isModerator === true;\n}","size_bytes":798},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options: {\n    method?: string;\n    body?: unknown;\n    headers?: Record<string, string>;\n  } = {}\n): Promise<any> {\n  const { method = \"GET\", body, headers = {} } = options;\n  \n  // Get current user from session via auth API\n  let currentUser = null;\n  try {\n    const authResponse = await fetch(\"/api/auth/user\", {\n      credentials: \"include\",\n    });\n    if (authResponse.ok) {\n      currentUser = await authResponse.json();\n    }\n  } catch (error) {\n    // Ignore auth errors for now\n  }\n  \n  const requestHeaders: Record<string, string> = {\n    ...headers,\n  };\n  \n  if (body) {\n    requestHeaders[\"Content-Type\"] = \"application/json\";\n  }\n  \n  // Always include the x-user-id header if available from either source\n  if (currentUser?.id) {\n    requestHeaders[\"x-user-id\"] = currentUser.id;\n  } else if (headers[\"x-user-id\"]) {\n    requestHeaders[\"x-user-id\"] = headers[\"x-user-id\"];\n  }\n  \n  console.log(\"🔍 API REQUEST - Headers being sent:\", requestHeaders);\n\n  const res = await fetch(url, {\n    method,\n    headers: requestHeaders,\n    body: body ? JSON.stringify(body) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey, meta }) => {\n    // Get current user from session via auth API\n    let currentUser = null;\n    try {\n      const authResponse = await fetch(\"/api/auth/user\", {\n        credentials: \"include\",\n      });\n      if (authResponse.ok) {\n        currentUser = await authResponse.json();\n      }\n    } catch (error) {\n      // Ignore auth errors for queries\n    }\n    \n    const headers: Record<string, string> = {\n      ...((meta as any)?.headers || {}),\n    };\n    \n    if (currentUser?.id) {\n      headers[\"x-user-id\"] = currentUser.id;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2809},"client/src/lib/session.ts":{"content":"// Session management utilities for admin authentication\nexport const AdminSession = {\n  setUser: (user: any) => {\n    sessionStorage.setItem(\"currentUser\", JSON.stringify(user));\n    sessionStorage.setItem(\"adminLastActivity\", Date.now().toString());\n  },\n\n  getUser: () => {\n    // Check session storage for admin user\n    const sessionUser = sessionStorage.getItem(\"currentUser\");\n    if (sessionUser) {\n      const lastActivity = sessionStorage.getItem(\"adminLastActivity\");\n      if (lastActivity && Date.now() - parseInt(lastActivity) < 60 * 60 * 1000) { // 1 hour inactivity\n        // Update last activity\n        sessionStorage.setItem(\"adminLastActivity\", Date.now().toString());\n        return JSON.parse(sessionUser);\n      } else {\n        // Session expired due to inactivity\n        AdminSession.clearUser();\n        return null;\n      }\n    }\n\n    return null;\n  },\n\n  clearUser: () => {\n    sessionStorage.removeItem(\"currentUser\");\n    sessionStorage.removeItem(\"adminLastActivity\");\n  },\n\n  isLoggedIn: () => {\n    return AdminSession.getUser() !== null;\n  }\n};","size_bytes":1080},"client/src/lib/username-storage.ts":{"content":"// Username storage utilities for remembering usernames\nconst USERNAME_STORAGE_KEY = 'remembered-usernames';\nconst ADMIN_USERNAME_KEY = 'remembered-admin-username';\n\nexport interface RememberedUsername {\n  username: string;\n  lastUsed: number;\n}\n\nexport const UsernameStorage = {\n  // Regular user username storage\n  saveUsername: (username: string) => {\n    try {\n      const existing = UsernameStorage.getSavedUsernames();\n      const updated = existing.filter(u => u.username !== username);\n      updated.unshift({ username, lastUsed: Date.now() });\n      \n      // Keep only the last 5 usernames\n      const limited = updated.slice(0, 5);\n      localStorage.setItem(USERNAME_STORAGE_KEY, JSON.stringify(limited));\n    } catch (error) {\n      console.warn('Failed to save username:', error);\n    }\n  },\n\n  getSavedUsernames: (): RememberedUsername[] => {\n    try {\n      const stored = localStorage.getItem(USERNAME_STORAGE_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.warn('Failed to load saved usernames:', error);\n      return [];\n    }\n  },\n\n  getMostRecentUsername: (): string => {\n    const usernames = UsernameStorage.getSavedUsernames();\n    return usernames.length > 0 ? usernames[0].username : '';\n  },\n\n  removeUsername: (username: string) => {\n    try {\n      const existing = UsernameStorage.getSavedUsernames();\n      const filtered = existing.filter(u => u.username !== username);\n      localStorage.setItem(USERNAME_STORAGE_KEY, JSON.stringify(filtered));\n    } catch (error) {\n      console.warn('Failed to remove username:', error);\n    }\n  },\n\n  // Admin username storage\n  saveAdminUsername: (username: string) => {\n    try {\n      localStorage.setItem(ADMIN_USERNAME_KEY, username);\n    } catch (error) {\n      console.warn('Failed to save admin username:', error);\n    }\n  },\n\n  getSavedAdminUsername: (): string => {\n    try {\n      return localStorage.getItem(ADMIN_USERNAME_KEY) || '';\n    } catch (error) {\n      console.warn('Failed to load saved admin username:', error);\n      return '';\n    }\n  },\n\n  clearAdminUsername: () => {\n    try {\n      localStorage.removeItem(ADMIN_USERNAME_KEY);\n    } catch (error) {\n      console.warn('Failed to clear admin username:', error);\n    }\n  },\n\n  // Clear all stored usernames\n  clearAll: () => {\n    try {\n      localStorage.removeItem(USERNAME_STORAGE_KEY);\n      localStorage.removeItem(ADMIN_USERNAME_KEY);\n    } catch (error) {\n      console.warn('Failed to clear username storage:', error);\n    }\n  }\n};","size_bytes":2527},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nimport { Shield, Lock, Eye, EyeOff, ChevronDown } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { AdminSession } from \"@/lib/session\";\nimport { useActivityTracker } from \"@/lib/activity-tracker\";\nimport { UsernameStorage } from \"@/lib/username-storage\";\n\nexport default function AdminLogin() {\n  const [username, setUsername] = useState(UsernameStorage.getSavedAdminUsername());\n  const [password, setPassword] = useState(\"\");\n  const [rememberUsername, setRememberUsername] = useState(true);\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n  const { startTrackingAdmin } = useActivityTracker();\n  const [, navigate] = useLocation();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      return await apiRequest(\"/api/admin/login\", {\n        method: \"POST\",\n        body: credentials,\n      });\n    },\n    onSuccess: (data: any) => {\n      // Save admin username if remember username is checked\n      if (rememberUsername && username) {\n        UsernameStorage.saveAdminUsername(username);\n      }\n      \n      AdminSession.setUser(data.user);\n      \n      // Start activity tracking for all sessions\n      startTrackingAdmin();\n      \n      toast({ \n        title: \"Admin Login Successful\",\n        description: \"Welcome to the admin dashboard!\"\n      });\n      navigate(\"/admin\");\n    },\n    onError: () => {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid admin credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (username && password) {\n      loginMutation.mutate({ username, password });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      <Card className=\"w-full max-w-md shadow-lg\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 bg-primary/10 rounded-full\">\n              <Shield className=\"h-8 w-8 text-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Admin Portal</CardTitle>\n          <CardDescription>\n            Secure access for CA Gun Exchange administrators\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Admin Username</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter admin username\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className={`pl-9 ${UsernameStorage.getSavedAdminUsername() ? \"pr-10\" : \"\"}`}\n                  required\n                  data-testid=\"input-admin-username\"\n                />\n                {UsernameStorage.getSavedAdminUsername() && (\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-1 top-1 h-7 w-7 p-0\"\n                    onClick={() => {\n                      setUsername(UsernameStorage.getSavedAdminUsername());\n                    }}\n                    data-testid=\"button-admin-username-fill\"\n                  >\n                    <ChevronDown className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Admin Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter admin password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-9 pr-9\"\n                  required\n                  data-testid=\"input-admin-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-1 top-1 h-7 w-7 p-0\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                  tabIndex={-1}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Checkbox \n                id=\"rememberAdminUsername\" \n                checked={rememberUsername}\n                onCheckedChange={(checked) => setRememberUsername(!!checked)}\n                data-testid=\"checkbox-remember-admin-username\"\n              />\n              <Label \n                htmlFor=\"rememberAdminUsername\" \n                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n              >\n                Remember my username\n              </Label>\n            </div>\n            \n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-admin-login\"\n            >\n              {loginMutation.isPending ? \"Signing In...\" : \"Sign In to Admin Portal\"}\n            </Button>\n          </form>\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              This portal is restricted to authorized administrators only.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6838},"client/src/pages/admin.tsx":{"content":"import React, { useState, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Shield, Users, FileText, Ban, UserCheck, Trash2, DollarSign, Eye, MousePointer, Key, Home, Search, Edit, RotateCcw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { AdminSession } from \"@/lib/session\";\nimport type { User, Post, Advertisement } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [currentUser] = useState<User | null>(AdminSession.getUser());\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Always call hooks before any early returns\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    enabled: !!currentUser?.isAdmin, // Only fetch if user is admin\n  });\n\n  const { data: posts = [], isLoading: postsLoading } = useQuery<Post[]>({\n    queryKey: [\"/api/posts\"],\n    enabled: !!currentUser?.isAdmin,\n  });\n\n  const { data: advertisements = [], isLoading: advertisementsLoading } = useQuery<Advertisement[]>({\n    queryKey: [\"/api/advertisements\"],\n    enabled: !!currentUser?.isAdmin,\n  });\n\n  const suspendUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(`/api/admin/users/${userId}/suspend`, { method: \"POST\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"User status updated successfully\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(`/api/admin/users/${userId}`, { method: \"DELETE\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"User deleted successfully\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePostMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      return apiRequest(`/api/admin/posts/${postId}`, { method: \"DELETE\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      toast({ title: \"Post deleted successfully\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const makeAdminMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(`/api/admin/users/${userId}/make-admin`, { method: \"POST\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"User promoted to admin successfully\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to promote user to admin\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleModeratorMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(`/api/admin/users/${userId}/toggle-moderator`, { method: \"POST\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"Moderator status updated successfully\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update moderator status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const flagUsernameChangeMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(`/api/admin/users/${userId}/flag-username-change`, { \n        method: \"PUT\"\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ \n        title: \"User flagged for username change\", \n        description: \"The user will be required to change their username on next login\" \n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to flag user for username change\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const togglePasswordResetMutation = useMutation({\n    mutationFn: async ({ userId, requireReset }: { userId: string; requireReset: boolean }) => {\n      const endpoint = requireReset \n        ? `/api/admin/flag-password-reset/${userId}`\n        : `/api/admin/clear-password-reset/${userId}`;\n      return apiRequest(endpoint, { method: \"POST\" });\n    },\n    onSuccess: (_, { requireReset }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ \n        title: requireReset ? \"Password Reset Flagged\" : \"Password Reset Flag Cleared\",\n        description: requireReset \n          ? \"User will be required to update their password on next login\"\n          : \"User is no longer flagged for password reset\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update password reset flag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const togglePinMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      // Get the current post state before toggling\n      const currentPosts = queryClient.getQueryData([\"/api/posts\"]) as any[];\n      const currentPost = currentPosts?.find(p => p.id === postId);\n      const wasAlreadyPinned = currentPost?.isPinned || false;\n      \n      const response = await fetch(`/api/posts/${postId}/pin`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to toggle pin status\");\n      }\n      \n      const updatedPost = await response.json();\n      return { updatedPost, wasAlreadyPinned };\n    },\n    onSuccess: ({ updatedPost, wasAlreadyPinned }) => {\n      // Invalidate all relevant caches\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts/category\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts/user\"] });\n      toast({ \n        title: wasAlreadyPinned ? \"Post unpinned successfully\" : \"Post pinned successfully\"\n      });\n    },\n  });\n\n  // Check if user is admin after all hooks are declared\n  if (!currentUser || !currentUser.isAdmin) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <Shield className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h2 className=\"text-xl font-semibold mb-2\">Access Denied</h2>\n              <p className=\"text-gray-600\">You don't have permission to access this page. Please <a href=\"/admin-login\" className=\"text-blue-600 hover:underline\">login as an admin</a>.</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Filter users based on search query\n  const filteredUsers = useMemo(() => {\n    if (!searchQuery.trim()) return users;\n    return users.filter((user: User) => \n      user.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (user.email && user.email.toLowerCase().includes(searchQuery.toLowerCase())) ||\n      (user.firstName && user.firstName.toLowerCase().includes(searchQuery.toLowerCase())) ||\n      (user.lastName && user.lastName.toLowerCase().includes(searchQuery.toLowerCase()))\n    );\n  }, [users, searchQuery]);\n\n  const stats = {\n    totalUsers: users.length,\n    suspendedUsers: users.filter((u: User) => u.isSuspended).length,\n    totalPosts: posts.length,\n    activePosts: posts.filter((p: Post) => p.isActive).length,\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Shield className=\"h-8 w-8 text-primary\" />\n          <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n        </div>\n        <Button\n          variant=\"outline\"\n          onClick={() => window.location.href = '/'}\n          className=\"flex items-center space-x-2\"\n          data-testid=\"button-home\"\n        >\n          <Home className=\"h-4 w-4\" />\n          <span>Home</span>\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalUsers}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Suspended Users</CardTitle>\n            <Ban className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.suspendedUsers}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Posts</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalPosts}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Posts</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.activePosts}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Management Tabs */}\n      <Tabs defaultValue=\"users\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"users\">User Management</TabsTrigger>\n          <TabsTrigger value=\"posts\">Post Management</TabsTrigger>\n          <TabsTrigger value=\"advertising\">Advertising</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>User Management</CardTitle>\n              <CardDescription>\n                Manage user accounts, suspensions, and admin privileges\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {/* Username Search */}\n              <div className=\"flex items-center space-x-2 mb-6\">\n                <Search className=\"h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search users by username, email, first name, or last name...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"max-w-sm\"\n                  data-testid=\"input-user-search\"\n                />\n                {searchQuery && (\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    {filteredUsers.length} of {users.length} users\n                  </Badge>\n                )}\n              </div>\n              {usersLoading ? (\n                <div className=\"text-center py-8\">Loading users...</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Username</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Password Reset</TableHead>\n                      <TableHead>Joined</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredUsers.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                          {searchQuery ? `No users found matching \"${searchQuery}\"` : 'No users found'}\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      filteredUsers.map((user: User) => (\n                      <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                        <TableCell className=\"font-medium\" data-testid={`text-username-${user.id}`}>\n                          {user.username}\n                        </TableCell>\n                        <TableCell data-testid={`text-email-${user.id}`}>{user.email}</TableCell>\n                        <TableCell>\n                          {user.isSuspended ? (\n                            <Badge variant=\"destructive\" data-testid={`status-suspended-${user.id}`}>\n                              Suspended\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"secondary\" data-testid={`status-active-${user.id}`}>\n                              Active\n                            </Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {user.isAdmin ? (\n                              <Badge variant=\"default\" data-testid={`role-admin-${user.id}`}>\n                                Admin\n                              </Badge>\n                            ) : user.isModerator ? (\n                              <Badge variant=\"secondary\" data-testid={`role-moderator-${user.id}`}>\n                                Moderator\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"outline\" data-testid={`role-user-${user.id}`}>\n                                User\n                              </Badge>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Switch\n                              checked={!!user.requirePasswordReset}\n                              onCheckedChange={(checked) => {\n                                togglePasswordResetMutation.mutate({\n                                  userId: user.id,\n                                  requireReset: checked\n                                });\n                              }}\n                              disabled={togglePasswordResetMutation.isPending}\n                              data-testid={`switch-password-reset-${user.id}`}\n                            />\n                            <Label \n                              htmlFor={`password-reset-${user.id}`}\n                              className={`text-sm ${user.requirePasswordReset ? 'text-destructive font-medium' : 'text-muted-foreground'}`}\n                              data-testid={`label-password-reset-${user.id}`}\n                            >\n                              {user.requirePasswordReset ? 'Required' : 'Not Required'}\n                            </Label>\n                          </div>\n                        </TableCell>\n                        <TableCell data-testid={`text-joined-${user.id}`}>\n                          {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex flex-wrap gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => suspendUserMutation.mutate(user.id)}\n                              disabled={suspendUserMutation.isPending}\n                              data-testid={`button-suspend-${user.id}`}\n                            >\n                              {user.isSuspended ? (\n                                <>\n                                  <UserCheck className=\"h-4 w-4 mr-1\" />\n                                  Unsuspend\n                                </>\n                              ) : (\n                                <>\n                                  <Ban className=\"h-4 w-4 mr-1\" />\n                                  Suspend\n                                </>\n                              )}\n                            </Button>\n                            \n                            {!user.isAdmin && (\n                              <>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => makeAdminMutation.mutate(user.id)}\n                                  disabled={makeAdminMutation.isPending}\n                                  data-testid={`button-make-admin-${user.id}`}\n                                >\n                                  <Shield className=\"h-4 w-4 mr-1\" />\n                                  Make Admin\n                                </Button>\n                                \n                                <Button\n                                  variant={user.isModerator ? \"secondary\" : \"outline\"}\n                                  size=\"sm\"\n                                  onClick={() => toggleModeratorMutation.mutate(user.id)}\n                                  disabled={toggleModeratorMutation.isPending}\n                                  data-testid={`button-toggle-moderator-${user.id}`}\n                                >\n                                  <UserCheck className=\"h-4 w-4 mr-1\" />\n                                  {user.isModerator ? 'Remove Mod' : 'Make Mod'}\n                                </Button>\n                              </>\n                            )}\n                            \n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                if (confirm(`Flag ${user.username} for username change? They will be required to change their username on next login.`)) {\n                                  flagUsernameChangeMutation.mutate(user.id);\n                                }\n                              }}\n                              disabled={flagUsernameChangeMutation.isPending}\n                              data-testid={`button-flag-username-${user.id}`}\n                              className=\"text-blue-600 hover:text-blue-700 border-blue-300 hover:border-blue-400\"\n                            >\n                              <Edit className=\"h-4 w-4 mr-1\" />\n                              Flag for Username Change\n                            </Button>\n                            \n\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => deleteUserMutation.mutate(user.id)}\n                              disabled={deleteUserMutation.isPending}\n                              data-testid={`button-delete-user-${user.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    )))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"posts\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Post Management</CardTitle>\n              <CardDescription>\n                Monitor and moderate forum posts and listings\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {postsLoading ? (\n                <div className=\"text-center py-8\">Loading posts...</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Title</TableHead>\n                      <TableHead>Author</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Views</TableHead>\n                      <TableHead>Created</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {posts.map((post: Post) => (\n                      <TableRow key={post.id} data-testid={`row-post-${post.id}`}>\n                        <TableCell className=\"font-medium\" data-testid={`text-title-${post.id}`}>\n                          {post.title}\n                        </TableCell>\n                        <TableCell data-testid={`text-author-${post.id}`}>\n                          {users.find((u: User) => u.id === post.authorId)?.username || 'Unknown'}\n                        </TableCell>\n                        <TableCell data-testid={`text-category-${post.id}`}>{post.categoryId}</TableCell>\n                        <TableCell>\n                          {post.isPinned ? (\n                            <Badge variant=\"default\" data-testid={`status-pinned-${post.id}`}>\n                              📌 Pinned\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"outline\" data-testid={`status-normal-${post.id}`}>\n                              Normal\n                            </Badge>\n                          )}\n                        </TableCell>\n                        <TableCell data-testid={`text-views-${post.id}`}>{post.views || 0}</TableCell>\n                        <TableCell data-testid={`text-created-${post.id}`}>\n                          {post.createdAt ? new Date(post.createdAt).toLocaleDateString() : 'N/A'}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant={post.isPinned ? \"secondary\" : \"outline\"}\n                              size=\"sm\"\n                              onClick={() => togglePinMutation.mutate(post.id)}\n                              disabled={togglePinMutation.isPending}\n                              data-testid={`button-pin-${post.id}`}\n                            >\n                              📌 {post.isPinned ? \"Unpin\" : \"Pin\"}\n                            </Button>\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => deletePostMutation.mutate(post.id)}\n                              disabled={deletePostMutation.isPending}\n                              data-testid={`button-delete-post-${post.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"advertising\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Advertisement Management</CardTitle>\n              <CardDescription>\n                Manage active advertisements and track performance metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {advertisementsLoading ? (\n                <div className=\"text-center py-8\">Loading advertisements...</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Title</TableHead>\n                      <TableHead>Sponsor</TableHead>\n                      <TableHead>Position</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Impressions</TableHead>\n                      <TableHead>Clicks</TableHead>\n                      <TableHead>CTR</TableHead>\n                      <TableHead>Monthly Rate</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {advertisements.map((ad: Advertisement) => (\n                      <TableRow key={ad.id} data-testid={`row-ad-${ad.id}`}>\n                        <TableCell className=\"font-medium\" data-testid={`text-ad-title-${ad.id}`}>\n                          {ad.title}\n                        </TableCell>\n                        <TableCell data-testid={`text-sponsor-${ad.id}`}>\n                          {ad.sponsor}\n                        </TableCell>\n                        <TableCell data-testid={`text-position-${ad.id}`}>\n                          <Badge variant=\"outline\">{ad.position}</Badge>\n                        </TableCell>\n                        <TableCell>\n                          {ad.isActive ? (\n                            <Badge variant=\"default\" data-testid={`status-active-${ad.id}`}>\n                              Active\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"secondary\" data-testid={`status-inactive-${ad.id}`}>\n                              Inactive\n                            </Badge>\n                          )}\n                        </TableCell>\n                        <TableCell data-testid={`text-impressions-${ad.id}`}>\n                          <div className=\"flex items-center\">\n                            <Eye className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                            {ad.impressions || 0}\n                          </div>\n                        </TableCell>\n                        <TableCell data-testid={`text-clicks-${ad.id}`}>\n                          <div className=\"flex items-center\">\n                            <MousePointer className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                            {ad.clicks || 0}\n                          </div>\n                        </TableCell>\n                        <TableCell data-testid={`text-ctr-${ad.id}`}>\n                          {ad.impressions && ad.impressions > 0 \n                            ? `${((ad.clicks || 0) / ad.impressions * 100).toFixed(2)}%`\n                            : '0%'}\n                        </TableCell>\n                        <TableCell data-testid={`text-monthly-rate-${ad.id}`}>\n                          <div className=\"flex items-center\">\n                            <DollarSign className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                            {ad.monthlyRate ? `$${ad.monthlyRate}` : 'N/A'}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                // Toggle active status\n                                apiRequest(`/api/advertisements/${ad.id}`, { method: \"PUT\", body: { isActive: !ad.isActive } }).then(() => {\n                                  queryClient.invalidateQueries({ queryKey: [\"/api/advertisements\"] });\n                                  toast({ \n                                    title: `Advertisement ${ad.isActive ? 'deactivated' : 'activated'}`,\n                                    description: `${ad.title} has been ${ad.isActive ? 'deactivated' : 'activated'}` \n                                  });\n                                });\n                              }}\n                              data-testid={`button-toggle-${ad.id}`}\n                            >\n                              {ad.isActive ? 'Deactivate' : 'Activate'}\n                            </Button>\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => {\n                                // Delete advertisement\n                                if (confirm('Are you sure you want to delete this advertisement?')) {\n                                  apiRequest(`/api/advertisements/${ad.id}`, { method: \"DELETE\" }).then(() => {\n                                    queryClient.invalidateQueries({ queryKey: [\"/api/advertisements\"] });\n                                    toast({ title: \"Advertisement deleted successfully\" });\n                                  }).catch(() => {\n                                    toast({\n                                      title: \"Error\",\n                                      description: \"Failed to delete advertisement\",\n                                      variant: \"destructive\"\n                                    });\n                                  });\n                                }\n                              }}\n                              data-testid={`button-delete-ad-${ad.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n\n    </div>\n  );\n}","size_bytes":31261},"client/src/pages/advertise.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Megaphone, \n  Target, \n  DollarSign, \n  Calendar,\n  Star,\n  TrendingUp,\n  Users,\n  Eye\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdvertiseFormData {\n  title: string;\n  description: string;\n  targetUrl: string;\n  sponsor: string;\n  sponsorEmail: string;\n  position: string;\n  size: string;\n  monthlyBudget: number;\n}\n\nexport default function AdvertisePage() {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const { register, handleSubmit, watch, setValue, formState: { errors } } = useForm<AdvertiseFormData>({\n    defaultValues: {\n      position: \"sidebar\",\n      size: \"medium\",\n    }\n  });\n\n  const selectedPosition = watch(\"position\");\n  const selectedSize = watch(\"size\");\n  const monthlyBudget = watch(\"monthlyBudget\");\n\n  const onSubmit = async (data: AdvertiseFormData) => {\n    setIsSubmitting(true);\n    try {\n      // Here you would submit to your API\n      toast({\n        title: \"Advertisement Request Submitted\",\n        description: \"We'll review your advertisement and contact you within 24 hours.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit advertisement request. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getPositionPrice = (position: string, size: string) => {\n    const basePrice = {\n      header: { small: 200, medium: 350, large: 500 },\n      sidebar: { small: 150, medium: 250, large: 400 },\n      footer: { small: 100, medium: 180, large: 300 },\n      \"in-feed\": { small: 300, medium: 500, large: 750 },\n    };\n    \n    return basePrice[position as keyof typeof basePrice]?.[size as keyof typeof basePrice.header] || 0;\n  };\n\n  const monthlyPrice = getPositionPrice(selectedPosition, selectedSize);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <Megaphone className=\"w-12 h-12 text-forum-accent mr-3\" />\n          <h1 className=\"text-4xl font-bold text-forum-primary\">\n            Advertise with CA Gun Exchange\n          </h1>\n        </div>\n        <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\">\n          Reach California's firearm community with targeted advertising that connects you with \n          genuine buyers, sellers, and enthusiasts in the Golden State.\n        </p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Users className=\"w-8 h-8 text-forum-accent mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-forum-primary\">5,000+</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Active Members</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Eye className=\"w-8 h-8 text-forum-accent mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-forum-primary\">50K+</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Monthly Views</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <TrendingUp className=\"w-8 h-8 text-forum-accent mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-forum-primary\">200+</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Daily Posts</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Target className=\"w-8 h-8 text-forum-accent mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-forum-primary\">CA Only</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Targeted Audience</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n        {/* Advertising Options */}\n        <div>\n          <h2 className=\"text-2xl font-bold mb-6 text-forum-primary\">Advertising Options</h2>\n          \n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Star className=\"w-5 h-5 mr-2 text-yellow-500\" />\n                  Banner Advertising\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  Display your business prominently across our platform with eye-catching banner ads.\n                </p>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Header Banner:</span>\n                    <span className=\"font-semibold\">$200-500/month</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Sidebar Banner:</span>\n                    <span className=\"font-semibold\">$150-400/month</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>In-Feed Ads:</span>\n                    <span className=\"font-semibold\">$300-750/month</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"w-5 h-5 mr-2 text-green-500\" />\n                  Featured Listings\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  Promote specific listings to the top of relevant categories.\n                </p>\n                <div className=\"flex justify-between\">\n                  <span>Featured Post:</span>\n                  <span className=\"font-semibold\">$25/day</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Target className=\"w-5 h-5 mr-2 text-blue-500\" />\n                  Category Sponsorship\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  Sponsor entire categories and display your branding prominently.\n                </p>\n                <div className=\"flex justify-between\">\n                  <span>Category Sponsorship:</span>\n                  <span className=\"font-semibold\">$500-1000/month</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Contact Form */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle>Get Started with Advertising</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"sponsor\">Business Name</Label>\n                    <Input\n                      id=\"sponsor\"\n                      {...register(\"sponsor\", { required: \"Business name is required\" })}\n                      placeholder=\"Your Business Name\"\n                    />\n                    {errors.sponsor && (\n                      <p className=\"text-sm text-red-600 mt-1\">{errors.sponsor.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"sponsorEmail\">Email</Label>\n                    <Input\n                      id=\"sponsorEmail\"\n                      type=\"email\"\n                      {...register(\"sponsorEmail\", { required: \"Email is required\" })}\n                      placeholder=\"your@business.com\"\n                    />\n                    {errors.sponsorEmail && (\n                      <p className=\"text-sm text-red-600 mt-1\">{errors.sponsorEmail.message}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"title\">Advertisement Title</Label>\n                  <Input\n                    id=\"title\"\n                    {...register(\"title\", { required: \"Title is required\" })}\n                    placeholder=\"Your ad title\"\n                  />\n                  {errors.title && (\n                    <p className=\"text-sm text-red-600 mt-1\">{errors.title.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    {...register(\"description\", { required: \"Description is required\" })}\n                    placeholder=\"Describe your business and what you offer\"\n                    rows={3}\n                  />\n                  {errors.description && (\n                    <p className=\"text-sm text-red-600 mt-1\">{errors.description.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"targetUrl\">Website URL</Label>\n                  <Input\n                    id=\"targetUrl\"\n                    type=\"url\"\n                    {...register(\"targetUrl\", { required: \"Website URL is required\" })}\n                    placeholder=\"https://yourbusiness.com\"\n                  />\n                  {errors.targetUrl && (\n                    <p className=\"text-sm text-red-600 mt-1\">{errors.targetUrl.message}</p>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Ad Position</Label>\n                    <Select value={selectedPosition} onValueChange={(value) => setValue(\"position\", value)}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"header\">Header Banner</SelectItem>\n                        <SelectItem value=\"sidebar\">Sidebar Banner</SelectItem>\n                        <SelectItem value=\"footer\">Footer Banner</SelectItem>\n                        <SelectItem value=\"in-feed\">In-Feed Ad</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label>Ad Size</Label>\n                    <Select value={selectedSize} onValueChange={(value) => setValue(\"size\", value)}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"small\">Small</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"large\">Large</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {monthlyPrice > 0 && (\n                  <div className=\"bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-green-800 dark:text-green-200 font-medium\">\n                        Estimated Monthly Rate:\n                      </span>\n                      <div className=\"flex items-center\">\n                        <DollarSign className=\"w-4 h-4 mr-1 text-green-600\" />\n                        <span className=\"text-xl font-bold text-green-600\">\n                          {monthlyPrice}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isSubmitting}\n                  data-testid=\"button-submit-ad-request\"\n                >\n                  {isSubmitting ? \"Submitting...\" : \"Request Advertising Quote\"}\n                </Button>\n              </form>\n\n              <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg\">\n                <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                  <strong>Next Steps:</strong> Our advertising team will review your request and contact you \n                  within 24 hours with a customized proposal and creative requirements.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13564},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport LoginForm from \"@/components/auth/login-form\";\nimport RegisterForm from \"@/components/auth/register-form\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function AuthPage() {\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  const handleAuthSuccess = () => {\n    // Redirect handled by auth forms\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <div className=\"flex-1 flex items-center justify-center py-12\">\n        <div className=\"w-full max-w-md\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"login\">\n              <LoginForm onSuccess={handleAuthSuccess} />\n            </TabsContent>\n            \n            <TabsContent value=\"register\">\n              <RegisterForm onSuccess={handleAuthSuccess} />\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1506},"client/src/pages/category.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Footer from \"@/components/layout/footer\";\nimport PostCard from \"@/components/forum/post-card\";\nimport { useAuth } from \"@/lib/auth\";\nimport type { Post, Category, User } from \"@shared/schema\";\n\nexport default function CategoryPage() {\n  const { slug } = useParams<{ slug: string }>();\n  const { user } = useAuth();\n\n  const { data: category } = useQuery<Category>({\n    queryKey: [\"/api/categories\", slug],\n  });\n\n  const { data: posts = [] } = useQuery<Post[]>({\n    queryKey: [\"/api/posts/category\", category?.id],\n    enabled: !!category?.id,\n  });\n\n  if (!category) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">Category Not Found</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-4\">The category you're looking for doesn't exist.</p>\n            <Link href=\"/\">\n              <Button variant=\"outline\" data-testid=\"button-back-home\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case \"wts\": return \"Want To Sell\";\n      case \"wtb\": return \"Want To Buy\";\n      case \"wtt\": return \"Want To Trade\";\n      case \"discussion\": return \"Discussion\";\n      default: return \"\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <div className=\"flex-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            <div className=\"lg:col-span-1\">\n              <Sidebar />\n            </div>\n\n            <div className=\"lg:col-span-3\">\n              {/* Category Header */}\n              <div className=\"mb-6\">\n                <div className=\"flex items-center space-x-4 mb-4\">\n                  <Link href=\"/\">\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back\">\n                      <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                      Back\n                    </Button>\n                  </Link>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <h1 className=\"text-2xl font-bold text-forum-primary\" data-testid=\"text-category-title\">\n                        {category.name}\n                      </h1>\n                      <Badge variant=\"outline\" data-testid=\"text-category-type\">\n                        {getTypeLabel(category.type)}\n                      </Badge>\n                    </div>\n                    <p className=\"text-gray-600 dark:text-gray-300\" data-testid=\"text-category-description\">\n                      {category.description}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-gray-500 dark:text-gray-400\" data-testid=\"text-post-count\">\n                    {posts.length} {posts.length === 1 ? 'post' : 'posts'}\n                  </div>\n                  {user && (\n                    <Link href={`/create-post?category=${category.id}`}>\n                      <Button \n                        className=\"bg-forum-accent text-white hover:bg-forum-accent/90\"\n                        data-testid=\"button-create-post-category\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Create Post\n                      </Button>\n                    </Link>\n                  )}\n                </div>\n              </div>\n\n              {/* Legal Notice for Marketplace Categories */}\n              {(category.type === \"wts\" || category.type === \"wtb\" || category.type === \"wtt\") && (\n                <div className=\"mb-6 bg-forum-warning/10 border border-forum-warning/20 rounded-lg p-4\">\n                  <div className=\"flex items-start space-x-2\">\n                    <svg className=\"w-5 h-5 text-forum-warning mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                    </svg>\n                    <div>\n                      <p className=\"text-sm font-medium text-forum-warning mb-1\">\n                        California Law Compliance Required\n                      </p>\n                      <p className=\"text-xs text-forum-warning\">\n                        All firearm transfers must be conducted through licensed FFL dealers. Private party transfers are prohibited unless conducted through an FFL. \n                        This platform is for listings only and does not facilitate transactions.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Posts List */}\n              <div className=\"space-y-4\">\n                {posts.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"p-8 text-center\">\n                      <div className=\"text-gray-500 dark:text-gray-400\">\n                        <svg className=\"w-12 h-12 mx-auto mb-4 text-gray-300 dark:text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 8h10m0 0V6a2 2 0 00-2-2H9a2 2 0 00-2 2v2m10 0v10a2 2 0 01-2 2H9a2 2 0 01-2-2V8m10 0H7\" />\n                        </svg>\n                        <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\" data-testid=\"text-no-posts-title\">\n                          No posts yet\n                        </h3>\n                        <p className=\"text-gray-600 dark:text-gray-300 mb-4\" data-testid=\"text-no-posts-description\">\n                          Be the first to create a post in this category.\n                        </p>\n                        {user && (\n                          <Link href={`/create-post?category=${category.id}`}>\n                            <Button \n                              className=\"bg-forum-accent text-white hover:bg-forum-accent/90\"\n                              data-testid=\"button-create-first-post\"\n                            >\n                              <Plus className=\"w-4 h-4 mr-2\" />\n                              Create First Post\n                            </Button>\n                          </Link>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  posts.map((post) => (\n                    <PostCard\n                      key={post.id}\n                      post={post}\n                      category={category}\n                      author={(post as any).author || { username: \"Unknown User\", id: post.authorId } as User}\n                    />\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7940},"client/src/pages/contact.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Home, Mail } from \"lucide-react\";\n\nexport default function ContactPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <nav className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400 mb-6\">\n          <Link href=\"/\" className=\"hover:text-forum-accent transition-colors flex items-center\" data-testid=\"link-home-breadcrumb\">\n            <Home className=\"w-4 h-4 mr-1\" />\n            Home\n          </Link>\n          <span>/</span>\n          <span className=\"text-gray-900 dark:text-white\">Contact Support</span>\n        </nav>\n\n        <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-3xl font-bold text-center text-gray-900 dark:text-white flex items-center justify-center\">\n              <Mail className=\"w-8 h-8 mr-3\" />\n              Contact Support\n            </CardTitle>\n            <p className=\"text-center text-gray-600 dark:text-gray-400 mt-2\">\n              Get help and support for CA Gun Exchange\n            </p>\n          </CardHeader>\n          <CardContent className=\"prose dark:prose-invert max-w-none p-8\">\n            <div className=\"text-center py-12\">\n              <Mail className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Contact Support</h3>\n              <p className=\"text-gray-600 dark:text-gray-400 max-w-lg mx-auto\">\n                This page is under construction. Here you'll be able to contact our support team for help with your account, technical issues, or questions about the platform.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":1943},"client/src/pages/create-post.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, Upload, X } from \"lucide-react\";\nimport { insertPostSchema, type InsertPost } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport type { Category } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\n\nexport default function CreatePost() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [error, setError] = useState<string>(\"\");\n  const [uploadedImages, setUploadedImages] = useState<string[]>([]);\n\n  // Get category from URL params if provided\n  const urlParams = new URLSearchParams(window.location.search);\n  const preselectedCategoryId = urlParams.get('category');\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const form = useForm<InsertPost>({\n    resolver: zodResolver(insertPostSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      categoryId: preselectedCategoryId || \"\",\n      price: undefined,\n      location: \"\",\n      contactInfo: \"\",\n      willingToTravel: false,\n      willingToShip: false,\n    },\n  });\n\n  const selectedCategoryId = form.watch(\"categoryId\");\n  const selectedCategory = categories.find(cat => cat.id === selectedCategoryId);\n  const isMarketplace = selectedCategory?.type === \"wts\" || selectedCategory?.type === \"wtb\" || selectedCategory?.type === \"wtt\";\n\n  // Redirect if not logged in\n  useEffect(() => {\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please sign in to create a post.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/\");\n    }\n  }, [user, setLocation, toast]);\n\n  const handleGetUploadParameters = async () => {\n    try {\n      const data = await apiRequest(\"/api/objects/upload\", { method: \"POST\" });\n      return {\n        method: \"PUT\" as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      toast({\n        title: \"Upload Error\",\n        description: \"Failed to get upload URL\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const newImageUrls = result.successful.map((file) => file.uploadURL as string);\n      setUploadedImages(prev => [...prev, ...newImageUrls]);\n      \n      toast({\n        title: \"Images uploaded successfully!\",\n        description: `${result.successful.length} image(s) uploaded.`,\n      });\n    }\n  };\n\n  const removeImage = (indexToRemove: number) => {\n    setUploadedImages(prev => prev.filter((_, index) => index !== indexToRemove));\n  };\n\n  const createPostMutation = useMutation({\n    mutationFn: async (postData: InsertPost & { authorId: string; images?: string[] }) => {\n      const response = await apiRequest(\"/api/posts\", { method: \"POST\", body: postData });\n      return response;\n    },\n    onSuccess: (post) => {\n      toast({\n        title: \"Post created successfully!\",\n        description: \"Your post has been published.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      setLocation(`/posts/${post.id}`);\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Failed to create post\");\n    },\n  });\n\n  const onSubmit = (data: InsertPost) => {\n    if (!user) return;\n    \n    setError(\"\");\n    \n    const postData = {\n      ...data,\n      authorId: user.id,\n      price: data.price ? Math.round(data.price * 100) : undefined, // Convert to cents\n      images: uploadedImages,\n    };\n    \n    createPostMutation.mutate(postData);\n  };\n\n  if (!user) {\n    return null; // Will redirect in useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <div className=\"flex-1\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-6\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Forum\n              </Button>\n            </Link>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-2xl text-forum-primary\">Create New Post</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {error && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"categoryId\">Category *</Label>\n                  <Select \n                    value={form.watch(\"categoryId\")} \n                    onValueChange={(value) => form.setValue(\"categoryId\", value)}\n                    data-testid=\"select-category\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.type.toUpperCase()} - {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.categoryId && (\n                    <p className=\"text-sm text-destructive\">\n                      {form.formState.errors.categoryId.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Title *</Label>\n                  <Input\n                    id=\"title\"\n                    type=\"text\"\n                    placeholder=\"Enter a descriptive title\"\n                    {...form.register(\"title\")}\n                    data-testid=\"input-title\"\n                  />\n                  {form.formState.errors.title && (\n                    <p className=\"text-sm text-destructive\">\n                      {form.formState.errors.title.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"content\">Description *</Label>\n                  <Textarea\n                    id=\"content\"\n                    placeholder=\"Provide detailed information...\"\n                    rows={6}\n                    {...form.register(\"content\")}\n                    data-testid=\"textarea-content\"\n                  />\n                  {form.formState.errors.content && (\n                    <p className=\"text-sm text-destructive\">\n                      {form.formState.errors.content.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Image Upload Section */}\n                <div className=\"space-y-4\">\n                  <Label>Images (Up to 5)</Label>\n                  <div className=\"space-y-4\">\n                    {uploadedImages.length > 0 && (\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                        {uploadedImages.map((imageUrl, index) => (\n                          <div key={index} className=\"relative group\">\n                            <img\n                              src={imageUrl}\n                              alt={`Upload ${index + 1}`}\n                              className=\"w-full h-24 object-cover rounded-lg border\"\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              className=\"absolute top-1 right-1 h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                              onClick={() => removeImage(index)}\n                              data-testid={`button-remove-image-${index}`}\n                            >\n                              <X className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                    \n                    {uploadedImages.length < 5 && (\n                      <ObjectUploader\n                        maxNumberOfFiles={5 - uploadedImages.length}\n                        maxFileSize={10485760} // 10MB\n                        onGetUploadParameters={handleGetUploadParameters}\n                        onComplete={(result: any) => handleUploadComplete(result)}\n                        buttonClassName=\"w-full\"\n                      >\n                        <div className=\"flex items-center justify-center space-x-2 py-4\">\n                          <Upload className=\"w-5 h-5\" />\n                          <span>\n                            {uploadedImages.length === 0 \n                              ? \"Upload Images\" \n                              : `Add More Images (${uploadedImages.length}/5)`\n                            }\n                          </span>\n                        </div>\n                      </ObjectUploader>\n                    )}\n                    \n                    <p className=\"text-xs text-gray-500\">\n                      Supported formats: JPG, PNG, GIF. Maximum file size: 10MB per image.\n                    </p>\n                  </div>\n                </div>\n\n                {isMarketplace && (\n                  <>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"price\">\n                        {selectedCategory?.type === \"wts\" ? \"Price *\" : \n                         selectedCategory?.type === \"wtb\" ? \"Price (Budget)\" : \n                         \"Value (Optional)\"}\n                      </Label>\n                      <Input\n                        id=\"price\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...form.register(\"price\", { valueAsNumber: true })}\n                        data-testid=\"input-price\"\n                      />\n                      {form.formState.errors.price && (\n                        <p className=\"text-sm text-destructive\">\n                          {form.formState.errors.price.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"location\">Location</Label>\n                      <Input\n                        id=\"location\"\n                        type=\"text\"\n                        placeholder=\"e.g., Los Angeles, CA\"\n                        {...form.register(\"location\")}\n                        data-testid=\"input-location\"\n                      />\n                      {form.formState.errors.location && (\n                        <p className=\"text-sm text-destructive\">\n                          {form.formState.errors.location.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"contactInfo\">Contact Information</Label>\n                      <Input\n                        id=\"contactInfo\"\n                        type=\"text\"\n                        placeholder=\"How should interested parties contact you?\"\n                        {...form.register(\"contactInfo\")}\n                        data-testid=\"input-contact\"\n                      />\n                      {form.formState.errors.contactInfo && (\n                        <p className=\"text-sm text-destructive\">\n                          {form.formState.errors.contactInfo.message}\n                        </p>\n                      )}\n                    </div>\n\n                    {/* Travel and Shipping Options */}\n                    <div className=\"space-y-4\">\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-base font-medium\">Delivery Options</Label>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id=\"willingToTravel\"\n                            checked={form.watch(\"willingToTravel\")}\n                            onCheckedChange={(checked) => form.setValue(\"willingToTravel\", checked as boolean)}\n                            data-testid=\"checkbox-willing-to-travel\"\n                          />\n                          <Label \n                            htmlFor=\"willingToTravel\" \n                            className=\"text-sm font-normal cursor-pointer\"\n                          >\n                            Willing to Travel\n                          </Label>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id=\"willingToShip\"\n                            checked={form.watch(\"willingToShip\")}\n                            onCheckedChange={(checked) => form.setValue(\"willingToShip\", checked as boolean)}\n                            data-testid=\"checkbox-willing-to-ship\"\n                          />\n                          <Label \n                            htmlFor=\"willingToShip\" \n                            className=\"text-sm font-normal cursor-pointer\"\n                          >\n                            Willing to Ship\n                          </Label>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id=\"willingToTrade\"\n                            checked={form.watch(\"willingToTrade\")}\n                            onCheckedChange={(checked) => form.setValue(\"willingToTrade\", checked as boolean)}\n                            data-testid=\"checkbox-willing-to-trade\"\n                          />\n                          <Label \n                            htmlFor=\"willingToTrade\" \n                            className=\"text-sm font-normal cursor-pointer\"\n                          >\n                            Willing to Trade\n                          </Label>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                )}\n\n                {isMarketplace && (\n                  <div className=\"bg-forum-warning/10 border border-forum-warning/20 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-2\">\n                      <svg className=\"w-5 h-5 text-forum-warning mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                      </svg>\n                      <div>\n                        <p className=\"text-sm font-medium text-forum-warning mb-1\">\n                          Important Legal Notice\n                        </p>\n                        <p className=\"text-xs text-forum-warning\">\n                          All firearm transfers must be conducted through licensed FFL dealers in accordance with California law. \n                          By posting, you agree to comply with all applicable federal, state, and local laws.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex space-x-4\">\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-forum-accent text-white hover:bg-forum-accent/90\"\n                    disabled={createPostMutation.isPending}\n                    data-testid=\"button-submit\"\n                  >\n                    {createPostMutation.isPending ? \"Creating...\" : \"Create Post\"}\n                  </Button>\n                  <Link href=\"/\">\n                    <Button type=\"button\" variant=\"outline\" data-testid=\"button-cancel\">\n                      Cancel\n                    </Button>\n                  </Link>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17703},"client/src/pages/edit-post.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst editPostSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  categoryId: z.string().min(1, \"Category is required\"),\n  price: z.string().optional(),\n  location: z.string().optional(),\n  contactInfo: z.string().optional(),\n  images: z.array(z.string()).optional(),\n});\n\ntype EditPostFormData = z.infer<typeof editPostSchema>;\n\nexport default function EditPost() {\n  const [match, params] = useRoute(\"/posts/:id/edit\");\n  const [location, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadedImages, setUploadedImages] = useState<string[]>([]);\n\n  const postId = params?.id;\n\n  // Fetch the post data\n  const { data: post, isLoading: isLoadingPost } = useQuery<any>({\n    queryKey: [\"/api/posts\", postId],\n    enabled: !!postId,\n  });\n\n  // Fetch categories\n  const { data: categories = [] } = useQuery<any[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const form = useForm<EditPostFormData>({\n    resolver: zodResolver(editPostSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      categoryId: \"\",\n      price: \"\",\n      location: \"\",\n      contactInfo: \"\",\n      images: [],\n    },\n  });\n\n  // Update form when post data loads\n  useEffect(() => {\n    if (post) {\n      // Check if user owns this post\n      if (post.authorId !== user?.id) {\n        toast({\n          title: \"Access Denied\",\n          description: \"You can only edit your own posts.\",\n          variant: \"destructive\",\n        });\n        navigate(\"/\");\n        return;\n      }\n\n      form.reset({\n        title: post.title,\n        content: post.content,\n        categoryId: post.categoryId,\n        price: post.price ? (post.price / 100).toString() : \"\",\n        location: post.location || \"\",\n        contactInfo: post.contactInfo || \"\",\n        images: post.images || [],\n      });\n      setUploadedImages(post.images || []);\n    }\n  }, [post, user, form, toast, navigate]);\n\n  const updatePostMutation = useMutation({\n    mutationFn: async (data: EditPostFormData) => {\n      const formattedData = {\n        ...data,\n        price: data.price ? Math.round(parseFloat(data.price) * 100) : undefined,\n        images: uploadedImages,\n        authorId: user?.id,\n      };\n      \n      const response = await fetch(`/api/posts/${postId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formattedData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update post\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Post updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\", postId] });\n      navigate(`/posts/${postId}`);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EditPostFormData) => {\n    updatePostMutation.mutate(data);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p>You must be logged in to edit posts.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!match || !postId) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p>Post not found.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoadingPost) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p>Loading post...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Edit Post</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Title *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Post title\" {...field} data-testid=\"input-title\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"categoryId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-category\">\n                          <SelectValue placeholder=\"Select a category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {categories?.map((category: any) => (\n                          <SelectItem key={category.id} value={category.id}>\n                            {category.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"content\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description *</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Describe your item or request...\"\n                        rows={6}\n                        {...field}\n                        data-testid=\"textarea-content\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"price\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Price (USD)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"input-price\" />\n                    </FormControl>\n                    <FormDescription>Optional: Enter price for WTS listings</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Location</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"City, State\" {...field} data-testid=\"input-location\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"contactInfo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contact Information</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"How should interested parties contact you?\"\n                        rows={3}\n                        {...field}\n                        data-testid=\"textarea-contact\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div>\n                <FormLabel>Images</FormLabel>\n                <FormDescription className=\"mb-4\">\n                  Upload up to 5 images (optional)\n                </FormDescription>\n                {uploadedImages.length > 0 && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm text-gray-600 mb-2\">Current images:</p>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                      {uploadedImages.map((url, index) => (\n                        <div key={index} className=\"relative\">\n                          <img\n                            src={url}\n                            alt={`Post image ${index + 1}`}\n                            className=\"w-full h-24 object-cover rounded-md border\"\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => {\n                              setUploadedImages(prev => prev.filter((_, i) => i !== index));\n                              toast({\n                                title: \"Image Removed\",\n                                description: \"Image has been removed from your post\",\n                              });\n                            }}\n                            className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600\"\n                          >\n                            ×\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                <div className=\"space-y-2\">\n                  <ObjectUploader\n                    maxNumberOfFiles={5 - uploadedImages.length}\n                    maxFileSize={5 * 1024 * 1024} // 5MB limit\n                    onGetUploadParameters={async () => {\n                      console.log('Getting upload parameters...');\n                      try {\n                        const response = await fetch(\"/api/objects/upload\", {\n                          method: \"POST\",\n                        });\n                        \n                        if (!response.ok) {\n                          console.error('Failed to get upload URL:', response.status, response.statusText);\n                          throw new Error(`Failed to get upload URL: ${response.status}`);\n                        }\n                        \n                        const data = await response.json();\n                        console.log('Got upload URL:', data.uploadURL?.substring(0, 100) + '...');\n                        return {\n                          method: \"PUT\" as const,\n                          url: data.uploadURL,\n                        };\n                      } catch (error) {\n                        console.error('Error getting upload parameters:', error);\n                        throw error;\n                      }\n                    }}\n                    onComplete={(result) => {\n                      console.log('Upload complete. Result:', {\n                        successful: result.successful?.length || 0,\n                        failed: result.failed?.length || 0\n                      });\n                      \n                      const successfulUploads = result.successful || [];\n                      const failedUploads = result.failed || [];\n                      \n                      if (failedUploads.length > 0) {\n                        console.error('Upload failures:', failedUploads.map(f => ({\n                          name: f.name,\n                          error: f.error || 'Unknown error'\n                        })));\n                        toast({\n                          title: \"Upload Error\",\n                          description: `${failedUploads.length} file(s) failed to upload. Check console for details.`,\n                          variant: \"destructive\",\n                        });\n                        return; // Don't proceed if there are failures\n                      }\n                      \n                      if (successfulUploads.length > 0) {\n                        console.log('Processing successful uploads:', successfulUploads.map(u => ({\n                          name: u.name,\n                          uploadURL: u.uploadURL?.substring(0, 100) + '...'\n                        })));\n                        \n                        const newUrls = successfulUploads\n                          .map(upload => upload.uploadURL?.split('?')[0])\n                          .filter(Boolean) as string[];\n                        \n                        console.log('Extracted clean URLs:', newUrls);\n                        \n                        if (newUrls.length > 0) {\n                          setUploadedImages(prev => {\n                            const updated = [...prev, ...newUrls];\n                            console.log('Updated uploadedImages state:', updated);\n                            return updated;\n                          });\n                          toast({\n                            title: \"Images Uploaded\",\n                            description: `${newUrls.length} image(s) uploaded successfully. Don't forget to save your post!`,\n                          });\n                        } else {\n                          console.warn('No valid URLs extracted from successful uploads');\n                        }\n                      } else {\n                        console.log('No successful uploads to process');\n                      }\n                    }}\n                  >\n                    Add Images ({uploadedImages.length}/5)\n                  </ObjectUploader>\n                  <p className=\"text-xs text-gray-500\">\n                    Maximum 5 images, 5MB each. Supported formats: JPG, PNG, GIF\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex gap-4\">\n                <Button\n                  type=\"submit\"\n                  disabled={updatePostMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {updatePostMutation.isPending ? \"Updating...\" : \"Update Post\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => navigate(`/posts/${postId}`)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15867},"client/src/pages/guidelines.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Home, Users } from \"lucide-react\";\n\nexport default function GuidelinesPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <nav className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400 mb-6\">\n          <Link href=\"/\" className=\"hover:text-forum-accent transition-colors flex items-center\" data-testid=\"link-home-breadcrumb\">\n            <Home className=\"w-4 h-4 mr-1\" />\n            Home\n          </Link>\n          <span>/</span>\n          <span className=\"text-gray-900 dark:text-white\">Community Guidelines</span>\n        </nav>\n\n        <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-3xl font-bold text-center text-gray-900 dark:text-white flex items-center justify-center\">\n              <Users className=\"w-8 h-8 mr-3\" />\n              Community Guidelines\n            </CardTitle>\n            <p className=\"text-center text-gray-600 dark:text-gray-400 mt-2\">\n              Building a safe and respectful community\n            </p>\n          </CardHeader>\n          <CardContent className=\"prose dark:prose-invert max-w-none p-8\">\n            <p className=\"text-gray-700 dark:text-gray-300 mb-6\">\n              Welcome to CA Gun Exchange! To maintain a safe, legal, and respectful community, all users must follow these guidelines when posting or interacting on the Website. Violations may result in content removal, account suspension, or permanent bans.\n            </p>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">1. Legal Compliance</h2>\n            <div className=\"space-y-4 text-gray-700 dark:text-gray-300\">\n              <p>All firearm, ammunition, and accessory transactions must be conducted through a licensed California FFL in accordance with federal, state, and local laws.</p>\n              <p>Users are responsible for ensuring all listings, purchases, and transfers comply with California firearm laws, including background checks, waiting periods, and restrictions on prohibited items.</p>\n              <p>Posting content that encourages illegal activity, straw purchases, or sales to prohibited persons is strictly forbidden.</p>\n            </div>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">2. Listing Guidelines</h2>\n            <p className=\"text-gray-700 dark:text-gray-300 mb-4\">When posting items for sale or trade:</p>\n            <ul className=\"list-disc ml-8 space-y-2 text-gray-700 dark:text-gray-300\">\n              <li>Include accurate descriptions, pricing, and condition of items.</li>\n              <li>Only post items you legally own and are allowed to sell in California.</li>\n              <li>Do not include personal contact info outside the platform unless you are comfortable sharing it publicly.</li>\n              <li>Do not post duplicate listings or spam the forums.</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">3. Safety and Verification</h2>\n            <ul className=\"list-disc ml-8 space-y-2 text-gray-700 dark:text-gray-300\">\n              <li>Meet all buyers/sellers at a licensed FFL or follow FFL-required transfer procedures.</li>\n              <li>Never attempt to complete a firearm transaction outside the legal framework.</li>\n              <li>Report suspicious activity, scams, or illegal posts to the site administrators immediately.</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">4. Respectful Behavior</h2>\n            <ul className=\"list-disc ml-8 space-y-2 text-gray-700 dark:text-gray-300\">\n              <li>Treat all members with respect. Harassment, threats, hate speech, or discriminatory language will not be tolerated.</li>\n              <li>Disagreements should be handled politely. Avoid personal attacks.</li>\n              <li>Spam, trolling, or disruptive behavior is prohibited.</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">5. Prohibited Content</h2>\n            <p className=\"text-gray-700 dark:text-gray-300 mb-4\">Do not post:</p>\n            <ul className=\"list-disc ml-8 space-y-2 text-gray-700 dark:text-gray-300\">\n              <li>Illegal firearms, ammunition, explosives, or restricted items.</li>\n              <li>False, misleading, or fraudulent listings.</li>\n              <li>Personal attacks, bullying, or harassment.</li>\n              <li>Copyrighted material without permission.</li>\n              <li>Offensive, inappropriate, or explicit profile pictures or images.</li>\n              <li>Content that violates community standards or promotes illegal activity.</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">6. Reporting Violations</h2>\n            <p className=\"text-gray-700 dark:text-gray-300 mb-4\">If you see content that violates these guidelines:</p>\n            <ul className=\"list-disc ml-8 space-y-2 text-gray-700 dark:text-gray-300\">\n              <li>Use the \"Report\" function on the Website.</li>\n              <li>Provide clear details and links to the offending content.</li>\n              <li>Administrators will review and take appropriate action.</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">7. Enforcement</h2>\n            <p className=\"text-gray-700 dark:text-gray-300 mb-4\">CA Gun Exchange reserves the right to:</p>\n            <ul className=\"list-disc ml-8 space-y-2 text-gray-700 dark:text-gray-300\">\n              <li>Remove any content that violates these guidelines.</li>\n              <li>Suspend or permanently ban accounts that fail to comply.</li>\n              <li>Cooperate with law enforcement as required by law.</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">8. Updates</h2>\n            <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n              Community Guidelines may be updated periodically. Users are responsible for reviewing updates to stay informed.\n            </p>\n\n            <div className=\"mt-8 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\n              <p className=\"text-blue-800 dark:text-blue-300 font-medium\">\n                By participating on CA Gun Exchange, you agree to follow these guidelines and help maintain a safe, legal, and respectful community.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6891},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Footer from \"@/components/layout/footer\";\nimport PostCard from \"@/components/forum/post-card\";\nimport CategoryCard from \"@/components/forum/category-card\";\nimport AdContainer from \"@/components/advertising/ad-container\";\n\nimport { useAuth } from \"@/lib/auth\";\nimport type { Post, User, Category } from \"@shared/schema\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  \n  const { data: posts = [] } = useQuery<Post[]>({\n    queryKey: [\"/api/posts\"],\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Sort posts with pinned posts first, then by bumpedAt\n  const sortedPosts = posts.sort((a, b) => {\n    // Pinned posts first\n    if (a.isPinned && !b.isPinned) return -1;\n    if (!a.isPinned && b.isPinned) return 1;\n    \n    // Then sort by bumpedAt (most recent first)\n    const dateA = a.bumpedAt || a.createdAt;\n    const dateB = b.bumpedAt || b.createdAt;\n    return new Date(dateB || 0).getTime() - new Date(dateA || 0).getTime();\n  });\n  \n  // Get recent posts for activity feed\n  const recentPosts = sortedPosts.slice(0, 10);\n  \n  // Get sample categories for overview cards\n  const featuredCategories = categories.filter(cat => \n    [\"wts-handguns\", \"wtb-handguns\", \"wtt-handguns\", \"general\"].includes(cat.slug)\n  );\n\n  const getPostCountForCategory = (categoryId: string) => {\n    return posts.filter(post => post.categoryId === categoryId).length;\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <div className=\"flex-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Header Advertisement */}\n          <AdContainer position=\"header\" className=\"mb-6\" />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            <div className=\"lg:col-span-1\">\n              <Sidebar />\n              {/* Sidebar Advertisement */}\n              <AdContainer position=\"sidebar\" className=\"mt-6\" />\n            </div>\n\n            <div className=\"lg:col-span-3\">\n              {/* Create Post Button */}\n              <div className=\"mb-6\">\n                <Link href=\"/create-post\">\n                  <Button \n                    className=\"bg-forum-accent text-white hover:bg-forum-accent/90 font-medium flex items-center\"\n                    data-testid=\"button-create-post\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create New Listing or Post\n                  </Button>\n                </Link>\n              </div>\n\n              {/* Category Overview Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n                {featuredCategories.map((category) => (\n                  <CategoryCard\n                    key={category.id}\n                    category={category}\n                    postCount={getPostCountForCategory(category.id)}\n                  />\n                ))}\n              </div>\n\n              {/* Recent Activity Feed */}\n              <Card>\n                <CardHeader className=\"border-b border-gray-200 dark:border-gray-700\">\n                  <CardTitle className=\"text-lg text-forum-primary\">Recent Activity</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  {recentPosts.length === 0 ? (\n                    <div className=\"p-8 text-center text-gray-500 dark:text-gray-400\">\n                      <p data-testid=\"text-no-posts\">No posts yet. Be the first to create one!</p>\n                    </div>\n                  ) : (\n                    <div className=\"divide-y divide-gray-100 dark:divide-gray-700\">\n                      {recentPosts.map((post, index) => {\n                        const category = categories.find(cat => cat.id === post.categoryId);\n                        return (\n                          <div key={post.id}>\n                            <div className=\"p-6 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\">\n                              <PostCard\n                                post={post}\n                                category={category}\n                                author={(post as any).author}\n                                currentUser={user}\n                              />\n                            </div>\n                            {/* Show in-feed ad after every 3rd post */}\n                            {(index + 1) % 3 === 0 && (\n                              <div className=\"px-6 py-4\">\n                                <AdContainer position=\"in-feed\" />\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  )}\n                  \n                  {recentPosts.length > 0 && (\n                    <div className=\"px-6 py-4 border-t border-gray-200 dark:border-gray-700 text-center\">\n                      <Link \n                        href=\"/posts\" \n                        className=\"text-forum-accent hover:text-forum-accent/80 font-medium\"\n                        data-testid=\"link-view-more\"\n                      >\n                        View More Activity →\n                      </Link>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer Advertisement */}\n      <AdContainer position=\"footer\" className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\" />\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5957},"client/src/pages/messages.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { MessageSquare, Send, User, Home, Trash2, CheckSquare } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\nimport type { Conversation, Message } from \"@shared/schema\";\n\ntype ConversationWithDetails = Conversation & {\n  otherUser: { id: string; username: string; email: string };\n  lastMessage?: Message;\n  unreadCount: number;\n};\n\nexport default function MessagesPage() {\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [selectedConversations, setSelectedConversations] = useState<Set<string>>(new Set());\n  const [isSelectionMode, setIsSelectionMode] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">Please log in to view messages</h1>\n          <Link href=\"/\" className=\"text-forum-accent hover:underline\">Return to Home</Link>\n        </div>\n      </div>\n    );\n  }\n\n  const { data: conversations = [], isLoading } = useQuery<ConversationWithDetails[]>({\n    queryKey: [\"/api/conversations\"],\n    meta: {\n      headers: { \"x-user-id\": user.id }\n    }\n  });\n\n  const { data: messages = [] } = useQuery<Message[]>({\n    queryKey: [\"/api/conversations\", selectedConversation, \"messages\"],\n    enabled: !!selectedConversation,\n    meta: {\n      headers: { \"x-user-id\": user.id }\n    }\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      if (!selectedConversation) throw new Error(\"No conversation selected\");\n      \n      const response = await fetch(`/api/conversations/${selectedConversation}/messages`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-user-id\": user.id\n        },\n        body: JSON.stringify({ content })\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to send message\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      setNewMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\", selectedConversation, \"messages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      toast({\n        title: \"Message sent\",\n        description: \"Your message has been sent successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (conversationId: string) => {\n      return await apiRequest(`/api/conversations/${conversationId}/mark-read`, {\n        method: \"POST\",\n        headers: { \"x-user-id\": user.id }\n      });\n    },\n    onSuccess: () => {\n      // Refresh conversations and unread count\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages/unread-count\"] });\n    }\n  });\n\n  const deleteConversationsMutation = useMutation({\n    mutationFn: async (conversationIds: string[]) => {\n      return await apiRequest(\"/api/conversations/delete\", {\n        method: \"POST\",\n        body: { conversationIds },\n        headers: { \"x-user-id\": user.id }\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Deleted ${selectedConversations.size} conversation(s)`,\n      });\n      setSelectedConversations(new Set());\n      setIsSelectionMode(false);\n      setSelectedConversation(null);\n      // Refresh conversations and unread count\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages/unread-count\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete conversations\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newMessage.trim() && selectedConversation) {\n      sendMessageMutation.mutate(newMessage.trim());\n    }\n  };\n\n  const handleConversationSelect = (conversationId: string) => {\n    setSelectedConversation(conversationId);\n    // Mark messages as read when conversation is selected\n    markAsReadMutation.mutate(conversationId);\n  };\n\n  const handleSelectConversation = (conversationId: string, checked: boolean) => {\n    const newSelected = new Set(selectedConversations);\n    if (checked) {\n      newSelected.add(conversationId);\n    } else {\n      newSelected.delete(conversationId);\n    }\n    setSelectedConversations(newSelected);\n  };\n\n  const handleDeleteSelected = () => {\n    if (selectedConversations.size > 0) {\n      deleteConversationsMutation.mutate(Array.from(selectedConversations));\n    }\n  };\n\n  const selectedConversationData = conversations.find(c => c.id === selectedConversation);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <MessageSquare className=\"h-8 w-8 mx-auto mb-4 text-muted-foreground\" />\n          <p className=\"text-muted-foreground\">Loading conversations...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      <nav className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400 mb-4\">\n        <Link href=\"/\" className=\"hover:text-forum-accent transition-colors flex items-center\" data-testid=\"link-home-breadcrumb\">\n          <Home className=\"w-4 h-4 mr-1\" />\n          Home\n        </Link>\n        <span>/</span>\n        <span className=\"text-gray-900 dark:text-white\">Messages</span>\n      </nav>\n      \n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Messages</h1>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 h-[600px]\">\n        {/* Conversations List */}\n        <Card className=\"md:col-span-1\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" />\n                Conversations\n              </CardTitle>\n              <div className=\"flex items-center gap-2\">\n                {isSelectionMode && selectedConversations.size > 0 && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={handleDeleteSelected}\n                    disabled={deleteConversationsMutation.isPending}\n                    data-testid=\"button-delete-selected\"\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-1\" />\n                    Delete ({selectedConversations.size})\n                  </Button>\n                )}\n                <Button\n                  size=\"sm\"\n                  variant={isSelectionMode ? \"secondary\" : \"outline\"}\n                  onClick={() => {\n                    setIsSelectionMode(!isSelectionMode);\n                    setSelectedConversations(new Set());\n                  }}\n                  data-testid=\"button-selection-mode\"\n                >\n                  <CheckSquare className=\"h-4 w-4 mr-1\" />\n                  {isSelectionMode ? \"Cancel\" : \"Select\"}\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <ScrollArea className=\"h-[500px]\">\n              {conversations.length === 0 ? (\n                <div className=\"p-4 text-center text-muted-foreground\">\n                  <MessageSquare className=\"h-8 w-8 mx-auto mb-2\" />\n                  <p>No conversations yet</p>\n                  <p className=\"text-sm\">Start messaging from a post listing</p>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {conversations.map((conversation) => (\n                    <div\n                      key={conversation.id}\n                      data-testid={`conversation-${conversation.id}`}\n                      className={`p-4 border-b cursor-pointer hover:bg-muted/50 transition-colors ${\n                        selectedConversation === conversation.id ? \"bg-muted\" : \"\"\n                      }`}\n                      onClick={() => {\n                        if (!isSelectionMode) {\n                          handleConversationSelect(conversation.id);\n                        }\n                      }}\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        {isSelectionMode && (\n                          <Checkbox\n                            checked={selectedConversations.has(conversation.id)}\n                            onCheckedChange={(checked) => handleSelectConversation(conversation.id, !!checked)}\n                            onClick={(e) => e.stopPropagation()}\n                            data-testid={`checkbox-${conversation.id}`}\n                          />\n                        )}\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarFallback>\n                            <User className=\"h-4 w-4\" />\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between\">\n                            <p className=\"font-medium text-sm truncate\">\n                              {conversation.otherUser?.username || 'Unknown User'}\n                            </p>\n                            {conversation.unreadCount > 0 && (\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                {conversation.unreadCount}\n                              </Badge>\n                            )}\n                          </div>\n                          {conversation.lastMessage && (\n                            <p className=\"text-xs text-muted-foreground truncate mt-1\">\n                              {(() => {\n                                const content = conversation.lastMessage.content;\n                                const subjectMatch = content.match(/^Subject:\\s*(.+?)(?:\\n\\n|\\n|$)/);\n                                return subjectMatch ? subjectMatch[1].trim() : content;\n                              })()}\n                            </p>\n                          )}\n                          {conversation.lastMessage?.createdAt && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              {format(new Date(conversation.lastMessage.createdAt), \"MMM d, HH:mm\")}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </ScrollArea>\n          </CardContent>\n        </Card>\n\n        {/* Messages Area */}\n        <Card className=\"md:col-span-2\">\n          {selectedConversation && selectedConversationData ? (\n            <>\n              <CardHeader className=\"border-b\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarFallback>\n                      <User className=\"h-4 w-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                  {selectedConversationData.otherUser.username}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <ScrollArea className=\"h-[400px] p-4\">\n                  {messages.length === 0 ? (\n                    <div className=\"text-center text-muted-foreground py-8\">\n                      <MessageSquare className=\"h-8 w-8 mx-auto mb-2\" />\n                      <p>No messages yet</p>\n                      <p className=\"text-sm\">Start the conversation!</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {messages.map((message) => (\n                        <div\n                          key={message.id}\n                          data-testid={`message-${message.id}`}\n                          className={`flex ${message.senderId === user.id ? \"justify-end\" : \"justify-start\"}`}\n                        >\n                          <div\n                            className={`max-w-[70%] p-3 rounded-lg ${\n                              message.senderId === user.id\n                                ? \"bg-primary text-primary-foreground\"\n                                : \"bg-muted\"\n                            }`}\n                          >\n                            {(() => {\n                              // Parse subject and content from message\n                              const content = message.content;\n                              const subjectMatch = content.match(/^Subject:\\s*(.+?)(?:\\n\\n|\\n|$)/);\n                              \n                              if (subjectMatch) {\n                                const subject = subjectMatch[1].trim();\n                                const messageBody = content.replace(/^Subject:\\s*.+?(?:\\n\\n|\\n)/, '').trim();\n                                \n                                return (\n                                  <div>\n                                    <div className={`font-semibold text-sm mb-2 pb-2 border-b ${\n                                      message.senderId === user.id\n                                        ? \"border-primary-foreground/20\"\n                                        : \"border-muted-foreground/20\"\n                                    }`}>\n                                      {subject}\n                                    </div>\n                                    {messageBody && (\n                                      <div className=\"text-sm whitespace-pre-wrap\">\n                                        {messageBody}\n                                      </div>\n                                    )}\n                                  </div>\n                                );\n                              } else {\n                                return <p className=\"text-sm whitespace-pre-wrap\">{content}</p>;\n                              }\n                            })()}\n                            <p className={`text-xs mt-2 ${\n                              message.senderId === user.id\n                                ? \"text-primary-foreground/70\"\n                                : \"text-muted-foreground\"\n                            }`}>\n                              {message.createdAt && format(new Date(message.createdAt), \"MMM d, HH:mm\")}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </ScrollArea>\n                <div className=\"border-t p-4\">\n                  <form onSubmit={handleSendMessage} className=\"flex gap-2\">\n                    <Textarea\n                      data-testid=\"message-input\"\n                      value={newMessage}\n                      onChange={(e) => setNewMessage(e.target.value)}\n                      placeholder=\"Type your message...\"\n                      className=\"resize-none\"\n                      rows={2}\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\" && !e.shiftKey) {\n                          e.preventDefault();\n                          handleSendMessage(e);\n                        }\n                      }}\n                    />\n                    <Button \n                      type=\"submit\" \n                      data-testid=\"send-message-btn\"\n                      disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                      size=\"sm\"\n                    >\n                      <Send className=\"h-4 w-4\" />\n                    </Button>\n                  </form>\n                </div>\n              </CardContent>\n            </>\n          ) : (\n            <CardContent className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center text-muted-foreground\">\n                <MessageSquare className=\"h-12 w-12 mx-auto mb-4\" />\n                <p className=\"text-lg font-medium\">Select a conversation</p>\n                <p className=\"text-sm\">Choose a conversation to start messaging</p>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":17564},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/post-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, MapPin, DollarSign, Eye, Calendar, Edit, MessageCircle, Send, Trash2, Pin, PinOff, Shield, Ban, UserX, Key } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isModerator, canDeletePost, canPinPost } from \"@/lib/moderator\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport ImageModal from \"@/components/ui/image-modal\";\nimport type { Post, Category, User, Reply } from \"@shared/schema\";\nimport { useState } from \"react\";\n\nexport default function PostDetail() {\n  const { id } = useParams<{ id: string }>();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [location, navigate] = useLocation();\n  const queryClient = useQueryClient();\n  const [newComment, setNewComment] = useState(\"\");\n  const [imageModalOpen, setImageModalOpen] = useState(false);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  const { data: post } = useQuery<Post>({\n    queryKey: [\"/api/posts\", id],\n  });\n\n  const { data: replies = [] } = useQuery<Reply[]>({\n    queryKey: [\"/api/posts\", id, \"replies\"],\n    enabled: !!id,\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Comment submission mutation\n  const addCommentMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const response = await fetch(`/api/posts/${id}/replies`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          content,\n          authorId: user?.id,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to post comment\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      setNewComment(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\", id, \"replies\"] });\n      toast({\n        title: \"Success\",\n        description: \"Your comment has been posted!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to post comment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Moderator mutations\n  const deletePostMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/posts/${id}/moderate`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to delete post\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Post has been deleted\",\n      });\n      navigate(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const pinPostMutation = useMutation({\n    mutationFn: async () => {\n      // Capture the current pin state before the toggle\n      const wasAlreadyPinned = post?.isPinned || false;\n      \n      const response = await fetch(`/api/posts/${id}/pin`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to pin/unpin post\");\n      }\n\n      const updatedPost = await response.json();\n      return { updatedPost, wasAlreadyPinned };\n    },\n    onSuccess: ({ updatedPost, wasAlreadyPinned }) => {\n      // Invalidate all relevant caches\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts/category\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\", id] });\n      toast({\n        title: \"Success\",\n        description: wasAlreadyPinned ? \"Post has been unpinned\" : \"Post has been pinned\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to pin/unpin post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const suspendUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/users/${userId}/suspend`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to suspend/unsuspend user\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (updatedUser) => {\n      toast({\n        title: \"Success\",\n        description: updatedUser.isSuspended ? \"User has been suspended\" : \"User has been unsuspended\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to suspend/unsuspend user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const flagUsernameChangeMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/users/${userId}/flag-username-change`, {\n        method: \"PUT\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to flag user for username change\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User has been flagged for username change\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to flag user for username change\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const flagPasswordResetMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/users/${userId}/flag-password-reset`, {\n        method: \"PUT\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to flag user for password reset\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User has been flagged for password reset\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to flag user for password reset\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitComment = () => {\n    if (newComment.trim() && user) {\n      addCommentMutation.mutate(newComment.trim());\n    }\n  };\n\n  // Helper functions\n  const formatPrice = (priceInCents?: number | null) => {\n    if (!priceInCents) return null;\n    return `$${(priceInCents / 100).toLocaleString()}`;\n  };\n\n  const formatDate = (date?: Date | null) => {\n    if (!date) return \"Unknown\";\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getBadgeVariant = (type?: string) => {\n    switch (type) {\n      case \"wts\": return \"default\";\n      case \"wtb\": return \"secondary\";\n      case \"wtt\": return \"destructive\";\n      case \"discussion\": return \"outline\";\n      default: return \"outline\";\n    }\n  };\n\n  const getBadgeText = (type?: string) => {\n    switch (type) {\n      case \"wts\": return \"WTS\";\n      case \"wtb\": return \"WTB\";\n      case \"wtt\": return \"WTT\";\n      case \"discussion\": return \"Discussion\";\n      default: return \"Post\";\n    }\n  };\n\n  if (!post) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Post Not Found</h1>\n            <p className=\"text-gray-600 mb-4\">The post you're looking for doesn't exist.</p>\n            <Link href=\"/\">\n              <Button variant=\"outline\" data-testid=\"button-back-home\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const category = categories.find(cat => cat.id === post.categoryId);\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <div className=\"flex-1\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-6\">\n            <Link href={category ? `/category/${category.slug}` : \"/\"}>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to {category ? category.name : \"Forum\"}\n              </Button>\n            </Link>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Badge variant={getBadgeVariant(category?.type)} data-testid=\"badge-post-type\">\n                      {getBadgeText(category?.type)}\n                    </Badge>\n                    {category && (\n                      <span className=\"text-sm text-gray-500\">in {category.name}</span>\n                    )}\n                  </div>\n                  <CardTitle className=\"text-2xl text-forum-primary mb-2\" data-testid=\"text-post-title\">\n                    {post.title}\n                  </CardTitle>\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                    <span className=\"flex items-center\" data-testid=\"text-author\">\n                      <div className=\"w-6 h-6 bg-forum-accent rounded-full flex items-center justify-center text-white text-xs font-medium mr-2\">\n                        {((post as any).author?.username || post.authorId).slice(0, 2).toUpperCase()}\n                      </div>\n                      <Link href={`/user/${post.authorId}`}>\n                        <span className=\"font-medium text-forum-primary hover:text-forum-accent cursor-pointer transition-colors\">\n                          {(post as any).author?.username || `User_${post.authorId.slice(0, 6)}`}\n                        </span>\n                      </Link>\n                    </span>\n                    <span className=\"flex items-center\" data-testid=\"text-created-date\">\n                      <Calendar className=\"w-4 h-4 mr-1\" />\n                      {formatDate(post.createdAt)}\n                    </span>\n                    <span className=\"flex items-center\" data-testid=\"text-views\">\n                      <Eye className=\"w-4 h-4 mr-1\" />\n                      {post.views || 0} views\n                    </span>\n                  </div>\n                </div>\n                <div className=\"ml-4 flex items-center space-x-2\">\n                  {/* Edit button for post owner */}\n                  {user && user.id === post.authorId && (\n                    <Link href={`/posts/${post.id}/edit`}>\n                      <Button variant=\"outline\" size=\"sm\" data-testid=\"button-edit\">\n                        <Edit className=\"w-4 h-4 mr-2\" />\n                        Edit\n                      </Button>\n                    </Link>\n                  )}\n\n                  {/* Moderator actions for admins */}\n                  {user && isModerator(user) && (\n                    <>\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            data-testid=\"button-delete-post\"\n                            disabled={deletePostMutation.isPending}\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                            Delete\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete Post</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete this post? This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => deletePostMutation.mutate()}\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                            >\n                              Delete Post\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => pinPostMutation.mutate()}\n                        disabled={pinPostMutation.isPending}\n                        data-testid=\"button-pin-post\"\n                      >\n                        {post.isPinned ? (\n                          <>\n                            <PinOff className=\"w-4 h-4 mr-2\" />\n                            Unpin\n                          </>\n                        ) : (\n                          <>\n                            <Pin className=\"w-4 h-4 mr-2\" />\n                            Pin\n                          </>\n                        )}\n                      </Button>\n\n                      {post.authorId !== user.id && (\n                        <>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                data-testid=\"button-suspend-user\"\n                                disabled={suspendUserMutation.isPending}\n                              >\n                                <Ban className=\"w-4 h-4 mr-2\" />\n                                Suspend Author\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Suspend User</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to suspend the author of this post? They will not be able to create new posts or replies.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => suspendUserMutation.mutate(post.authorId)}\n                                  className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                >\n                                  Suspend User\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                data-testid=\"button-flag-username\"\n                                disabled={flagUsernameChangeMutation.isPending}\n                              >\n                                <UserX className=\"w-4 h-4 mr-2\" />\n                                Flag Username\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Flag User for Username Change</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  This will require the user to change their username on their next login. Use this for inappropriate or offensive usernames.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => flagUsernameChangeMutation.mutate(post.authorId)}\n                                  className=\"bg-orange-600 text-white hover:bg-orange-700\"\n                                >\n                                  Flag Username\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                data-testid=\"button-flag-password\"\n                                disabled={flagPasswordResetMutation.isPending}\n                              >\n                                <Key className=\"w-4 h-4 mr-2\" />\n                                Flag Password\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Flag User for Password Reset</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  This will require the user to change their password on their next login. Use this for security concerns or compromised accounts.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => flagPasswordResetMutation.mutate(post.authorId)}\n                                  className=\"bg-blue-600 text-white hover:bg-blue-700\"\n                                >\n                                  Flag Password\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"prose max-w-none mb-6\" data-testid=\"text-post-content\">\n                <p className=\"whitespace-pre-wrap\">{post.content}</p>\n              </div>\n\n              {/* Travel, Shipping, and Trade Options - Only show for marketplace posts */}\n              {(category?.type === \"wts\" || category?.type === \"wtb\" || category?.type === \"wtt\") && (post.willingToTravel || post.willingToShip || post.willingToTrade) && (\n                <div className=\"mb-6\">\n                  <div className=\"flex gap-3\">\n                    {post.willingToTravel && (\n                      <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 border-green-300 dark:bg-green-900/30 dark:text-green-400 dark:border-green-600 px-3 py-1\" data-testid=\"badge-willing-to-travel\">\n                        Willing to Travel\n                      </Badge>\n                    )}\n                    {post.willingToShip && (\n                      <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-800 border-blue-300 dark:bg-blue-900/30 dark:text-blue-400 dark:border-blue-600 px-3 py-1\" data-testid=\"badge-willing-to-ship\">\n                        Willing to Ship\n                      </Badge>\n                    )}\n                    {post.willingToTrade && (\n                      <Badge variant=\"outline\" className=\"bg-orange-100 text-orange-800 border-orange-300 dark:bg-orange-900/30 dark:text-orange-400 dark:border-orange-600 px-3 py-1\" data-testid=\"badge-willing-to-trade\">\n                        Willing to Trade\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Post Images */}\n              {post.images && post.images.length > 0 && (\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-medium text-forum-primary mb-3\">Images</h4>\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3\">\n                    {post.images.map((imageUrl, index) => (\n                      <div key={index} className=\"relative group\">\n                        <img\n                          src={imageUrl}\n                          alt={`Post image ${index + 1}`}\n                          className=\"w-full h-24 sm:h-28 object-cover rounded-lg border border-gray-200 hover:border-forum-accent transition-all duration-200 cursor-pointer hover:shadow-md\"\n                          onClick={() => {\n                            setCurrentImageIndex(index);\n                            setImageModalOpen(true);\n                          }}\n                          data-testid={`img-post-${index}`}\n                          title=\"Click to view full size\"\n                        />\n                        <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-opacity rounded-lg pointer-events-none\" />\n                        <div className=\"absolute top-1 right-1 bg-black bg-opacity-50 text-white text-xs px-1 py-0.5 rounded opacity-0 group-hover:opacity-100 transition-opacity\">\n                          {index + 1}/{post.images?.length || 0}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-2\">Click on any image to view full size</p>\n                </div>\n              )}\n\n              {/* Post Details */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                {post.price && (\n                  <div className=\"flex items-center space-x-2\" data-testid=\"text-price\">\n                    <DollarSign className=\"w-4 h-4 text-forum-accent\" />\n                    <span className=\"font-medium\">Price:</span>\n                    <span className=\"text-lg font-bold text-forum-accent\">\n                      {formatPrice(post.price)}\n                    </span>\n                  </div>\n                )}\n                \n                {post.location && (\n                  <div className=\"flex items-center space-x-2\" data-testid=\"text-location\">\n                    <MapPin className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"font-medium\">Location:</span>\n                    <span>{post.location}</span>\n                  </div>\n                )}\n                \n                {post.contactInfo && (\n                  <div className=\"md:col-span-2\">\n                    <div className=\"flex items-start space-x-2\" data-testid=\"text-contact\">\n                      <svg className=\"w-4 h-4 text-gray-500 mt-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path d=\"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z\" />\n                        <path d=\"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z\" />\n                      </svg>\n                      <span className=\"font-medium\">Contact:</span>\n                      <span>{post.contactInfo}</span>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Legal Notice for Marketplace Posts */}\n              {(category?.type === \"wts\" || category?.type === \"wtb\" || category?.type === \"wtt\") && (\n                <>\n                  <Separator className=\"my-6\" />\n                  <div className=\"bg-forum-warning/10 border border-forum-warning/20 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-2\">\n                      <svg className=\"w-5 h-5 text-forum-warning mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                      </svg>\n                      <div>\n                        <p className=\"text-sm font-medium text-forum-warning mb-1\">\n                          California Law Compliance Required\n                        </p>\n                        <p className=\"text-xs text-forum-warning\">\n                          All firearm transfers must be conducted through licensed FFL dealers. Contact the seller to arrange transfer through a licensed dealer. \n                          Private party transfers without an FFL are prohibited under California law.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Replies Section */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center\">\n                <MessageCircle className=\"w-5 h-5 mr-2\" />\n                Comments ({replies.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {replies.length > 0 && (\n                <div className=\"space-y-4 mb-6\">\n                  {replies.map((reply) => (\n                    <div key={reply.id} className=\"border-l-2 border-gray-200 pl-4\" data-testid={`reply-${reply.id}`}>\n                      <div className=\"flex items-center space-x-2 mb-2 text-sm text-gray-500\">\n                        <div className=\"w-6 h-6 bg-forum-accent rounded-full flex items-center justify-center text-white text-xs font-medium\">\n                          {((reply as any).author?.username || reply.authorId).slice(0, 2).toUpperCase()}\n                        </div>\n                        <Link href={`/user/${reply.authorId}`}>\n                          <span className=\"font-medium text-forum-primary hover:text-forum-accent cursor-pointer transition-colors\">\n                            {(reply as any).author?.username || `User_${reply.authorId.slice(0, 6)}`}\n                          </span>\n                        </Link>\n                        <span>•</span>\n                        <span>{formatDate(reply.createdAt)}</span>\n                      </div>\n                      <p className=\"text-gray-900 whitespace-pre-wrap\">{reply.content}</p>\n                    </div>\n                  ))}\n                  <Separator />\n                </div>\n              )}\n\n              {/* Add Comment Form */}\n              {user ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-700\">\n                    <div className=\"w-6 h-6 bg-forum-accent rounded-full flex items-center justify-center text-white text-xs font-medium\">\n                      {user.id.slice(0, 2).toUpperCase()}\n                    </div>\n                    <span>Post a comment as {user.username || `User_${user.id.slice(0, 6)}`}</span>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <Textarea\n                      placeholder=\"Write your comment...\"\n                      value={newComment}\n                      onChange={(e) => setNewComment(e.target.value)}\n                      rows={3}\n                      data-testid=\"textarea-comment\"\n                    />\n                    <div className=\"flex justify-end\">\n                      <Button\n                        onClick={handleSubmitComment}\n                        disabled={!newComment.trim() || addCommentMutation.isPending}\n                        data-testid=\"button-post-comment\"\n                      >\n                        <Send className=\"w-4 h-4 mr-2\" />\n                        {addCommentMutation.isPending ? \"Posting...\" : \"Post Comment\"}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-gray-500 mb-4\">Please log in to post a comment</p>\n                  <Link href=\"/auth\">\n                    <Button variant=\"outline\" data-testid=\"button-login-comment\">\n                      Login to Comment\n                    </Button>\n                  </Link>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n\n      {/* Image Modal */}\n      {post?.images && (\n        <ImageModal\n          images={post.images}\n          currentIndex={currentImageIndex}\n          isOpen={imageModalOpen}\n          onClose={() => setImageModalOpen(false)}\n          onNavigate={setCurrentImageIndex}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":31040},"client/src/pages/privacy.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Home, Shield } from \"lucide-react\";\n\nexport default function PrivacyPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <nav className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400 mb-6\">\n          <Link href=\"/\" className=\"hover:text-forum-accent transition-colors flex items-center\" data-testid=\"link-home-breadcrumb\">\n            <Home className=\"w-4 h-4 mr-1\" />\n            Home\n          </Link>\n          <span>/</span>\n          <span className=\"text-gray-900 dark:text-white\">Privacy Policy</span>\n        </nav>\n\n        <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-3xl font-bold text-center text-gray-900 dark:text-white flex items-center justify-center\">\n              <Shield className=\"w-8 h-8 mr-3\" />\n              Privacy Policy\n            </CardTitle>\n            <p className=\"text-center text-gray-600 dark:text-gray-400 mt-2\">\n              Effective Date: January 1, 2025\n            </p>\n          </CardHeader>\n          <CardContent className=\"prose dark:prose-invert max-w-none p-8\">\n            <div className=\"text-center py-12\">\n              <Shield className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Privacy Policy</h3>\n              <p className=\"text-gray-600 dark:text-gray-400 max-w-lg mx-auto\">\n                This page is under construction. Our privacy policy will detail how we collect, use, and protect your personal information on CA Gun Exchange.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":1920},"client/src/pages/profile.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { User, Settings, Shield, Bell, Mail, Eye, EyeOff, MapPin, Lock, Home } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { updateUserProfileSchema, updateUserPreferencesSchema } from \"@shared/schema\";\nimport type { User as UserType, UserPreferences, UpdateUserProfile, UpdateUserPreferences } from \"@shared/schema\";\nimport { ProfilePictureUploader } from \"@/components/ProfilePictureUploader\";\nimport { ChangePasswordForm } from \"@/components/auth/change-password-form\";\nimport { useTheme } from \"@/components/theme/theme-provider\";\nimport { useAuth } from \"@/lib/auth\";\n\nexport default function ProfilePage() {\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const { toast } = useToast();\n  const { setTheme } = useTheme();\n  const { user: currentUser } = useAuth();\n\n  const { data: user, isLoading: userLoading } = useQuery<UserType>({\n    queryKey: [\"/api/user/profile\"],\n    enabled: !!currentUser?.id,\n  });\n\n  const { data: preferences, isLoading: preferencesLoading } = useQuery<UserPreferences>({\n    queryKey: [\"/api/user/preferences\"],\n    enabled: !!currentUser?.id,\n  });\n\n  const profileForm = useForm<UpdateUserProfile>({\n    resolver: zodResolver(updateUserProfileSchema),\n    defaultValues: {\n      username: user?.username || \"\",\n      email: user?.email || \"\",\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      location: user?.location || \"\",\n      bio: user?.bio || \"\",\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const preferencesForm = useForm<UpdateUserPreferences>({\n    resolver: zodResolver(updateUserPreferencesSchema),\n    defaultValues: {\n      emailNotifications: preferences?.emailNotifications || true,\n      messageNotifications: preferences?.messageNotifications || true,\n      marketingEmails: preferences?.marketingEmails || false,\n      profileVisibility: preferences?.profileVisibility || \"public\",\n      showEmail: preferences?.showEmail || false,\n      showLocation: preferences?.showLocation || true,\n      theme: preferences?.theme || \"system\",\n    },\n  });\n\n  // Update form defaults when data loads\n  React.useEffect(() => {\n    if (user) {\n      profileForm.reset({\n        username: user.username || \"\",\n        email: user.email || \"\",\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        location: user.location || \"\",\n        bio: user.bio || \"\",\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n    }\n  }, [user, profileForm]);\n\n  React.useEffect(() => {\n    if (preferences) {\n      preferencesForm.reset({\n        emailNotifications: preferences.emailNotifications ?? true,\n        messageNotifications: preferences.messageNotifications ?? true,\n        marketingEmails: preferences.marketingEmails ?? false,\n        profileVisibility: preferences.profileVisibility ?? \"public\",\n        showEmail: preferences.showEmail ?? false,\n        showLocation: preferences.showLocation ?? true,\n        theme: preferences.theme ?? \"system\",\n      });\n    }\n  }, [preferences, preferencesForm]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: UpdateUserProfile) => {\n      console.log(\"Mutation starting with data:\", data);\n      console.log(\"Current user for API call:\", currentUser);\n      try {\n        const result = await apiRequest(\"/api/user/profile\", {\n          method: \"PUT\",\n          body: data\n        });\n        console.log(\"API call successful:\", result);\n        return result;\n      } catch (error) {\n        console.error(\"API call failed:\", error);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      console.log(\"Profile update successful:\", data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/profile\"] });\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      // Clear password fields\n      profileForm.setValue(\"currentPassword\", \"\");\n      profileForm.setValue(\"newPassword\", \"\");\n      profileForm.setValue(\"confirmPassword\", \"\");\n    },\n    onError: (error: Error) => {\n      console.error(\"Profile update error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const updatePreferencesMutation = useMutation({\n    mutationFn: async (data: UpdateUserPreferences) => {\n      return await apiRequest(\"/api/user/preferences\", {\n        method: \"PUT\",\n        body: data\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/preferences\"] });\n      toast({\n        title: \"Preferences updated\",\n        description: \"Your preferences have been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const onProfileSubmit = (data: UpdateUserProfile) => {\n    console.log(\"=== PROFILE FORM SUBMISSION DEBUG ===\");\n    console.log(\"Profile form submitted with data:\", data);\n    console.log(\"Form errors:\", profileForm.formState.errors);\n    console.log(\"Form is valid:\", profileForm.formState.isValid);\n    console.log(\"Current user:\", currentUser);\n    \n    // Debug authentication state\n    const authState = JSON.parse(localStorage.getItem('auth-storage') || '{}');\n    console.log(\"Auth state from localStorage:\", authState);\n    console.log(\"Current user from auth state:\", authState?.state?.user);\n    console.log(\"User ID being sent in header:\", authState?.state?.user?.id);\n    console.log(\"=== CALLING MUTATION ===\");\n    \n    updateProfileMutation.mutate(data);\n  };\n\n  const onPreferencesSubmit = (data: UpdateUserPreferences) => {\n    // Apply theme change immediately\n    if (data.theme) {\n      setTheme(data.theme as any);\n    }\n    updatePreferencesMutation.mutate(data);\n  };\n\n  if (userLoading || preferencesLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <User className=\"h-8 w-8 mx-auto mb-4 text-muted-foreground\" />\n          <p className=\"text-muted-foreground\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      <nav className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400 mb-4\">\n        <Link href=\"/\" className=\"hover:text-forum-accent transition-colors flex items-center\" data-testid=\"link-home-breadcrumb\">\n          <Home className=\"w-4 h-4 mr-1\" />\n          Home\n        </Link>\n        <span>/</span>\n        <span className=\"text-gray-900 dark:text-white\">Profile</span>\n      </nav>\n      \n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Account Settings</h1>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"profile\" data-testid=\"profile-tab\">\n            <User className=\"h-4 w-4 mr-2\" />\n            Profile\n          </TabsTrigger>\n          <TabsTrigger value=\"preferences\" data-testid=\"preferences-tab\">\n            <Settings className=\"h-4 w-4 mr-2\" />\n            Preferences\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" data-testid=\"security-tab\">\n            <Shield className=\"h-4 w-4 mr-2\" />\n            Security\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"profile\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                Profile Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...profileForm}>\n                <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-6\">\n                  {/* Profile Picture Section */}\n                  <div className=\"flex justify-center\">\n                    <ProfilePictureUploader\n                      currentProfilePicture={user?.profilePicture || undefined}\n                      userInitials={`${user?.firstName?.[0] || user?.username?.[0] || 'U'}${user?.lastName?.[0] || ''}`}\n                      userId={currentUser?.id || \"\"}\n                    />\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={profileForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-username\" disabled />\n                          </FormControl>\n                          <FormDescription className=\"text-xs text-muted-foreground\">\n                            Username cannot be changed. Contact an administrator if needed.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={profileForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={profileForm.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} data-testid=\"input-first-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={profileForm.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} data-testid=\"input-last-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={profileForm.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"City, State\" data-testid=\"input-location\" />\n                        </FormControl>\n                        <FormDescription>\n                          Your general location (city, state) for local buyers/sellers\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={profileForm.control}\n                    name=\"bio\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Bio</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} value={field.value || \"\"} rows={3} data-testid=\"input-bio\" />\n                        </FormControl>\n                        <FormDescription>\n                          Tell others about yourself and your interests\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button \n                    type=\"submit\" \n                    data-testid=\"save-profile-btn\"\n                    disabled={updateProfileMutation.isPending}\n                    onClick={() => console.log(\"=== SAVE PROFILE BUTTON CLICKED ===\", profileForm.formState.errors)}\n                  >\n                    {updateProfileMutation.isPending ? \"Saving...\" : \"Save Profile\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"preferences\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Communication & Privacy Preferences\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...preferencesForm}>\n                <form onSubmit={preferencesForm.handleSubmit(onPreferencesSubmit)} className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium flex items-center gap-2\">\n                      <Bell className=\"h-4 w-4\" />\n                      Notifications\n                    </h3>\n                    \n                    <FormField\n                      control={preferencesForm.control}\n                      name=\"emailNotifications\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Email Notifications</FormLabel>\n                            <FormDescription>\n                              Receive email notifications for messages and important updates\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value ?? true}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"toggle-email-notifications\"\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={preferencesForm.control}\n                      name=\"messageNotifications\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Message Notifications</FormLabel>\n                            <FormDescription>\n                              Get notified when you receive new messages\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value ?? true}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"toggle-message-notifications\"\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={preferencesForm.control}\n                      name=\"marketingEmails\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Marketing Emails</FormLabel>\n                            <FormDescription>\n                              Receive emails about new features and community updates\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value ?? false}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"toggle-marketing-emails\"\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium flex items-center gap-2\">\n                      <Eye className=\"h-4 w-4\" />\n                      Privacy\n                    </h3>\n\n                    <FormField\n                      control={preferencesForm.control}\n                      name=\"profileVisibility\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Profile Visibility</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value ?? \"public\"}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-profile-visibility\">\n                                <SelectValue placeholder=\"Select visibility\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"public\">Public - Anyone can view</SelectItem>\n                              <SelectItem value=\"registered\">Registered Users Only</SelectItem>\n                              <SelectItem value=\"private\">Private - Hidden from others</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormDescription>\n                            Control who can view your profile information\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={preferencesForm.control}\n                      name=\"showEmail\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base flex items-center gap-2\">\n                              <Mail className=\"h-4 w-4\" />\n                              Show Email Address\n                            </FormLabel>\n                            <FormDescription>\n                              Display your email address on your profile\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value ?? false}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"toggle-show-email\"\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={preferencesForm.control}\n                      name=\"showLocation\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base flex items-center gap-2\">\n                              <MapPin className=\"h-4 w-4\" />\n                              Show Location\n                            </FormLabel>\n                            <FormDescription>\n                              Display your location on your profile\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value ?? true}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"toggle-show-location\"\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium flex items-center gap-2\">\n                      <Settings className=\"h-4 w-4\" />\n                      Appearance\n                    </h3>\n\n                    <FormField\n                      control={preferencesForm.control}\n                      name=\"theme\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Theme Preference</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value ?? \"system\"}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-theme\">\n                                <SelectValue placeholder=\"Select theme\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"light\">Light</SelectItem>\n                              <SelectItem value=\"dark\">Dark</SelectItem>\n                              <SelectItem value=\"system\">System (Auto)</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormDescription>\n                            Choose your preferred color theme. System will automatically match your device settings.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    data-testid=\"save-preferences-btn\"\n                    disabled={updatePreferencesMutation.isPending}\n                  >\n                    {updatePreferencesMutation.isPending ? \"Saving...\" : \"Save Preferences\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\">\n          <div className=\"flex justify-center\">\n            <ChangePasswordForm />\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":24571},"client/src/pages/public-profile.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, Calendar, MessageCircle, User, Send, Shield, UserX, Flag, Key, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\n\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User as UserType, Post, Category } from \"@shared/schema\";\nimport { useState } from \"react\";\n\nexport default function PublicProfile() {\n  const { id } = useParams<{ id: string }>();\n  const { user: currentUser } = useAuth();\n  const { toast } = useToast();\n  const [location, navigate] = useLocation();\n  const queryClient = useQueryClient();\n  const [messageDialogOpen, setMessageDialogOpen] = useState(false);\n  const [messageSubject, setMessageSubject] = useState(\"\");\n  const [messageContent, setMessageContent] = useState(\"\");\n\n  const { data: user } = useQuery<UserType>({\n    queryKey: [\"/api/users\", id],\n  });\n\n  const { data: userPosts = [] } = useQuery<Post[]>({\n    queryKey: [\"/api/posts/user\", id],\n    enabled: !!id,\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const formatDate = (date?: Date | null) => {\n    if (!date) return \"Unknown\";\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const getPostCountByType = (type: string) => {\n    return userPosts.filter(post => {\n      const category = categories.find(cat => cat.id === post.categoryId);\n      return category?.type === type;\n    }).length;\n  };\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ subject, content }: { subject: string; content: string }) => {\n      if (!currentUser || !user) throw new Error(\"Authentication required\");\n      \n      // Debug: Log what we're about to send\n      console.log(\"🔍 CLIENT - About to send conversation request with user ID:\", currentUser.id);\n      console.log(\"🔍 CLIENT - Headers to be sent:\", {\n        \"Content-Type\": \"application/json\",\n        \"x-user-id\": currentUser.id\n      });\n\n      // First create or find existing conversation - use session-based auth\n      const conversationResponse = await fetch(\"/api/conversations\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          participant1Id: currentUser.id,\n          participant2Id: user.id,\n        }),\n        credentials: \"include\",\n      });\n\n      if (!conversationResponse.ok) {\n        throw new Error(`Failed to create conversation: ${conversationResponse.statusText}`);\n      }\n\n      const conversation = await conversationResponse.json();\n\n      // Then send the message - use session-based auth\n      const messageResponse = await fetch(\"/api/messages\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          conversationId: conversation.id,\n          content: `Subject: ${subject}\\n\\n${content}`,\n        }),\n        credentials: \"include\",\n      });\n\n      if (!messageResponse.ok) {\n        throw new Error(`Failed to send message: ${messageResponse.statusText}`);\n      }\n\n      const message = await messageResponse.json();\n\n      return { conversation, message };\n    },\n    onSuccess: (data) => {\n      setMessageDialogOpen(false);\n      setMessageSubject(\"\");\n      setMessageContent(\"\");\n      toast({\n        title: \"Message Sent\",\n        description: \"Your message has been sent successfully!\",\n      });\n      // Navigate to the conversation\n      navigate(`/messages?conversation=${data.conversation.id}`);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!messageSubject.trim() || !messageContent.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide both a subject and message content.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendMessageMutation.mutate({\n      subject: messageSubject.trim(),\n      content: messageContent.trim(),\n    });\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <Card className=\"w-full max-w-md\">\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-gray-500 dark:text-gray-400\">User not found or loading...</p>\n            </CardContent>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <div className=\"flex-1\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-6\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Forum\n              </Button>\n            </Link>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* User Profile Card */}\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardHeader className=\"text-center\">\n                  <div className=\"flex flex-col items-center space-y-4\">\n                    <Avatar className=\"w-24 h-24\">\n                      <AvatarImage \n                        src={(user as any).profilePicture || undefined} \n                        alt={`${user.username}'s profile`}\n                      />\n                      <AvatarFallback className=\"text-2xl bg-forum-accent text-white\">\n                        {user.username.slice(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h1 className=\"text-2xl font-bold text-forum-primary\" data-testid=\"text-username\">\n                        {user.username}\n                      </h1>\n                      {user.firstName || user.lastName ? (\n                        <p className=\"text-gray-600 dark:text-gray-400\" data-testid=\"text-full-name\">\n                          {[user.firstName, user.lastName].filter(Boolean).join(' ')}\n                        </p>\n                      ) : null}\n                    </div>\n                    \n\n                    {/* Send Message Button - only show if not viewing own profile and user is logged in */}\n                    {currentUser && user && currentUser.id !== user.id && (\n                      <Dialog open={messageDialogOpen} onOpenChange={setMessageDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"mt-4\"\n                            data-testid=\"button-send-message\"\n                          >\n                            <MessageCircle className=\"w-4 h-4 mr-2\" />\n                            Send Message\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Send Message to {user.username}</DialogTitle>\n                            <DialogDescription>\n                              Send a private message to this user. They will receive it in their messages inbox.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"message-subject\">Subject</Label>\n                              <Input\n                                id=\"message-subject\"\n                                placeholder=\"Enter message subject...\"\n                                value={messageSubject}\n                                onChange={(e) => setMessageSubject(e.target.value)}\n                                data-testid=\"input-message-subject\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"message-content\">Message</Label>\n                              <Textarea\n                                id=\"message-content\"\n                                placeholder=\"Write your message here...\"\n                                value={messageContent}\n                                onChange={(e) => setMessageContent(e.target.value)}\n                                rows={5}\n                                data-testid=\"textarea-message-content\"\n                              />\n                            </div>\n                            <div className=\"flex justify-end space-x-3\">\n                              <Button \n                                variant=\"outline\" \n                                onClick={() => setMessageDialogOpen(false)}\n                                data-testid=\"button-cancel-message\"\n                              >\n                                Cancel\n                              </Button>\n                              <Button\n                                onClick={handleSendMessage}\n                                disabled={sendMessageMutation.isPending}\n                                data-testid=\"button-send-message-submit\"\n                              >\n                                <Send className=\"w-4 h-4 mr-2\" />\n                                {sendMessageMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                              </Button>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    )}\n\n                    {/* MODERATOR CONTROLS - SAME AS USER PROFILE */}\n                    {currentUser && (currentUser.isModerator || currentUser.isAdmin) && user && user.id !== currentUser.id && (\n                      <div className=\"bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-700 rounded-lg p-4 mt-4\">\n                        <h3 className=\"font-semibold text-red-800 dark:text-red-100 mb-3 flex items-center\">\n                          <Shield className=\"w-4 h-4 mr-2\" />\n                          Moderator Actions\n                          <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                            {currentUser.isAdmin ? 'Admin' : 'Moderator'}\n                          </Badge>\n                        </h3>\n                        <div className=\"space-y-2\">\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                className=\"w-full text-red-600 hover:text-red-700 border-red-300 hover:border-red-400\"\n                              >\n                                <UserX className=\"w-4 h-4 mr-2\" />\n                                {user?.isSuspended ? 'Unsuspend' : 'Suspend'}\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>\n                                  {user?.isSuspended ? 'Unsuspend User' : 'Suspend User'}\n                                </AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  {user?.isSuspended \n                                    ? `Are you sure you want to unsuspend ${user.username}? They will regain access to post and interact on the forum.`\n                                    : `Are you sure you want to suspend ${user.username}? They will lose access to post and interact on the forum.`\n                                  }\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction className=\"bg-red-600 hover:bg-red-700\">\n                                  {user?.isSuspended ? 'Unsuspend' : 'Suspend'}\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                className=\"w-full text-orange-600 hover:text-orange-700 border-orange-300 hover:border-orange-400\"\n                              >\n                                <Flag className=\"w-4 h-4 mr-2\" />\n                                Flag Username\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Flag Username</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Flag this user's username as inappropriate. They will be required to change it before they can continue using the forum.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction className=\"bg-orange-600 hover:bg-orange-700\">\n                                  Flag Username\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                className=\"w-full text-blue-600 hover:text-blue-700 border-blue-300 hover:border-blue-400\"\n                              >\n                                <Key className=\"w-4 h-4 mr-2\" />\n                                Flag Password\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Flag Password Reset</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Flag this user for a password reset. They will be required to change their password on next login.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction className=\"bg-blue-600 hover:bg-blue-700\">\n                                  Flag Password Reset\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n\n                          {currentUser.isAdmin && (\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\" \n                                  className=\"w-full text-purple-600 hover:text-purple-700 border-purple-300 hover:border-purple-400\"\n                                >\n                                  <Settings className=\"w-4 h-4 mr-2\" />\n                                  {user?.isModerator ? 'Remove Mod' : 'Make Mod'}\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>\n                                    {user?.isModerator ? 'Remove Moderator Status' : 'Grant Moderator Status'}\n                                  </AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    {user?.isModerator \n                                      ? `Remove moderator privileges from ${user.username}? They will no longer be able to moderate posts and users.`\n                                      : `Grant moderator privileges to ${user.username}? They will be able to moderate posts and users.`\n                                    }\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction className=\"bg-purple-600 hover:bg-purple-700\">\n                                    {user?.isModerator ? 'Remove Moderator' : 'Grant Moderator'}\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                    <Calendar className=\"w-4 h-4\" />\n                    <span data-testid=\"text-joined-date\">\n                      Joined {formatDate(user.createdAt)}\n                    </span>\n                  </div>\n                  \n                  <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\n                    <h3 className=\"font-medium text-forum-primary mb-3\">Activity</h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Total Posts</span>\n                        <Badge variant=\"outline\" data-testid=\"text-total-posts\">\n                          {userPosts.length}\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">For Sale Posts</span>\n                        <Badge variant=\"default\" data-testid=\"text-wts-posts\">\n                          {getPostCountByType('wts')}\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Want to Buy Posts</span>\n                        <Badge variant=\"secondary\" data-testid=\"text-wtb-posts\">\n                          {getPostCountByType('wtb')}\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Discussion Posts</span>\n                        <Badge variant=\"outline\" data-testid=\"text-discussion-posts\">\n                          {getPostCountByType('discussion')}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* User Posts */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <MessageCircle className=\"w-5 h-5\" />\n                    <span>Recent Posts by {user.username}</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {userPosts.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <User className=\"w-12 h-12 mx-auto text-gray-300 dark:text-gray-600 mb-4\" />\n                      <p className=\"text-gray-500 dark:text-gray-400\" data-testid=\"text-no-posts\">\n                        {user.username} hasn't created any posts yet.\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {userPosts.slice(0, 10).map((post) => {\n                        const category = categories.find(cat => cat.id === post.categoryId);\n                        const getBadgeVariant = (type?: string) => {\n                          switch (type) {\n                            case \"wts\": return \"default\";\n                            case \"wtb\": return \"secondary\";\n                            case \"discussion\": return \"outline\";\n                            default: return \"outline\";\n                          }\n                        };\n                        \n                        const getBadgeText = (type?: string) => {\n                          switch (type) {\n                            case \"wts\": return \"WTS\";\n                            case \"wtb\": return \"WTB\";\n                            case \"discussion\": return \"Discussion\";\n                            default: return \"Post\";\n                          }\n                        };\n\n                        return (\n                          <div \n                            key={post.id} \n                            className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                            data-testid={`post-${post.id}`}\n                          >\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge variant={getBadgeVariant(category?.type)}>\n                                  {getBadgeText(category?.type)}\n                                </Badge>\n                                {category && (\n                                  <span className=\"text-sm text-gray-500\">in {category.name}</span>\n                                )}\n                              </div>\n                              <span className=\"text-xs text-gray-400\">\n                                {formatDate(post.createdAt)}\n                              </span>\n                            </div>\n                            <Link href={`/posts/${post.id}`}>\n                              <h4 className=\"font-medium text-forum-primary hover:text-forum-accent cursor-pointer mb-2\">\n                                {post.title}\n                              </h4>\n                            </Link>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-2\">\n                              {post.content.length > 150 ? `${post.content.slice(0, 150)}...` : post.content}\n                            </p>\n                            <div className=\"flex items-center space-x-4 mt-3 text-xs text-gray-500\">\n                              {post.views !== undefined && (\n                                <span>{post.views} views</span>\n                              )}\n                              {post.price && (\n                                <span>${(post.price / 100).toLocaleString()}</span>\n                              )}\n                            </div>\n                          </div>\n                        );\n                      })}\n                      {userPosts.length > 10 && (\n                        <div className=\"text-center pt-4\">\n                          <p className=\"text-sm text-gray-500\">\n                            Showing 10 of {userPosts.length} posts\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":26003},"client/src/pages/report.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Home, Flag } from \"lucide-react\";\n\nexport default function ReportPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <nav className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400 mb-6\">\n          <Link href=\"/\" className=\"hover:text-forum-accent transition-colors flex items-center\" data-testid=\"link-home-breadcrumb\">\n            <Home className=\"w-4 h-4 mr-1\" />\n            Home\n          </Link>\n          <span>/</span>\n          <span className=\"text-gray-900 dark:text-white\">Report Issues</span>\n        </nav>\n\n        <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-3xl font-bold text-center text-gray-900 dark:text-white flex items-center justify-center\">\n              <Flag className=\"w-8 h-8 mr-3\" />\n              Report Issues\n            </CardTitle>\n            <p className=\"text-center text-gray-600 dark:text-gray-400 mt-2\">\n              Report violations, abuse, or technical problems\n            </p>\n          </CardHeader>\n          <CardContent className=\"prose dark:prose-invert max-w-none p-8\">\n            <div className=\"text-center py-12\">\n              <Flag className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Report Issues</h3>\n              <p className=\"text-gray-600 dark:text-gray-400 max-w-lg mx-auto\">\n                This page is under construction. Here you'll be able to report policy violations, inappropriate content, technical issues, or other problems on the platform.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":1941},"client/src/pages/safety.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Home, Shield } from \"lucide-react\";\n\nexport default function SafetyPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <nav className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400 mb-6\">\n          <Link href=\"/\" className=\"hover:text-forum-accent transition-colors flex items-center\" data-testid=\"link-home-breadcrumb\">\n            <Home className=\"w-4 h-4 mr-1\" />\n            Home\n          </Link>\n          <span>/</span>\n          <span className=\"text-gray-900 dark:text-white\">Safe Handling</span>\n        </nav>\n\n        <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-3xl font-bold text-center text-gray-900 dark:text-white flex items-center justify-center\">\n              <Shield className=\"w-8 h-8 mr-3\" />\n              Safe Handling\n            </CardTitle>\n            <p className=\"text-center text-gray-600 dark:text-gray-400 mt-2\">\n              Firearm safety information and best practices\n            </p>\n          </CardHeader>\n          <CardContent className=\"prose dark:prose-invert max-w-none p-8\">\n            <div className=\"text-center py-12\">\n              <Shield className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Safe Handling</h3>\n              <p className=\"text-gray-600 dark:text-gray-400 max-w-lg mx-auto\">\n                This page is under construction. Here you'll find comprehensive information about safe firearm handling, storage, and best practices for California gun owners.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":1947},"client/src/pages/search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation, Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, MessageSquare, Calendar, DollarSign, ArrowLeft, MapPin, Eye } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Post, Category } from \"@shared/schema\";\n\ninterface SearchResult {\n  posts: any[];\n  users: any[];\n  totalResults: number;\n}\n\nexport default function SearchPage() {\n  const [location, navigate] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentQuery, setCurrentQuery] = useState(\"\");\n\n  // Get search query from URL\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const query = params.get('q') || '';\n    setSearchTerm(query);\n    setCurrentQuery(query);\n  }, [location]);\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: searchResults, isLoading } = useQuery<SearchResult>({\n    queryKey: [\"/api/search\", currentQuery],\n    enabled: !!currentQuery.trim(),\n    queryFn: async () => {\n      const res = await fetch(`/api/search?q=${encodeURIComponent(currentQuery)}`, {\n        credentials: \"include\",\n      });\n      \n      if (!res.ok) {\n        throw new Error(`Search failed: ${res.status}`);\n      }\n      \n      return res.json();\n    },\n  });\n\n  const getCategoryName = (categoryId: string) => {\n    const category = categories.find(c => c.id === categoryId);\n    return category?.name || 'Unknown';\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchTerm.trim()) {\n      const newQuery = searchTerm.trim();\n      setCurrentQuery(newQuery);\n      navigate(`/search?q=${encodeURIComponent(newQuery)}`);\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Button \n          onClick={() => navigate(\"/\")} \n          variant=\"outline\" \n          size=\"sm\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Forum\n        </Button>\n\n        <form onSubmit={handleSearch} className=\"flex-1 max-w-2xl\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search posts, titles, users...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pr-12\"\n              data-testid=\"input-search-page\"\n            />\n            <Button\n              type=\"submit\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute right-1 top-1/2 -translate-y-1/2\"\n              data-testid=\"button-search-page\"\n            >\n              <Search className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </form>\n      </div>\n\n      {currentQuery && (\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n            Search Results for \"{currentQuery}\"\n          </h1>\n          {searchResults && (\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Found {searchResults.totalResults} result{searchResults.totalResults !== 1 ? 's' : ''}\n            </p>\n          )}\n        </div>\n      )}\n\n      {isLoading && (\n        <div className=\"text-center py-12\">\n          <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-forum-primary\"></div>\n          <p className=\"mt-4 text-gray-600 dark:text-gray-400\">Searching...</p>\n        </div>\n      )}\n\n      {searchResults && searchResults.users.length > 0 && (\n        <div className=\"space-y-4 mb-8\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Users</h2>\n          {searchResults.users.map((user) => (\n            <Card key={user.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-forum-primary rounded-full flex items-center justify-center text-white font-semibold text-lg\">\n                    {user.username.charAt(0).toUpperCase()}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Link \n                        href={`/user/${user.id}`} \n                        className=\"text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline\"\n                        data-testid={`link-user-${user.id}`}\n                      >\n                        {user.username}\n                      </Link>\n                      {user.isVerified && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">Verified</Badge>\n                      )}\n                    </div>\n                    {(user.firstName || user.lastName) && (\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        {user.firstName} {user.lastName}\n                      </p>\n                    )}\n                    {user.location && (\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        <MapPin className=\"w-3 h-3 inline mr-1\" />\n                        {user.location}\n                      </p>\n                    )}\n                    {user.bio && (\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2\">\n                        {user.bio}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      <Calendar className=\"w-3 h-3 inline mr-1\" />\n                      Joined {formatDistanceToNow(new Date(user.createdAt), { addSuffix: true })}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {searchResults && searchResults.posts.length > 0 && (\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Posts</h2>\n          {searchResults.posts.map((post) => (\n            <Card key={post.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Badge variant=\"secondary\" className=\"mb-2\">\n                    {getCategoryName(post.categoryId)}\n                  </Badge>\n                  {post.price && (\n                    <div className=\"flex items-center text-green-600 font-semibold\">\n                      <DollarSign className=\"h-4 w-4 mr-1\" />\n                      {post.price}\n                    </div>\n                  )}\n                </div>\n                <CardTitle className=\"text-lg\">\n                  <Link \n                    href={`/posts/${post.id}`} \n                    className=\"text-blue-600 dark:text-blue-400 hover:underline\"\n                    data-testid={`link-post-${post.id}`}\n                  >\n                    {post.title}\n                  </Link>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-3\">\n                  {post.content}\n                </p>\n                <div className=\"flex items-center justify-between text-sm text-gray-500 dark:text-gray-400\">\n                  <div className=\"flex items-center space-x-4\">\n                    <span>By {(post as any).username || 'Anonymous'}</span>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-1\" />\n                      {post.createdAt ? formatDistanceToNow(new Date(post.createdAt), { addSuffix: true }) : 'Unknown date'}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"flex items-center\">\n                      <MessageSquare className=\"h-4 w-4 mr-1\" />\n                      {(post as any).replyCount || 0} replies\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      {post.views || 0} views\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {searchResults && searchResults.posts.length === 0 && searchResults.users.length === 0 && currentQuery && !isLoading && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">No results found</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n            Try different keywords or check your spelling\n          </p>\n          <Button \n            onClick={() => navigate(\"/\")} \n            variant=\"outline\"\n            data-testid=\"button-browse-forum\"\n          >\n            Browse Forum\n          </Button>\n        </div>\n      )}\n\n      {!currentQuery && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Search the Forum</h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Enter keywords to find posts, discussions, and users\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10035},"client/src/pages/terms.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle, Home } from \"lucide-react\";\n\nexport default function TermsPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <nav className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400 mb-6\">\n          <Link href=\"/\" className=\"hover:text-forum-accent transition-colors flex items-center\" data-testid=\"link-home-breadcrumb\">\n            <Home className=\"w-4 h-4 mr-1\" />\n            Home\n          </Link>\n          <span>/</span>\n          <span className=\"text-gray-900 dark:text-white\">Terms of Service</span>\n        </nav>\n\n        <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-3xl font-bold text-center text-gray-900 dark:text-white\">\n              Terms and Conditions\n            </CardTitle>\n            <p className=\"text-center text-gray-600 dark:text-gray-400 mt-2\">\n              Effective Date: January 1, 2025\n            </p>\n          </CardHeader>\n          <CardContent className=\"prose dark:prose-invert max-w-none p-8\">\n            <p className=\"text-gray-700 dark:text-gray-300 mb-6\">\n              Welcome to CA Gun Exchange (the \"Website\"), accessible at cagunexchange.com. By accessing or using this Website, you agree to comply with and be bound by the following Terms and Conditions. If you do not agree, you may not use this Website.\n            </p>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">1. Purpose of Website</h2>\n            <div className=\"space-y-4 text-gray-700 dark:text-gray-300\">\n              <p>CA Gun Exchange is an online listing and discussion forum where users may post advertisements for firearms, ammunition, and related accessories.</p>\n              <p><strong>CA Gun Exchange is not a firearms dealer and does not sell, broker, or facilitate transactions.</strong></p>\n              <p>All actual firearm sales and transfers must be completed through a licensed Federal Firearms Licensee (FFL) in California and must comply with all applicable federal, state, and local laws.</p>\n            </div>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">2. User Responsibilities</h2>\n            <p className=\"text-gray-700 dark:text-gray-300 mb-4\">By using CA Gun Exchange, you agree that:</p>\n            <div className=\"space-y-4 text-gray-700 dark:text-gray-300\">\n              <p><strong>1.</strong> You are at least 18 years old (or 21 years old if required for the firearm or item).</p>\n              <p><strong>2.</strong> You will comply with all federal, state, and local firearm laws, including but not limited to:</p>\n              <ul className=\"list-disc ml-8 space-y-2\">\n                <li>Completing all firearm transfers through a licensed California FFL.</li>\n                <li>Complying with the 10-day waiting period and required background checks.</li>\n                <li>Following all restrictions on \"assault weapons,\" ammunition, and magazine capacities under California law.</li>\n              </ul>\n              <p><strong>3.</strong> You are solely responsible for ensuring that any listing, purchase, or transfer is legal in your jurisdiction.</p>\n              <p><strong>4.</strong> You will not use CA Gun Exchange for unlawful purposes, including but not limited to:</p>\n              <ul className=\"list-disc ml-8 space-y-2\">\n                <li>Attempting to buy, sell, or trade firearms without an FFL.</li>\n                <li>Engaging in straw purchases or selling to prohibited persons.</li>\n                <li>Posting fraudulent, misleading, or illegal content.</li>\n              </ul>\n            </div>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">3. Prohibited Content</h2>\n            <p className=\"text-gray-700 dark:text-gray-300 mb-4\">Users may not post content that:</p>\n            <ul className=\"list-disc ml-8 space-y-2 text-gray-700 dark:text-gray-300\">\n              <li>Promotes or facilitates illegal activity.</li>\n              <li>Contains threats, harassment, or discriminatory language.</li>\n              <li>Involves explosives, restricted devices, or items illegal under California law.</li>\n              <li>Infringes on intellectual property rights.</li>\n              <li>Includes offensive, inappropriate, explicit, or sexually suggestive profile pictures or images.</li>\n              <li>Contains images that violate community standards or depict illegal activities.</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">4. Disclaimer of Liability</h2>\n            <div className=\"space-y-4 text-gray-700 dark:text-gray-300\">\n              <p>CA Gun Exchange and its owners do not verify user listings, identities, criminal histories, or legal eligibility to own firearms.</p>\n              <p>The Website and its owners are not responsible for the accuracy, legality, or safety of listings.</p>\n              <p><strong>All use of CA Gun Exchange is at your own risk. The Website and its owners assume no liability for any damages, losses, injuries, or legal consequences arising from use of the Website.</strong></p>\n            </div>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">5. Moderation and Termination</h2>\n            <p className=\"text-gray-700 dark:text-gray-300 mb-4\">CA Gun Exchange reserves the right to:</p>\n            <ul className=\"list-disc ml-8 space-y-2 text-gray-700 dark:text-gray-300\">\n              <li>Edit or remove any content at any time.</li>\n              <li>Suspend or terminate accounts for violations of these Terms.</li>\n              <li>Cooperate with law enforcement as required by law.</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">6. Privacy</h2>\n            <p className=\"text-gray-700 dark:text-gray-300\">\n              CA Gun Exchange may collect limited user data necessary for account functionality. Information will not be sold to third parties but may be shared if legally required.\n            </p>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">7. Governing Law</h2>\n            <p className=\"text-gray-700 dark:text-gray-300\">\n              These Terms are governed by the laws of the State of California and applicable federal law.\n            </p>\n\n            <h2 className=\"text-2xl font-bold mt-8 mb-4 text-gray-900 dark:text-white\">8. Updates to Terms</h2>\n            <p className=\"text-gray-700 dark:text-gray-300\">\n              CA Gun Exchange may update these Terms and Conditions at any time. Continued use of the Website constitutes acceptance of the updated Terms.\n            </p>\n\n            <div className=\"mt-12 p-6 bg-gray-100 dark:bg-gray-700 rounded-lg\">\n              <p className=\"text-center font-medium text-gray-900 dark:text-white\">\n                By using CA Gun Exchange, you acknowledge that you have read, understood, and agree to these Terms and Conditions.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7511},"client/src/components/advertising/ad-container.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport BannerAd from \"./banner-ad\";\nimport type { Advertisement } from \"@shared/schema\";\n\ninterface AdContainerProps {\n  position: \"header\" | \"sidebar\" | \"footer\" | \"in-feed\";\n  className?: string;\n}\n\nexport default function AdContainer({ position, className = \"\" }: AdContainerProps) {\n  const { data: ads = [] } = useQuery<Advertisement[]>({\n    queryKey: [\"/api/advertisements\", position],\n  });\n\n  const activeAds = ads.filter(ad => {\n    if (!ad.isActive) return false;\n    if (ad.endDate && new Date(ad.endDate) < new Date()) return false;\n    return true;\n  });\n\n  if (activeAds.length === 0) return null;\n\n  // For now, show the first active ad. Could implement rotation logic here\n  const currentAd = activeAds[0];\n\n  return (\n    <div className={className}>\n      <BannerAd\n        id={currentAd.id}\n        title={currentAd.title}\n        description={currentAd.description}\n        imageUrl={currentAd.imageUrl || undefined}\n        targetUrl={currentAd.targetUrl}\n        sponsor={currentAd.sponsor}\n        position={position}\n        size={currentAd.size as \"small\" | \"medium\" | \"large\"}\n        dismissible={position === \"sidebar\"}\n      />\n    </div>\n  );\n}","size_bytes":1224},"client/src/components/advertising/banner-ad.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ExternalLink, X } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface BannerAdProps {\n  id: string;\n  title: string;\n  description: string;\n  imageUrl?: string;\n  targetUrl: string;\n  sponsor: string;\n  position: \"header\" | \"sidebar\" | \"footer\" | \"in-feed\";\n  size?: \"small\" | \"medium\" | \"large\";\n  dismissible?: boolean;\n}\n\nexport default function BannerAd({ \n  id, \n  title, \n  description, \n  imageUrl, \n  targetUrl, \n  sponsor, \n  position,\n  size = \"medium\",\n  dismissible = false \n}: BannerAdProps) {\n  const [isDismissed, setIsDismissed] = useState(false);\n\n  if (isDismissed) return null;\n\n  const handleAdClick = () => {\n    // Track ad click analytics here\n    console.log(`Ad clicked: ${id} - ${title}`);\n    window.open(targetUrl, '_blank', 'noopener,noreferrer');\n  };\n\n  const getSizeClasses = () => {\n    switch (size) {\n      case \"small\": return \"h-20\";\n      case \"large\": return \"h-40 md:h-32\";\n      default: return \"h-28\";\n    }\n  };\n\n  const getPositionClasses = () => {\n    switch (position) {\n      case \"header\": return \"mb-4\";\n      case \"footer\": return \"mt-4\";\n      case \"sidebar\": return \"mb-4\";\n      case \"in-feed\": return \"my-4\";\n      default: return \"\";\n    }\n  };\n\n  return (\n    <Card \n      className={`bg-yellow-50 dark:bg-yellow-950 border-yellow-200 dark:border-yellow-800 cursor-pointer hover:shadow-md transition-shadow ${getSizeClasses()} ${getPositionClasses()}`}\n      onClick={handleAdClick}\n      data-testid={`banner-ad-${id}`}\n    >\n      <CardContent className=\"p-3 h-full relative\">\n        {dismissible && (\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setIsDismissed(true);\n            }}\n            className=\"absolute top-2 right-2 text-gray-400 hover:text-gray-600 z-10\"\n            data-testid={`button-dismiss-ad-${id}`}\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        )}\n        \n        <div className=\"flex items-center h-full space-x-3\">\n          {imageUrl && (\n            <div className=\"flex-shrink-0\">\n              <img \n                src={imageUrl} \n                alt={sponsor}\n                className=\"w-16 h-16 object-cover rounded\"\n                onError={(e) => {\n                  e.currentTarget.style.display = 'none';\n                }}\n              />\n            </div>\n          )}\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <Badge variant=\"outline\" className=\"bg-yellow-100 dark:bg-yellow-900 text-xs\">\n                Sponsored\n              </Badge>\n              <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                by {sponsor}\n              </span>\n            </div>\n            \n            <h3 className=\"font-semibold text-sm text-gray-900 dark:text-gray-100 mb-1 line-clamp-1\">\n              {title}\n            </h3>\n            \n            <p className=\"text-xs text-gray-600 dark:text-gray-300 line-clamp-2\">\n              {description}\n            </p>\n            \n            <div className=\"flex items-center mt-2\">\n              <ExternalLink className=\"w-3 h-3 mr-1 text-gray-400\" />\n              <span className=\"text-xs text-gray-400\">Click to learn more</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3487},"client/src/components/advertising/featured-post-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, DollarSign, Eye, MessageSquare, TrendingUp, Star, Crown } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Post, User, FeaturedListing } from \"@shared/schema\";\n\ninterface FeaturedPostCardProps {\n  post: Post;\n  author?: User;\n  replyCount?: number;\n  category?: {\n    name: string;\n    type: string;\n  };\n  currentUser?: User | null;\n  featuredListing: FeaturedListing;\n}\n\nexport default function FeaturedPostCard({ \n  post, \n  author, \n  replyCount = 0, \n  category, \n  currentUser, \n  featuredListing \n}: FeaturedPostCardProps) {\n  const { toast } = useToast();\n\n  const bumpPostMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(`/api/posts/${post.id}/bump`, { method: \"POST\", body: { authorId: currentUser?.id } });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      toast({ title: \"Post bumped successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to bump post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const canBump = currentUser && currentUser.id === post.authorId;\n  const formatPrice = (priceInCents?: number | null) => {\n    if (!priceInCents) return null;\n    return `$${(priceInCents / 100).toLocaleString()}`;\n  };\n\n  const getTimeAgo = (date?: Date | string | null) => {\n    if (!date) return \"Unknown\";\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - dateObj.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Less than 1 hour ago\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} days ago`;\n  };\n\n  const getBadgeVariant = (type?: string) => {\n    switch (type) {\n      case \"wts\": return \"default\";\n      case \"wtb\": return \"secondary\";\n      case \"discussion\": return \"outline\";\n      default: return \"outline\";\n    }\n  };\n\n  const getBadgeText = (type?: string) => {\n    switch (type) {\n      case \"wts\": return \"WTS\";\n      case \"wtb\": return \"WTB\";\n      case \"discussion\": return \"Discussion\";\n      default: return \"Post\";\n    }\n  };\n\n  const isFeaturedActive = featuredListing.isActive && new Date(featuredListing.featuredUntil) > new Date();\n\n  return (\n    <Card \n      className={`transition-all duration-300 ${\n        isFeaturedActive \n          ? \"bg-gradient-to-r from-yellow-50 to-amber-50 dark:from-yellow-950/30 dark:to-amber-950/30 border-2 border-yellow-300 dark:border-yellow-600 shadow-lg hover:shadow-xl\" \n          : \"hover:shadow-md\"\n      }`}\n      data-testid={`card-featured-post-${post.id}`}\n    >\n      <CardContent className=\"p-6 relative\">\n        {/* Featured Badge */}\n        {isFeaturedActive && (\n          <div className=\"absolute -top-2 -right-2 z-10\">\n            <div className=\"bg-gradient-to-r from-yellow-400 to-amber-500 text-white px-3 py-1 rounded-full text-xs font-bold flex items-center shadow-lg\">\n              <Crown className=\"w-3 h-3 mr-1\" />\n              Featured\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex items-start space-x-4\">\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white font-medium ${\n            isFeaturedActive \n              ? \"bg-gradient-to-br from-yellow-500 to-amber-600 shadow-lg\" \n              : \"bg-forum-accent\"\n          }`}>\n            <span data-testid={`text-author-initials-${post.id}`}>\n              {author?.username?.slice(0, 2).toUpperCase() || \"??\"}\n            </span>\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              {author?.id ? (\n                <Link href={`/user/${author.id}`}>\n                  <span className={`font-medium cursor-pointer transition-colors ${\n                    isFeaturedActive \n                      ? \"text-amber-800 dark:text-amber-200 hover:text-amber-600 dark:hover:text-amber-300\" \n                      : \"text-forum-primary hover:text-forum-accent\"\n                  }`} data-testid={`text-author-${post.id}`}>\n                    {author.username || \"Unknown User\"}\n                  </span>\n                </Link>\n              ) : (\n                <span className=\"font-medium text-forum-primary\" data-testid={`text-author-${post.id}`}>\n                  Unknown User\n                </span>\n              )}\n              \n              <Badge variant={getBadgeVariant(category?.type)} data-testid={`badge-type-${post.id}`}>\n                {getBadgeText(category?.type)}\n              </Badge>\n              \n              {isFeaturedActive && (\n                <Badge variant=\"outline\" className=\"bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200\">\n                  <Star className=\"w-3 h-3 mr-1 fill-current\" />\n                  Promoted\n                </Badge>\n              )}\n              \n              <span className=\"text-xs text-gray-500 dark:text-gray-400\" data-testid={`text-timestamp-${post.id}`}>\n                {getTimeAgo(post.createdAt)}\n              </span>\n            </div>\n            \n            <Link href={`/posts/${post.id}`}>\n              <h3 className={`text-xl font-bold mb-2 cursor-pointer transition-colors ${\n                isFeaturedActive \n                  ? \"text-amber-900 dark:text-amber-100 hover:text-amber-700 dark:hover:text-amber-200\" \n                  : \"text-forum-primary hover:text-forum-accent\"\n              }`} data-testid={`link-post-title-${post.id}`}>\n                {post.title}\n              </h3>\n            </Link>\n            \n            <p className=\"text-gray-700 dark:text-gray-200 text-sm mb-3 line-clamp-3\" data-testid={`text-content-${post.id}`}>\n              {post.content.length > 200 ? `${post.content.slice(0, 200)}...` : post.content}\n            </p>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-300\">\n                {post.location && (\n                  <span className=\"flex items-center\" data-testid={`text-location-${post.id}`}>\n                    <MapPin className=\"w-4 h-4 mr-1\" />\n                    {post.location}\n                  </span>\n                )}\n                {post.price && (\n                  <span className=\"flex items-center font-semibold text-green-600 dark:text-green-400\" data-testid={`text-price-${post.id}`}>\n                    <DollarSign className=\"w-4 h-4 mr-1\" />\n                    {formatPrice(post.price)}\n                  </span>\n                )}\n                <span className=\"flex items-center\" data-testid={`text-views-${post.id}`}>\n                  <Eye className=\"w-4 h-4 mr-1\" />\n                  {post.views || 0} views\n                </span>\n                {replyCount > 0 && (\n                  <span className=\"flex items-center\" data-testid={`text-replies-${post.id}`}>\n                    <MessageSquare className=\"w-4 h-4 mr-1\" />\n                    {replyCount} replies\n                  </span>\n                )}\n              </div>\n              \n              {canBump && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => bumpPostMutation.mutate()}\n                  disabled={bumpPostMutation.isPending}\n                  data-testid={`button-bump-${post.id}`}\n                  className=\"ml-4\"\n                >\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  Bump\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8188},"client/src/components/auth/change-password-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle, CheckCircle2, Eye, EyeOff } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getPasswordRequirements } from \"@shared/password-utils\";\n\nconst passwordValidation = z.string()\n  .min(10, \"Password must be at least 10 characters long\")\n  .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, \n    \"Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character (@$!%*?&)\");\n\nconst changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: passwordValidation,\n  confirmPassword: z.string(),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"New password and confirmation must match\",\n  path: [\"confirmPassword\"],\n});\n\ntype ChangePasswordFormData = z.infer<typeof changePasswordSchema>;\n\nexport function ChangePasswordForm() {\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n    watch,\n  } = useForm<ChangePasswordFormData>({\n    resolver: zodResolver(changePasswordSchema),\n  });\n\n  const newPassword = watch(\"newPassword\");\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: ChangePasswordFormData) => {\n      const userId = sessionStorage.getItem(\"userId\");\n      if (!userId) {\n        throw new Error(\"User not authenticated\");\n      }\n      \n      return apiRequest(\"/api/auth/change-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-User-ID\": userId,\n        },\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: (data) => {\n      setSuccess(data.message);\n      reset();\n      // Clear success message after 5 seconds\n      setTimeout(() => setSuccess(null), 5000);\n    },\n  });\n\n  const onSubmit = (data: ChangePasswordFormData) => {\n    setSuccess(null);\n    changePasswordMutation.mutate(data);\n  };\n\n  const passwordRequirements = getPasswordRequirements();\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"change-password-card\">\n      <CardHeader>\n        <CardTitle data-testid=\"change-password-title\">Change Password</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {success && (\n          <Alert className=\"mb-4\" data-testid=\"change-password-success\">\n            <CheckCircle2 className=\"h-4 w-4\" />\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n\n        {changePasswordMutation.error && (\n          <Alert variant=\"destructive\" className=\"mb-4\" data-testid=\"change-password-error\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              {(changePasswordMutation.error as Error).message}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"currentPassword\" data-testid=\"label-current-password\">\n              Current Password\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"currentPassword\"\n                type={showCurrentPassword ? \"text\" : \"password\"}\n                {...register(\"currentPassword\")}\n                className={errors.currentPassword ? \"border-red-500\" : \"\"}\n                data-testid=\"input-current-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                data-testid=\"toggle-current-password\"\n              >\n                {showCurrentPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {errors.currentPassword && (\n              <p className=\"text-sm text-red-500\" data-testid=\"error-current-password\">\n                {errors.currentPassword.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"newPassword\" data-testid=\"label-new-password\">\n              New Password\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"newPassword\"\n                type={showNewPassword ? \"text\" : \"password\"}\n                {...register(\"newPassword\")}\n                className={errors.newPassword ? \"border-red-500\" : \"\"}\n                data-testid=\"input-new-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowNewPassword(!showNewPassword)}\n                data-testid=\"toggle-new-password\"\n              >\n                {showNewPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {errors.newPassword && (\n              <p className=\"text-sm text-red-500\" data-testid=\"error-new-password\">\n                {errors.newPassword.message}\n              </p>\n            )}\n            \n            {/* Password Requirements */}\n            <div className=\"mt-2 p-3 bg-muted rounded-md\" data-testid=\"password-requirements\">\n              <p className=\"text-sm font-medium mb-2\">Password Requirements:</p>\n              <ul className=\"text-xs space-y-1\">\n                {passwordRequirements.map((req, index) => (\n                  <li key={index} className=\"flex items-center gap-2\" data-testid={`requirement-${index}`}>\n                    <div className=\"w-1.5 h-1.5 bg-muted-foreground rounded-full\" />\n                    {req}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\" data-testid=\"label-confirm-password\">\n              Confirm New Password\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"confirmPassword\"\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                {...register(\"confirmPassword\")}\n                className={errors.confirmPassword ? \"border-red-500\" : \"\"}\n                data-testid=\"input-confirm-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                data-testid=\"toggle-confirm-password\"\n              >\n                {showConfirmPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {errors.confirmPassword && (\n              <p className=\"text-sm text-red-500\" data-testid=\"error-confirm-password\">\n                {errors.confirmPassword.message}\n              </p>\n            )}\n          </div>\n\n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={changePasswordMutation.isPending}\n            data-testid=\"button-change-password\"\n          >\n            {changePasswordMutation.isPending ? \"Changing Password...\" : \"Change Password\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8593},"client/src/components/auth/forced-password-change.tsx":{"content":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { validatePassword } from \"@shared/password-utils\";\n\ninterface ForcedPasswordChangeProps {\n  user: any;\n  onPasswordChanged: () => void;\n}\n\nexport function ForcedPasswordChange({ user, onPasswordChanged }: ForcedPasswordChangeProps) {\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const { toast } = useToast();\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!currentPassword) {\n      newErrors.currentPassword = \"Current password is required\";\n    }\n\n    const passwordValidation = validatePassword(newPassword);\n    if (!passwordValidation.isValid) {\n      newErrors.newPassword = passwordValidation.errors[0];\n    }\n\n    if (newPassword !== confirmPassword) {\n      newErrors.confirmPassword = \"Passwords do not match\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await apiRequest(\"/api/auth/change-password\", {\n        method: \"POST\",\n        headers: {\n          \"x-user-id\": user.id\n        },\n        body: {\n          currentPassword,\n          newPassword,\n          confirmPassword\n        },\n      });\n\n      toast({\n        title: \"Password Updated\",\n        description: \"Your password has been successfully updated with the new security requirements.\",\n        variant: \"default\",\n      });\n\n      onPasswordChanged();\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update password\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={() => {}}>\n      <DialogContent className=\"w-full max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl text-red-600 dark:text-red-400 text-center\">\n            Password Update Required\n          </DialogTitle>\n          <DialogDescription id=\"password-reset-description\" className=\"text-base text-center\">\n            Your current password doesn't meet our new security requirements. Please update your password to continue.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"p-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"currentPassword\">Current Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"currentPassword\"\n                  type={showCurrentPassword ? \"text\" : \"password\"}\n                  value={currentPassword}\n                  onChange={(e) => setCurrentPassword(e.target.value)}\n                  className={errors.currentPassword ? \"border-red-500\" : \"\"}\n                  data-testid=\"input-current-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                  data-testid=\"button-toggle-current-password\"\n                  tabIndex={-1}\n                >\n                  {showCurrentPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {errors.currentPassword && (\n                <p className=\"text-sm text-red-500\">{errors.currentPassword}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"newPassword\">New Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"newPassword\"\n                  type={showNewPassword ? \"text\" : \"password\"}\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  className={errors.newPassword ? \"border-red-500\" : \"\"}\n                  data-testid=\"input-new-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowNewPassword(!showNewPassword)}\n                  data-testid=\"button-toggle-new-password\"\n                  tabIndex={-1}\n                >\n                  {showNewPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {errors.newPassword && (\n                <p className=\"text-sm text-red-500\">{errors.newPassword}</p>\n              )}\n              <div className=\"text-sm text-muted-foreground\">\n                <p>Password requirements:</p>\n                <ul className=\"list-disc list-inside space-y-1 ml-2\">\n                  <li>At least 10 characters long</li>\n                  <li>Contains at least one uppercase letter</li>\n                  <li>Contains at least one lowercase letter</li>\n                  <li>Contains at least one number</li>\n                  <li>Contains at least one special character</li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  className={errors.confirmPassword ? \"border-red-500\" : \"\"}\n                  data-testid=\"input-confirm-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  data-testid=\"button-toggle-confirm-password\"\n                  tabIndex={-1}\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {errors.confirmPassword && (\n                <p className=\"text-sm text-red-500\">{errors.confirmPassword}</p>\n              )}\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-update-password\"\n            >\n              {isLoading ? \"Updating...\" : \"Update Password\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-md\">\n            <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n              <strong>Security Notice:</strong> We've updated our password requirements to better protect your account. \n              Your new password will be securely encrypted and must meet the requirements shown above.\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8682},"client/src/components/auth/login-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { loginSchema, type LoginData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { ForcedPasswordChange } from \"@/components/auth/forced-password-change\";\nimport UsernameChangeForm from \"./username-change-form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useActivityTracker } from \"@/lib/activity-tracker\";\nimport { UsernameStorage } from \"@/lib/username-storage\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface LoginFormProps {\n  onSuccess: () => void;\n}\n\nexport default function LoginForm({ onSuccess }: LoginFormProps) {\n  const { toast } = useToast();\n  const { startTrackingUser } = useActivityTracker();\n  const [error, setError] = useState<string>(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n\n  const [showPasswordReset, setShowPasswordReset] = useState(false);\n  const [userRequiringReset, setUserRequiringReset] = useState<any>(null);\n  const [showUsernameChange, setShowUsernameChange] = useState(false);\n  const [userRequiringUsernameChange, setUserRequiringUsernameChange] = useState<any>(null);\n\n\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: UsernameStorage.getMostRecentUsername(),\n      password: \"\",\n      rememberUsername: true,\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const response = await apiRequest(\"/api/auth/login\", { method: \"POST\", body: credentials });\n      return response;\n    },\n    onSuccess: (user) => {\n      const formData = form.getValues();\n      \n      // Save username if remember username is checked\n      if (formData.rememberUsername && formData.username) {\n        UsernameStorage.saveUsername(formData.username);\n      }\n      \n      // Check if user needs password reset\n      if (user.requirePasswordReset) {\n        setUserRequiringReset(user);\n        setShowPasswordReset(true);\n        toast({\n          title: \"Password Update Required\",\n          description: user.message || \"Your password must be updated to meet new security requirements.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Check if user needs username change\n      if (user.requireUsernameChange) {\n        setUserRequiringUsernameChange(user);\n        setShowUsernameChange(true);\n        toast({\n          title: \"Username Change Required\",\n          description: user.message || \"Your username has been flagged and must be changed.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Force immediate refetch of auth data after successful login\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      // Start activity tracking for all sessions\n      startTrackingUser();\n      \n      toast({\n        title: \"Login successful!\",\n        description: \"Welcome back to CA Gun Exchange!\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Login failed\");\n    },\n  });\n\n  const handlePasswordChanged = () => {\n    setShowPasswordReset(false);\n    setUserRequiringReset(null);\n    \n    // Login was successful, complete the authentication process\n    if (userRequiringReset) {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/auth/user\"] });\n      startTrackingUser();\n      \n      toast({\n        title: \"Login successful!\",\n        description: \"Welcome back to CA Gun Exchange!\",\n      });\n      onSuccess();\n    }\n  };\n\n  const handleUsernameChanged = (updatedUser: any) => {\n    setShowUsernameChange(false);\n    setUserRequiringUsernameChange(null);\n    \n    // Username change was successful, complete the authentication process\n    setUser(updatedUser);\n    startTrackingUser();\n    \n    toast({\n      title: \"Login successful!\",\n      description: \"Welcome back to CA Gun Exchange!\",\n    });\n    onSuccess();\n  };\n\n  const onSubmit = (data: LoginData) => {\n    setError(\"\");\n    loginMutation.mutate(data);\n  };\n\n  if (showPasswordReset && userRequiringReset) {\n    return <ForcedPasswordChange user={userRequiringReset} onPasswordChanged={handlePasswordChanged} />;\n  }\n\n  // Show username change form if user requires username change\n  if (showUsernameChange && userRequiringUsernameChange) {\n    return (\n      <UsernameChangeForm\n        currentUsername={userRequiringUsernameChange.username}\n        onSuccess={handleUsernameChanged}\n      />\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Sign In</CardTitle>\n        <CardDescription>\n          Welcome back to CA Gun Exchange\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              {...form.register(\"username\")}\n              data-testid=\"input-login-username\"\n            />\n            {form.formState.errors.username && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.username.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                {...form.register(\"password\")}\n                className=\"pr-9\"\n                data-testid=\"input-login-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-1 top-1 h-7 w-7 p-0\"\n                onClick={() => setShowPassword(!showPassword)}\n                data-testid=\"button-toggle-login-password\"\n                tabIndex={-1}\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {form.formState.errors.password && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.password.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox \n              id=\"rememberUsername\" \n              {...form.register(\"rememberUsername\")}\n              data-testid=\"checkbox-remember-username\"\n            />\n            <Label \n              htmlFor=\"rememberUsername\" \n              className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n            >\n              Remember my username\n            </Label>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-forum-accent hover:bg-forum-accent/90\"\n            disabled={loginMutation.isPending}\n            data-testid=\"button-login-submit\"\n          >\n            {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8181},"client/src/components/auth/register-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\n\ninterface RegisterFormProps {\n  onSuccess: () => void;\n}\n\nexport default function RegisterForm({ onSuccess }: RegisterFormProps) {\n  const { toast } = useToast();\n  const { setUser } = useAuth();\n  const [error, setError] = useState<string>(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      dateOfBirth: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: InsertUser) => {\n      const response = await apiRequest(\"/api/auth/register\", { method: \"POST\", body: userData });\n      return response;\n    },\n    onSuccess: (user) => {\n      setUser(user);\n      toast({\n        title: \"Registration successful!\",\n        description: \"Welcome to CA Gun Exchange.\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Registration failed\");\n    },\n  });\n\n  const onSubmit = (data: InsertUser) => {\n    setError(\"\");\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Create Account</CardTitle>\n        <CardDescription>\n          Join the CA Gun Exchange community. You must be 18 or older to register.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              {...form.register(\"username\")}\n              data-testid=\"input-username\"\n            />\n            {form.formState.errors.username && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.username.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              {...form.register(\"email\")}\n              data-testid=\"input-email\"\n            />\n            {form.formState.errors.email && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.email.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"firstName\">First Name</Label>\n              <Input\n                id=\"firstName\"\n                type=\"text\"\n                {...form.register(\"firstName\")}\n                data-testid=\"input-first-name\"\n              />\n              {form.formState.errors.firstName && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.firstName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lastName\">Last Name</Label>\n              <Input\n                id=\"lastName\"\n                type=\"text\"\n                {...form.register(\"lastName\")}\n                data-testid=\"input-last-name\"\n              />\n              {form.formState.errors.lastName && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.lastName.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                {...form.register(\"password\")}\n                className=\"pr-9\"\n                data-testid=\"input-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-1 top-1 h-7 w-7 p-0\"\n                onClick={() => setShowPassword(!showPassword)}\n                data-testid=\"button-toggle-register-password\"\n                tabIndex={-1}\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {form.formState.errors.password && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.password.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n            <Input\n              id=\"dateOfBirth\"\n              type=\"date\"\n              {...form.register(\"dateOfBirth\")}\n              data-testid=\"input-date-of-birth\"\n            />\n            {form.formState.errors.dateOfBirth && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.dateOfBirth.message}\n              </p>\n            )}\n            <p className=\"text-xs text-gray-500\">\n              You must be 18 or older to register\n            </p>\n          </div>\n\n          <div className=\"bg-forum-warning/10 border border-forum-warning/20 rounded-lg p-3\">\n            <p className=\"text-xs text-forum-warning font-medium\">\n              By registering, you acknowledge that you are 18 years or older and agree to comply with all federal, state, and local laws regarding firearm transactions.\n            </p>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-forum-accent hover:bg-forum-accent/90\"\n            disabled={registerMutation.isPending}\n            data-testid=\"button-register-submit\"\n          >\n            {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7001},"client/src/components/auth/username-change-form.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { AlertCircle, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\ninterface UsernameChangeFormProps {\n  currentUsername: string;\n  onSuccess: (newUser: any) => void;\n}\n\nexport default function UsernameChangeForm({ currentUsername, onSuccess }: UsernameChangeFormProps) {\n  const [newUsername, setNewUsername] = useState(\"\");\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  const changeUsernameMutation = useMutation({\n    mutationFn: async (username: string) => {\n      return await apiRequest(\"/api/profile/change-username\", {\n        method: \"PUT\",\n        body: { newUsername: username }\n      });\n    },\n    onSuccess: (data: any) => {\n      toast({ \n        title: \"Username Changed Successfully\",\n        description: \"Your username has been updated and you can now continue using the platform.\"\n      });\n      onSuccess(data);\n      navigate(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error Changing Username\",\n        description: error.message || \"Failed to change username. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newUsername.trim()) {\n      toast({\n        title: \"Username Required\",\n        description: \"Please enter a new username.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    changeUsernameMutation.mutate(newUsername.trim());\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-red-100 dark:from-gray-900 dark:to-gray-800\">\n      <Card className=\"w-full max-w-md shadow-lg\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 bg-orange-500/10 rounded-full\">\n              <AlertCircle className=\"h-8 w-8 text-orange-500\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Username Change Required</CardTitle>\n          <CardDescription>\n            Your current username has been flagged and must be changed before you can continue.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg border border-orange-200 dark:border-orange-800\">\n              <div className=\"flex items-center space-x-2 text-orange-800 dark:text-orange-200\">\n                <User className=\"h-4 w-4\" />\n                <span className=\"text-sm font-medium\">Current Username: {currentUsername}</span>\n              </div>\n              <p className=\"text-sm text-orange-700 dark:text-orange-300 mt-2\">\n                Your username has been flagged by an administrator and must be changed to continue using CA Gun Exchange.\n              </p>\n            </div>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"newUsername\">New Username</Label>\n                <Input\n                  id=\"newUsername\"\n                  type=\"text\"\n                  placeholder=\"Enter your new username\"\n                  value={newUsername}\n                  onChange={(e) => setNewUsername(e.target.value)}\n                  required\n                  data-testid=\"input-new-username\"\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={changeUsernameMutation.isPending}\n                data-testid=\"button-change-username\"\n              >\n                {changeUsernameMutation.isPending ? \"Changing Username...\" : \"Change Username\"}\n              </Button>\n            </form>\n            \n            <div className=\"text-center text-sm text-muted-foreground\">\n              <p>You must change your username to continue using the platform.</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4509},"client/src/components/forum/category-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Category } from \"@shared/schema\";\n\ninterface CategoryCardProps {\n  category: Category;\n  postCount?: number;\n}\n\nexport default function CategoryCard({ category, postCount = 0 }: CategoryCardProps) {\n  const getIcon = (type: string) => {\n    switch (type) {\n      case \"wts\":\n        return (\n          <svg className=\"w-5 h-5 mr-2 text-forum-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z\" />\n          </svg>\n        );\n      case \"wtb\":\n        return (\n          <svg className=\"w-5 h-5 mr-2 text-forum-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case \"wtt\":\n        return (\n          <svg className=\"w-5 h-5 mr-2 text-forum-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M8 5a1 1 0 100 2v3a1 1 0 001 1h3a1 1 0 100-2H9V7a3 3 0 10-1-2zM15 6a1 1 0 10-2 0 1 1 0 002 0zm-4 8a1 1 0 100 2 1 1 0 000-2z\" />\n            <path fillRule=\"evenodd\" d=\"M4 2a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V4a2 2 0 00-2-2H4zm0 2h12v12H4V4z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case \"discussion\":\n        return (\n          <svg className=\"w-5 h-5 mr-2 text-forum-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case \"wts\": return \"WTS\";\n      case \"wtb\": return \"WTB\";\n      case \"wtt\": return \"WTT\";\n      case \"discussion\": return \"Discussion\";\n      default: return \"\";\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\" data-testid={`card-category-${category.slug}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <CardTitle className=\"text-lg text-forum-primary flex items-center\">\n            {getIcon(category.type)}\n            {getTypeLabel(category.type)} {category.name}\n          </CardTitle>\n          <Badge variant=\"default\" className=\"bg-forum-accent text-white\" data-testid={`badge-count-${category.slug}`}>\n            {postCount}\n          </Badge>\n        </div>\n        <p className=\"text-gray-600 text-sm mb-4\" data-testid={`text-description-${category.slug}`}>\n          {category.description}\n        </p>\n        <Link \n          href={`/category/${category.slug}`}\n          className=\"text-forum-accent hover:text-forum-accent/80 font-medium text-sm\"\n          data-testid={`link-view-category-${category.slug}`}\n        >\n          View all listings →\n        </Link>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3346},"client/src/components/forum/post-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, DollarSign, Eye, MessageSquare, TrendingUp, Trash2, Pin, PinOff, Ban, UserX, Key } from \"lucide-react\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isModerator } from \"@/lib/moderator\";\nimport ImageModal from \"@/components/ui/image-modal\";\nimport { useState } from \"react\";\nimport type { Post, User } from \"@shared/schema\";\n\ninterface PostCardProps {\n  post: Post;\n  author?: User;\n  replyCount?: number;\n  category?: {\n    name: string;\n    type: string;\n  };\n  currentUser?: User | null;\n}\n\nexport default function PostCard({ post, author, replyCount = 0, category, currentUser }: PostCardProps) {\n  const { toast } = useToast();\n  const [imageModalOpen, setImageModalOpen] = useState(false);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  const bumpPostMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(`/api/posts/${post.id}/bump`, { method: \"POST\", body: { authorId: currentUser?.id } });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      toast({ title: \"Post bumped successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to bump post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Moderator mutations\n  const deletePostMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/posts/${post.id}/moderate`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to delete post\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      toast({\n        title: \"Success\",\n        description: \"Post has been deleted\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const pinPostMutation = useMutation({\n    mutationFn: async () => {\n      // Capture the current pin state before the toggle\n      const wasAlreadyPinned = post.isPinned;\n      \n      const response = await fetch(`/api/posts/${post.id}/pin`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to pin/unpin post\");\n      }\n\n      const updatedPost = await response.json();\n      return { updatedPost, wasAlreadyPinned };\n    },\n    onSuccess: ({ updatedPost, wasAlreadyPinned }) => {\n      // Invalidate all relevant caches\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts/category\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\", updatedPost.id] });\n      toast({\n        title: \"Success\",\n        description: wasAlreadyPinned ? \"Post has been unpinned\" : \"Post has been pinned\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to pin/unpin post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const suspendUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/users/${userId}/suspend`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to suspend/unsuspend user\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (updatedUser) => {\n      toast({\n        title: \"Success\",\n        description: updatedUser.isSuspended ? \"User has been suspended\" : \"User has been unsuspended\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to suspend/unsuspend user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const flagUsernameChangeMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/users/${userId}/flag-username-change`, {\n        method: \"PUT\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to flag user for username change\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User has been flagged for username change\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to flag user for username change\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const flagPasswordResetMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/users/${userId}/flag-password-reset`, {\n        method: \"PUT\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to flag user for password reset\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User has been flagged for password reset\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to flag user for password reset\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const canBump = currentUser && currentUser.id === post.authorId;\n  const formatPrice = (priceInCents?: number | null) => {\n    if (!priceInCents) return null;\n    return `$${(priceInCents / 100).toLocaleString()}`;\n  };\n\n  const getTimeAgo = (date?: Date | string | null) => {\n    if (!date) return \"Unknown\";\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - dateObj.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Less than 1 hour ago\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} days ago`;\n  };\n\n  const getBadgeVariant = (type?: string) => {\n    switch (type) {\n      case \"wts\": return \"default\";\n      case \"wtb\": return \"secondary\";\n      case \"discussion\": return \"outline\";\n      default: return \"outline\";\n    }\n  };\n\n  const getBadgeText = (type?: string) => {\n    switch (type) {\n      case \"wts\": return \"WTS\";\n      case \"wtb\": return \"WTB\";\n      case \"discussion\": return \"Discussion\";\n      default: return \"Post\";\n    }\n  };\n\n  return (\n    <>\n      <Card className={`hover:shadow-md transition-shadow ${post.isPinned ? 'border-l-4 border-l-forum-accent bg-forum-accent/5 dark:bg-forum-accent/10' : ''}`} data-testid={`card-post-${post.id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start space-x-4\">\n          <div className=\"w-10 h-10 bg-forum-accent rounded-full flex items-center justify-center text-white font-medium\">\n            <span data-testid={`text-author-initials-${post.id}`}>\n              {author?.username?.slice(0, 2).toUpperCase() || \"??\"}\n            </span>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              {author?.id ? (\n                <Link href={`/user/${author.id}`}>\n                  <span className=\"font-medium text-forum-primary hover:text-forum-accent cursor-pointer transition-colors\" data-testid={`text-author-${post.id}`}>\n                    {author.username || \"Unknown User\"}\n                  </span>\n                </Link>\n              ) : (\n                <span className=\"font-medium text-forum-primary\" data-testid={`text-author-${post.id}`}>\n                  Unknown User\n                </span>\n              )}\n              <Badge variant={getBadgeVariant(category?.type)} data-testid={`badge-type-${post.id}`}>\n                {getBadgeText(category?.type)}\n              </Badge>\n              <span className=\"text-xs text-gray-500 dark:text-gray-400\" data-testid={`text-timestamp-${post.id}`}>\n                {getTimeAgo(post.createdAt)}\n              </span>\n            </div>\n            <Link href={`/posts/${post.id}`}>\n              <h3 className=\"text-lg font-medium text-forum-primary mb-2 hover:text-forum-accent cursor-pointer flex items-center gap-2\" data-testid={`link-post-title-${post.id}`}>\n                {post.isPinned && <span className=\"text-forum-accent\">📌</span>}\n                {post.title}\n              </h3>\n            </Link>\n            <p className=\"text-gray-600 dark:text-gray-300 text-sm mb-2 line-clamp-3\" data-testid={`text-content-${post.id}`}>\n              {post.content.length > 200 ? `${post.content.slice(0, 200)}...` : post.content}\n            </p>\n            \n            {/* Travel, Shipping, and Trade Options - Only show for marketplace posts */}\n            {(category?.type === \"wts\" || category?.type === \"wtb\" || category?.type === \"wtt\") && (post.willingToTravel || post.willingToShip || post.willingToTrade) && (\n              <div className=\"flex gap-2 mb-3\">\n                {post.willingToTravel && (\n                  <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 border-green-300 dark:bg-green-900/30 dark:text-green-400 dark:border-green-600\" data-testid={`badge-willing-to-travel-${post.id}`}>\n                    Willing to Travel\n                  </Badge>\n                )}\n                {post.willingToShip && (\n                  <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-800 border-blue-300 dark:bg-blue-900/30 dark:text-blue-400 dark:border-blue-600\" data-testid={`badge-willing-to-ship-${post.id}`}>\n                    Willing to Ship\n                  </Badge>\n                )}\n                {post.willingToTrade && (\n                  <Badge variant=\"outline\" className=\"bg-orange-100 text-orange-800 border-orange-300 dark:bg-orange-900/30 dark:text-orange-400 dark:border-orange-600\" data-testid={`badge-willing-to-trade-${post.id}`}>\n                    Willing to Trade\n                  </Badge>\n                )}\n              </div>\n            )}\n            \n            {/* Post Images Preview */}\n            {post.images && post.images.length > 0 && (\n              <div className=\"mb-3\">\n                <div className=\"flex space-x-2 overflow-x-auto\">\n                  {post.images.slice(0, 3).map((imageUrl, index) => (\n                    <img\n                      key={index}\n                      src={imageUrl}\n                      alt={`Post preview ${index + 1}`}\n                      className=\"w-12 h-12 object-cover rounded border border-gray-200 flex-shrink-0 cursor-pointer hover:border-forum-accent transition-colors\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setCurrentImageIndex(index);\n                        setImageModalOpen(true);\n                      }}\n                      data-testid={`img-preview-${post.id}-${index}`}\n                      title=\"Click to view full size\"\n                    />\n                  ))}\n                  {post.images.length > 3 && (\n                    <div className=\"w-12 h-12 bg-gray-100 dark:bg-gray-700 rounded border border-gray-200 flex items-center justify-center text-xs text-gray-500 flex-shrink-0\">\n                      +{post.images.length - 3}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400\">\n                {post.location && (\n                  <span className=\"flex items-center\" data-testid={`text-location-${post.id}`}>\n                    <MapPin className=\"w-4 h-4 mr-1\" />\n                    {post.location}\n                  </span>\n                )}\n                {post.price && (\n                  <span className=\"flex items-center\" data-testid={`text-price-${post.id}`}>\n                    <DollarSign className=\"w-4 h-4 mr-1\" />\n                    {formatPrice(post.price)}\n                  </span>\n                )}\n                <span className=\"flex items-center\" data-testid={`text-views-${post.id}`}>\n                  <Eye className=\"w-4 h-4 mr-1\" />\n                  {post.views || 0} views\n                </span>\n                {replyCount > 0 && (\n                  <span className=\"flex items-center\" data-testid={`text-replies-${post.id}`}>\n                    <MessageSquare className=\"w-4 h-4 mr-1\" />\n                    {replyCount} replies\n                  </span>\n                )}\n              </div>\n              <div className=\"flex items-center space-x-2 ml-4\">\n                {canBump && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => bumpPostMutation.mutate()}\n                    disabled={bumpPostMutation.isPending}\n                    data-testid={`button-bump-${post.id}`}\n                  >\n                    <TrendingUp className=\"w-4 h-4 mr-1\" />\n                    Bump\n                  </Button>\n                )}\n\n                {/* Moderator actions for admins */}\n                {currentUser && isModerator(currentUser) && (\n                  <>\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          data-testid={`button-delete-post-${post.id}`}\n                          disabled={deletePostMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete Post</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete this post? This action cannot be undone.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={() => deletePostMutation.mutate()}\n                            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                          >\n                            Delete Post\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => pinPostMutation.mutate()}\n                      disabled={pinPostMutation.isPending}\n                      data-testid={`button-pin-post-${post.id}`}\n                    >\n                      {post.isPinned ? (\n                        <PinOff className=\"w-4 h-4\" />\n                      ) : (\n                        <Pin className=\"w-4 h-4\" />\n                      )}\n                    </Button>\n\n                    {post.authorId !== currentUser.id && author && (\n                      <>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              data-testid={`button-suspend-user-${post.id}`}\n                              disabled={suspendUserMutation.isPending}\n                            >\n                              <Ban className=\"w-4 h-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Suspend User</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to suspend {author.username}? They will not be able to create new posts or replies.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => suspendUserMutation.mutate(post.authorId)}\n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              >\n                                Suspend User\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              data-testid={`button-flag-username-${post.id}`}\n                              disabled={flagUsernameChangeMutation.isPending}\n                            >\n                              <UserX className=\"w-4 h-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Flag User for Username Change</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                This will require {author.username} to change their username on their next login. Use this for inappropriate or offensive usernames.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => flagUsernameChangeMutation.mutate(post.authorId)}\n                                className=\"bg-orange-600 text-white hover:bg-orange-700\"\n                              >\n                                Flag Username\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              data-testid={`button-flag-password-${post.id}`}\n                              disabled={flagPasswordResetMutation.isPending}\n                            >\n                              <Key className=\"w-4 h-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Flag User for Password Reset</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                This will require {author.username} to change their password on their next login. Use this for security concerns or compromised accounts.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => flagPasswordResetMutation.mutate(post.authorId)}\n                                className=\"bg-blue-600 text-white hover:bg-blue-700\"\n                              >\n                                Flag Password\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n      </Card>\n      \n      {/* Image Modal */}\n      {post.images && (\n        <ImageModal\n          images={post.images}\n          currentIndex={currentImageIndex}\n          isOpen={imageModalOpen}\n          onClose={() => setImageModalOpen(false)}\n          onNavigate={setCurrentImageIndex}\n        />\n      )}\n    </>\n  );\n}","size_bytes":22091},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-forum-primary dark:bg-gray-800 text-white mt-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-2\">\n            <h3 className=\"text-xl font-bold mb-4\">CA Gun Exchange</h3>\n            <p className=\"text-gray-300 mb-4\">\n              California's premier firearms community forum. Connecting responsible gun owners across the state while ensuring full compliance with all applicable laws.\n            </p>\n\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2 text-gray-300\">\n              <li><Link href=\"/terms\" className=\"hover:text-white transition-colors\" data-testid=\"link-terms\">Terms of Service</Link></li>\n              <li><Link href=\"/privacy\" className=\"hover:text-white transition-colors\" data-testid=\"link-privacy\">Privacy Policy</Link></li>\n              <li><Link href=\"/guidelines\" className=\"hover:text-white transition-colors\" data-testid=\"link-guidelines\">Community Guidelines</Link></li>\n              <li><Link href=\"/contact\" className=\"hover:text-white transition-colors\" data-testid=\"link-contact\">Contact Support</Link></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Legal Resources</h4>\n            <ul className=\"space-y-2 text-gray-300\">\n              <li><a href=\"https://oag.ca.gov/firearms\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:text-white transition-colors\" data-testid=\"link-ca-doj\">CA DOJ Firearms</a></li>\n              <li><a href=\"https://www.atf.gov\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:text-white transition-colors\" data-testid=\"link-atf\">ATF Guidelines</a></li>\n              <li><a href=\"https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=30515&lawCode=PEN\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:text-white transition-colors\" data-testid=\"link-penal-code\">Penal Code 30515</a></li>\n              <li><Link href=\"/safety\" className=\"hover:text-white transition-colors\" data-testid=\"link-safety\">Safe Handling</Link></li>\n              <li><Link href=\"/report\" className=\"hover:text-white transition-colors\" data-testid=\"link-report\">Report Issues</Link></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-600 mt-8 pt-8 text-center text-gray-400\">\n          <p>&copy; 2024 CA Gun Exchange. All rights reserved. | Age verification required (18+) | Licensed dealer transfers mandatory</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2814},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Search, Menu, X, MessageCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport LoginForm from \"@/components/auth/login-form\";\nimport RegisterForm from \"@/components/auth/register-form\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [loginOpen, setLoginOpen] = useState(false);\n  const [registerOpen, setRegisterOpen] = useState(false);\n  const { user, logout } = useAuth();\n\n  // Get unread message count for logged in users\n  const { data: unreadCountData } = useQuery<{ count: number }>({\n    queryKey: [\"/api/messages/unread-count\"],\n    enabled: !!user,\n    refetchInterval: 30000, // Check every 30 seconds\n  });\n\n  const unreadCount = Number(unreadCountData?.count || 0);\n  \n  // Debug logging for unread count\n  if (user?.username === 'jkimber1') {\n    console.log('🔔 NOTIFICATION DEBUG - User:', user?.username, 'Unread count data:', unreadCountData, 'Final count:', unreadCount);\n  }\n\n\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchTerm.trim()) {\n      // Navigate to search results page with query\n      window.location.href = `/search?q=${encodeURIComponent(searchTerm.trim())}`;\n    }\n  };\n\n  return (\n    <>\n      <header className=\"bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Link href=\"/\" className=\"flex-shrink-0\" data-testid=\"link-home\">\n                <h1 className=\"text-2xl font-bold text-forum-primary dark:text-white\">CA Gun Exchange</h1>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">California Firearms Community</p>\n              </Link>\n            </div>\n            \n            <div className=\"hidden md:block flex-1 max-w-lg mx-8\">\n              <form onSubmit={handleSearch} className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search forums...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pr-10\"\n                  data-testid=\"input-search\"\n                />\n                <Button\n                  type=\"submit\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-1 top-1/2 -translate-y-1/2\"\n                  data-testid=\"button-search\"\n                >\n                  <Search className=\"h-4 w-4 text-gray-400\" />\n                </Button>\n              </form>\n            </div>\n\n            <div className=\"flex items-center space-x-2 md:space-x-4\">\n              {/* Desktop Navigation */}\n              {user ? (\n                <div className=\"hidden md:flex items-center space-x-4\">\n                  <Link href=\"/messages\" className=\"text-sm font-medium text-gray-700 dark:text-gray-200 hover:text-forum-accent dark:hover:text-forum-accent transition-colors relative\" data-testid=\"link-messages\">\n                    <span className=\"flex items-center gap-1\">\n                      <MessageCircle className=\"h-4 w-4\" />\n                      Messages\n                      {unreadCount > 0 && (\n                        <Badge variant=\"destructive\" className=\"text-xs ml-1 px-1 min-w-[1.25rem] h-5\">\n                          {unreadCount}\n                        </Badge>\n                      )}\n                    </span>\n                  </Link>\n                  <Link href=\"/profile\" className=\"text-sm font-medium text-gray-700 dark:text-gray-200 hover:text-forum-accent dark:hover:text-forum-accent transition-colors\" data-testid=\"link-profile\">\n                    Profile\n                  </Link>\n                  <span className=\"text-sm font-medium text-gray-700 dark:text-gray-200\" data-testid=\"text-username\">\n                    {user.username}\n                  </span>\n                  <Button onClick={logout} variant=\"outline\" size=\"sm\" className=\"border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-800\" data-testid=\"button-logout\">\n                    Logout\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"hidden md:flex items-center space-x-3\">\n                  <Dialog open={loginOpen} onOpenChange={setLoginOpen}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"default\" size=\"sm\" className=\"bg-forum-accent hover:bg-forum-accent/90 text-white\" data-testid=\"button-signin\">\n                        Sign In\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Sign In</DialogTitle>\n                        <DialogDescription>\n                          Sign in to your account to access your profile and participate in discussions.\n                        </DialogDescription>\n                      </DialogHeader>\n                      <LoginForm onSuccess={() => setLoginOpen(false)} />\n                    </DialogContent>\n                  </Dialog>\n                  \n                  <Dialog open={registerOpen} onOpenChange={setRegisterOpen}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\" size=\"sm\" className=\"border-forum-accent text-forum-accent hover:bg-forum-accent hover:text-white dark:border-forum-accent dark:text-forum-accent\" data-testid=\"button-register\">\n                        Register\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Register</DialogTitle>\n                        <DialogDescription>\n                          Create a new account to join the CA Gun Exchange community.\n                        </DialogDescription>\n                      </DialogHeader>\n                      <RegisterForm onSuccess={() => setRegisterOpen(false)} />\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              )}\n              \n              {/* Mobile Navigation - Compact */}\n              {user && (\n                <div className=\"flex md:hidden items-center space-x-1\">\n                  <Link href=\"/messages\" className=\"p-2 text-gray-700 dark:text-gray-200 hover:text-forum-accent dark:hover:text-forum-accent transition-colors relative\" data-testid=\"link-messages-mobile\">\n                    <span className=\"text-xs font-medium\">Msgs</span>\n                    {unreadCount > 0 && (\n                      <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 text-xs px-1 min-w-[1.25rem] h-5\">\n                        {unreadCount}\n                      </Badge>\n                    )}\n                  </Link>\n                  <Link href=\"/profile\" className=\"p-2 text-gray-700 dark:text-gray-200 hover:text-forum-accent dark:hover:text-forum-accent transition-colors\" data-testid=\"link-profile-mobile\">\n                    <span className=\"text-xs font-medium\">Profile</span>\n                  </Link>\n                </div>\n              )}\n              \n              {/* Mobile Menu Button */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"md:hidden p-2 text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                data-testid=\"button-mobile-menu\"\n              >\n                {mobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Mobile Menu Overlay */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 shadow-lg\">\n          <div className=\"px-4 py-3 space-y-3\">\n            {/* Mobile Search */}\n            <form onSubmit={handleSearch} className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search forums...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pr-10 bg-gray-50 dark:bg-gray-800 border-gray-300 dark:border-gray-600\"\n                data-testid=\"input-search-mobile\"\n              />\n              <Button\n                type=\"submit\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-1 top-1/2 -translate-y-1/2\"\n                data-testid=\"button-search-mobile\"\n              >\n                <Search className=\"h-4 w-4 text-gray-400\" />\n              </Button>\n            </form>\n\n            {/* Mobile Navigation Links */}\n            {user ? (\n              <div className=\"space-y-2\">\n                <Link \n                  href=\"/messages\" \n                  className=\"block py-2 px-3 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors\" \n                  data-testid=\"link-messages-menu\"\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <span className=\"flex items-center justify-between\">\n                    Messages\n                    {unreadCount > 0 && (\n                      <Badge variant=\"destructive\" className=\"text-xs ml-2 px-1 min-w-[1.25rem] h-5\">\n                        {unreadCount}\n                      </Badge>\n                    )}\n                  </span>\n                </Link>\n                <Link \n                  href=\"/profile\" \n                  className=\"block py-2 px-3 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors\" \n                  data-testid=\"link-profile-menu\"\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  Profile\n                </Link>\n                {user.isAdmin && (\n                  <Link \n                    href=\"/admin\" \n                    className=\"block py-2 px-3 text-sm font-medium text-forum-accent hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors\" \n                    data-testid=\"link-admin-menu\"\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    Admin Dashboard\n                  </Link>\n                )}\n                <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n                  <span className=\"block py-2 px-3 text-sm text-gray-500 dark:text-gray-400\">\n                    Logged in as: {user.username}\n                  </span>\n                  <Button \n                    onClick={() => { logout(); setMobileMenuOpen(false); }} \n                    variant=\"outline\" \n                    className=\"w-full mt-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-800\" \n                    data-testid=\"button-logout-mobile\"\n                  >\n                    Logout\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <Dialog open={loginOpen} onOpenChange={setLoginOpen}>\n                  <DialogTrigger asChild>\n                    <Button \n                      variant=\"default\" \n                      className=\"w-full bg-forum-accent hover:bg-forum-accent/90 text-white\" \n                      data-testid=\"button-signin-mobile\"\n                      onClick={() => setMobileMenuOpen(false)}\n                    >\n                      Sign In\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Sign In</DialogTitle>\n                      <DialogDescription>\n                        Sign in to your account to access your profile and participate in discussions.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <LoginForm onSuccess={() => { setLoginOpen(false); setMobileMenuOpen(false); }} />\n                  </DialogContent>\n                </Dialog>\n                \n                <Dialog open={registerOpen} onOpenChange={setRegisterOpen}>\n                  <DialogTrigger asChild>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full border-forum-accent text-forum-accent hover:bg-forum-accent hover:text-white dark:border-forum-accent dark:text-forum-accent\" \n                      data-testid=\"button-register-mobile\"\n                      onClick={() => setMobileMenuOpen(false)}\n                    >\n                      Register\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Register</DialogTitle>\n                      <DialogDescription>\n                        Create a new account to join the CA Gun Exchange community.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <RegisterForm onSuccess={() => { setRegisterOpen(false); setMobileMenuOpen(false); }} />\n                  </DialogContent>\n                </Dialog>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Legal Compliance Banner */}\n      <div className=\"bg-forum-warning text-white py-3\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-center text-center\">\n            <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"font-medium text-sm\">\n              IMPORTANT: All firearm transfers must be conducted through licensed FFL dealers in accordance with California law. This platform is for listings only.\n            </span>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":15084},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport type { Category } from \"@shared/schema\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  \n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: stats } = useQuery<{\n    totalMembers: number;\n    activeListings: number;\n    postsToday: number;\n  }>({\n    queryKey: [\"/api/stats\"],\n  });\n\n  const wtsCategories = categories.filter(cat => cat.type === \"wts\");\n  const wtbCategories = categories.filter(cat => cat.type === \"wtb\");\n  const wttCategories = categories.filter(cat => cat.type === \"wtt\");\n  const discussionCategories = categories.filter(cat => cat.type === \"discussion\");\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n        <CardHeader className=\"bg-forum-primary dark:bg-gray-700 text-white\">\n          <CardTitle className=\"text-base font-semibold\">Forum Categories</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4 space-y-4\">\n          <div>\n            <h3 className=\"font-semibold text-forum-secondary dark:text-gray-200 mb-2 flex items-center\">\n              <svg className=\"w-4 h-4 mr-2 text-forum-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z\" />\n              </svg>\n              Marketplace (WTS)\n            </h3>\n            <ul className=\"space-y-1 ml-6\">\n              {wtsCategories.map((category) => (\n                <li key={category.id}>\n                  <Link \n                    href={`/category/${category.slug}`}\n                    className=\"text-gray-600 dark:text-gray-300 hover:text-forum-accent transition-colors\"\n                    data-testid={`link-category-${category.slug}`}\n                  >\n                    {category.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-forum-secondary dark:text-gray-200 mb-2 flex items-center\">\n              <svg className=\"w-4 h-4 mr-2 text-forum-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\" clipRule=\"evenodd\" />\n              </svg>\n              Looking For (WTB)\n            </h3>\n            <ul className=\"space-y-1 ml-6\">\n              {wtbCategories.map((category) => (\n                <li key={category.id}>\n                  <Link \n                    href={`/category/${category.slug}`}\n                    className=\"text-gray-600 dark:text-gray-300 hover:text-forum-accent transition-colors\"\n                    data-testid={`link-category-${category.slug}`}\n                  >\n                    {category.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-forum-secondary dark:text-gray-200 mb-2 flex items-center\">\n              <svg className=\"w-4 h-4 mr-2 text-forum-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M8 5a1 1 0 100 2v3a1 1 0 001 1h3a1 1 0 100-2H9V7a3 3 0 10-1-2zM15 6a1 1 0 10-2 0 1 1 0 002 0zm-4 8a1 1 0 100 2 1 1 0 000-2z\" />\n                <path fillRule=\"evenodd\" d=\"M4 2a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V4a2 2 0 00-2-2H4zm0 2h12v12H4V4z\" clipRule=\"evenodd\" />\n              </svg>\n              Want To Trade (WTT)\n            </h3>\n            <ul className=\"space-y-1 ml-6\">\n              {wttCategories.map((category) => (\n                <li key={category.id}>\n                  <Link \n                    href={`/category/${category.slug}`}\n                    className=\"text-gray-600 dark:text-gray-300 hover:text-forum-accent transition-colors\"\n                    data-testid={`link-category-${category.slug}`}\n                  >\n                    {category.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-forum-secondary dark:text-gray-200 mb-2 flex items-center\">\n              <svg className=\"w-4 h-4 mr-2 text-forum-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z\" clipRule=\"evenodd\" />\n              </svg>\n              Discussion\n            </h3>\n            <ul className=\"space-y-1 ml-6\">\n              {discussionCategories.map((category) => (\n                <li key={category.id}>\n                  <Link \n                    href={`/category/${category.slug}`}\n                    className=\"text-gray-600 dark:text-gray-300 hover:text-forum-accent transition-colors\"\n                    data-testid={`link-category-${category.slug}`}\n                  >\n                    {category.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats */}\n      <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-base font-semibold text-forum-secondary dark:text-gray-200\">Forum Stats</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4\">\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600 dark:text-gray-300\">Total Members:</span>\n              <span className=\"font-medium dark:text-white\" data-testid=\"text-total-members\">\n                {stats?.totalMembers?.toLocaleString() || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600 dark:text-gray-300\">Active Listings:</span>\n              <span className=\"font-medium dark:text-white\" data-testid=\"text-active-listings\">\n                {stats?.activeListings?.toLocaleString() || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600 dark:text-gray-300\">Posts Today:</span>\n              <span className=\"font-medium dark:text-white\" data-testid=\"text-posts-today\">\n                {stats?.postsToday?.toLocaleString() || 0}\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7057},"client/src/components/theme/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"ca-gun-exchange-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":1585},"client/src/components/theme/theme-toggle.tsx":{"content":"import { Monitor, Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"./theme-provider\";\n\nexport function ThemeToggle() {\n  const { setTheme, theme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"icon\" \n          className=\"h-9 w-9 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200\" \n          data-testid=\"button-theme-toggle\"\n        >\n          <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0 text-yellow-500\" />\n          <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100 text-blue-400\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n        <DropdownMenuItem \n          onClick={() => setTheme(\"light\")} \n          className={`hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-900 dark:text-gray-100 ${theme === \"light\" ? \"bg-gray-100 dark:bg-gray-700\" : \"\"}`}\n          data-testid=\"theme-light\"\n        >\n          <Sun className=\"mr-2 h-4 w-4 text-yellow-500\" />\n          <span>Light</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"dark\")} \n          className={`hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-900 dark:text-gray-100 ${theme === \"dark\" ? \"bg-gray-100 dark:bg-gray-700\" : \"\"}`}\n          data-testid=\"theme-dark\"\n        >\n          <Moon className=\"mr-2 h-4 w-4 text-blue-400\" />\n          <span>Dark</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"system\")} \n          className={`hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-900 dark:text-gray-100 ${theme === \"system\" ? \"bg-gray-100 dark:bg-gray-700\" : \"\"}`}\n          data-testid=\"theme-system\"\n        >\n          <Monitor className=\"mr-2 h-4 w-4 text-gray-600 dark:text-gray-400\" />\n          <span>System</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":2415},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/image-modal.tsx":{"content":"import { useState } from \"react\";\nimport { X, ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface ImageModalProps {\n  images: string[];\n  currentIndex: number;\n  isOpen: boolean;\n  onClose: () => void;\n  onNavigate: (index: number) => void;\n}\n\nexport default function ImageModal({ images, currentIndex, isOpen, onClose, onNavigate }: ImageModalProps) {\n  if (!isOpen || !images.length) return null;\n\n  const handleBackdropClick = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const handlePrevious = () => {\n    const newIndex = currentIndex > 0 ? currentIndex - 1 : images.length - 1;\n    onNavigate(newIndex);\n  };\n\n  const handleNext = () => {\n    const newIndex = currentIndex < images.length - 1 ? currentIndex + 1 : 0;\n    onNavigate(newIndex);\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\"\n      onClick={handleBackdropClick}\n      data-testid=\"image-modal\"\n    >\n      <div className=\"relative max-w-4xl max-h-[90vh] w-full h-full flex items-center justify-center p-4\">\n        {/* Close button */}\n        <button\n          onClick={onClose}\n          className=\"absolute top-4 right-4 text-white hover:text-gray-300 z-10\"\n          data-testid=\"button-close-modal\"\n        >\n          <X size={24} />\n        </button>\n\n        {/* Navigation buttons */}\n        {images.length > 1 && (\n          <>\n            <button\n              onClick={handlePrevious}\n              className=\"absolute left-4 text-white hover:text-gray-300 z-10\"\n              data-testid=\"button-previous-image\"\n            >\n              <ChevronLeft size={32} />\n            </button>\n            <button\n              onClick={handleNext}\n              className=\"absolute right-4 text-white hover:text-gray-300 z-10\"\n              data-testid=\"button-next-image\"\n            >\n              <ChevronRight size={32} />\n            </button>\n          </>\n        )}\n\n        {/* Image */}\n        <img\n          src={images[currentIndex]}\n          alt={`Image ${currentIndex + 1}`}\n          className=\"max-w-full max-h-full object-contain\"\n          data-testid={`img-modal-${currentIndex}`}\n        />\n\n        {/* Image counter */}\n        {images.length > 1 && (\n          <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white bg-black bg-opacity-50 px-3 py-1 rounded\">\n            {currentIndex + 1} of {images.length}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":2532},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}